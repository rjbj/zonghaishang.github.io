{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/1537246923798.png","path":"images/1537246923798.png","modified":1,"renderable":0},{"_id":"source/images/fastjson.jpg","path":"images/fastjson.jpg","modified":1,"renderable":0},{"_id":"source/images/jdk.jpg","path":"images/jdk.jpg","modified":1,"renderable":0},{"_id":"source/images/spring.jpg","path":"images/spring.jpg","modified":1,"renderable":0},{"_id":"source/images/working.jpg","path":"images/working.jpg","modified":1,"renderable":0},{"_id":"source/images/yiji.png","path":"images/yiji.png","modified":1,"renderable":0},{"_id":"source/images/1538293549011.png","path":"images/1538293549011.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/img/quotes.png","path":"img/quotes.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/md5.min.js","path":"js/md5.min.js","modified":1,"renderable":1},{"_id":"source/images/1538297025076.png","path":"images/1538297025076.png","modified":1,"renderable":0},{"_id":"source/images/banner.jpeg","path":"images/banner.jpeg","modified":1,"renderable":0},{"_id":"source/images/1538297510399.png","path":"images/1538297510399.png","modified":1,"renderable":0},{"_id":"source/images/1538297855578.png","path":"images/1538297855578.png","modified":1,"renderable":0},{"_id":"source/images/1538296119277.png","path":"images/1538296119277.png","modified":1,"renderable":0},{"_id":"source/images/1538297199420.png","path":"images/1538297199420.png","modified":1,"renderable":0},{"_id":"source/images/banner2.jpeg","path":"images/banner2.jpeg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-skapp/source/js/common/animation.js","path":"js/common/animation.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/common/pack.js","path":"js/common/pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/common/utils.js","path":"js/common/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/back-top.js","path":"js/layout/back-top.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/header.js","path":"js/layout/header.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/loading.js","path":"js/layout/loading.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/layout/post.js","path":"js/layout/post.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/libs/axios.min.js","path":"js/libs/axios.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/libs/lunr.min.js","path":"js/libs/lunr.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/page/post.js","path":"js/page/post.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/js/page/search.js","path":"js/page/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/base/index.scss","path":"scss/base/index.scss","modified":1,"renderable":1},{"_id":"source/images/1538291854892.png","path":"images/1538291854892.png","modified":1,"renderable":0},{"_id":"source/images/1538296756913.png","path":"images/1538296756913.png","modified":1,"renderable":0},{"_id":"source/images/1538297678652.png","path":"images/1538297678652.png","modified":1,"renderable":0},{"_id":"source/images/working.psd","path":"images/working.psd","modified":1,"renderable":0},{"_id":"source/images/1538297252771.png","path":"images/1538297252771.png","modified":1,"renderable":0},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/about.scss","path":"scss/views/page/about.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/archive.scss","path":"scss/views/page/archive.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/category.scss","path":"scss/views/page/category.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/error.scss","path":"scss/views/page/error.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/index.scss","path":"scss/views/page/index.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/post.scss","path":"scss/views/page/post.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/search.scss","path":"scss/views/page/search.scss","modified":1,"renderable":1},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/tag.scss","path":"scss/views/page/tag.scss","modified":1,"renderable":1},{"_id":"source/images/1538297380747.png","path":"images/1538297380747.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"e64ee9b25731ba812f0b2ad6ccd134bcf19cba89","modified":1539273156593},{"_id":"source/404.md","hash":"7316aecca69ff5a552f250b205309a996f1c9d5d","modified":1539265007037},{"_id":"themes/hexo-theme-skapp/LICENSE","hash":"348ad688e145bb442f07e6e5b762d3e8ba66190e","modified":1539263587808},{"_id":"themes/hexo-theme-skapp/.gitignore","hash":"c996c55a53a02302d5b5db8082b0a2d525cc1007","modified":1539263587808},{"_id":"themes/hexo-theme-skapp/README-cn.md","hash":"a93a3caa300c5cf5a1fb34cf513e0348ef81bdff","modified":1539263587809},{"_id":"themes/hexo-theme-skapp/README.md","hash":"37d3149ba8cb2dd2bea5e1cb6d685ce41c8246c8","modified":1539263587809},{"_id":"themes/hexo-theme-skapp/_config.yml","hash":"3804869a5c599ade3c6c3eb62d310f5d1c22f10e","modified":1539263587809},{"_id":"themes/hexo-theme-skapp/package.json","hash":"46ab781f3d3b8937b0868593293e0ab24b6ea919","modified":1539263587819},{"_id":"source/_data/contact.yml","hash":"6d1d970c672a91fea55b4272d8a606d432988599","modified":1539271703220},{"_id":"source/_files/Dubbo无法正确处理循环依赖aop代理.mdj","hash":"14949c764071609095116b0c53f4cb99a46ba1e6","modified":1538294480610},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1538319853292},{"_id":"source/_posts/Fastjson源码解析-反序列化(一)-反序列化解析介绍.md","hash":"4c81fe128639a69693b618ef594372ef158cbf61","modified":1539309995686},{"_id":"source/_posts/Fastjson源码解析-反序列化(二)-内部注册反序列化解析.md","hash":"5d62897236493c33f758ac61214558ce461125c9","modified":1539309547954},{"_id":"source/_posts/Fastjson源码解析-序列化(一)-序列化基础类型解析.md","hash":"cb60f82e2a96c0ca1d75416ec0919b4063228844","modified":1539311012775},{"_id":"source/_posts/Fastjson源码解析-序列化(三)-序列化字段属性键值对.md","hash":"3098b05af4ee361ea597b1b79f692da31b136926","modified":1539311099643},{"_id":"source/_posts/Fastjson源码解析-序列化(二)-序列化字节和字符串解析.md","hash":"454cf9e88b5b8755f16963157027674b5b1b9c51","modified":1539311076107},{"_id":"source/_posts/Fastjson源码解析-序列化(五)-json内部注册序列化解析.md","hash":"a3ef4b3e98826a7aeca9406a014c5e98b38ce21a","modified":1539310800407},{"_id":"source/_posts/Fastjson源码解析-序列化(六)-json特定序列化实现解析.md","hash":"c421b3b871a2aee51f5ac65c50d16b12e254f2b9","modified":1539310720506},{"_id":"source/_posts/Fastjson源码解析-序列化(四)-json序列化实现解析.md","hash":"46a2b94086ddb50d359fecd48672c6b115dac3a7","modified":1539310884530},{"_id":"source/_posts/Fastjson源码解析-词法和语法解析(一)-token定义解析实现解析.md","hash":"61043129819c680f47455f8351acefb9f2e9f854","modified":1539310605130},{"_id":"source/_posts/Fastjson源码解析-词法和语法解析-(三)-针对对象实现解析.md","hash":"29c87e21a3e5a1121cdb3479bc4fa0c622318bda","modified":1539310514820},{"_id":"source/_posts/Fastjson源码解析-词法和语法解析-(二)-基础类型实现解析.md","hash":"0d934a8968788aff65bb0bc93dd882976986e58d","modified":1539310499124},{"_id":"source/_posts/Spring杂谈-循环依赖导致Dubbo服务无法被正确代理.md","hash":"e6b75fa9b3fb38fc600280aa609cde6a621c5683","modified":1539276784542},{"_id":"source/_posts/源码编译openjdk8.md","hash":"24ad2379e2ff2e36c817ced985e7377520c4bb7b","modified":1539709050198},{"_id":"source/_posts/诣极的工作经历.md","hash":"23f5ca4d8579d79ece26b103cc5b5f0cab176e15","modified":1539315764545},{"_id":"source/archives/index.md","hash":"c4246ead236da65240baeb1542e753eef62c1507","modified":1537414359533},{"_id":"source/categories/index.md","hash":"e93a9b5e3070ca4a66a4bb987216cdd154f498b8","modified":1537412630362},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1539312397353},{"_id":"source/images/1537246923798.png","hash":"d1dedf72f3bac4961ca5d0aebf9ba0c3e17c7d02","modified":1537246923800},{"_id":"source/images/fastjson.jpg","hash":"a835d7955a43518e9b0629ba59146b9da52d0fd3","modified":1539310116788},{"_id":"source/images/jdk.jpg","hash":"0896c3e6327a9302879b580ca6a4c5d8ee12fe0f","modified":1539311181023},{"_id":"source/images/spring.jpg","hash":"f63fcf5b14d03485e2d5468b783d84ffa9779c35","modified":1539275903341},{"_id":"source/images/working.jpg","hash":"e278fbace01d876f07aa67930c7f4433d40f415f","modified":1539315511366},{"_id":"source/images/yiji.png","hash":"dc1ead56bc68585569b744ab025e31bc3782d3c4","modified":1539312516917},{"_id":"source/search/index.md","hash":"76de074339582d4e791a56941345500cfce87f59","modified":1539264867342},{"_id":"source/tags/index.md","hash":"c24bcb000f81fc15bb09e0736327ce6b9868002a","modified":1537412588467},{"_id":"themes/hexo-theme-skapp/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1539263587802},{"_id":"themes/hexo-theme-skapp/.git/config","hash":"02d802bf33eee6e7f1e028caccfd5f0a0b8fd995","modified":1539263587804},{"_id":"themes/hexo-theme-skapp/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1539263572660},{"_id":"themes/hexo-theme-skapp/.git/index","hash":"44ee9ccc6350f70e511747719eb9e5537b157477","modified":1539321799146},{"_id":"themes/hexo-theme-skapp/.git/packed-refs","hash":"d87a724b749494a44adc2d81c4a5db59d2823c24","modified":1539263587800},{"_id":"themes/hexo-theme-skapp/languages/en.yml","hash":"cbaf9014ca3cfaadde48e87b118a596b41897603","modified":1539263587810},{"_id":"themes/hexo-theme-skapp/languages/zh-cn.yml","hash":"4efa82ba679d63737f373500f313051b981dc32b","modified":1539264677039},{"_id":"themes/hexo-theme-skapp/layout/_layout.swig","hash":"498edbaea871d4df4f904d3de6ac6ee10b3c975e","modified":1539263587810},{"_id":"themes/hexo-theme-skapp/layout/about.swig","hash":"83626cbda47aabc3f7ee4f008bad300eb1e37aba","modified":1539263587817},{"_id":"themes/hexo-theme-skapp/layout/archive.swig","hash":"c8548b3f82cec7ef6d434b077e2605504c3c1005","modified":1539263587817},{"_id":"themes/hexo-theme-skapp/layout/error.swig","hash":"8d25b0d25ea70d86663f6f79c3506b7487bd98d5","modified":1539263587818},{"_id":"themes/hexo-theme-skapp/layout/category.swig","hash":"76011b6dfd36b0463f2fd889502d66a5ffe4dd47","modified":1539263587817},{"_id":"themes/hexo-theme-skapp/layout/index.swig","hash":"d902a5515ff3e8a7aa24a7f19b453daa30d0de99","modified":1539263587818},{"_id":"themes/hexo-theme-skapp/layout/post.swig","hash":"2a946e9a7503accf6b1621a7ff22ef1d94f953a9","modified":1539263587818},{"_id":"themes/hexo-theme-skapp/layout/search.swig","hash":"c1e34b81bacb0c9565779b51ab1fe6559c1ef566","modified":1539263587818},{"_id":"themes/hexo-theme-skapp/layout/tag.swig","hash":"5d22856055faee9fa3c2f12516855b823c5630e8","modified":1539263587818},{"_id":"themes/hexo-theme-skapp/scripts/helper.js","hash":"cf740e4f99d1bbbdc43c6e810912d7a11dd7aedf","modified":1539263587819},{"_id":"themes/hexo-theme-skapp/scripts/renderer.js","hash":"43ce72af45211296e26d977b250f4c030ac00445","modified":1539263587820},{"_id":"source/images/1538293549011.png","hash":"8605779f764df281cfe63d27c22293fec4220100","modified":1538293549014},{"_id":"themes/hexo-theme-skapp/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1539263572662},{"_id":"themes/hexo-theme-skapp/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1539263572661},{"_id":"themes/hexo-theme-skapp/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1539263572664},{"_id":"themes/hexo-theme-skapp/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1539263572664},{"_id":"themes/hexo-theme-skapp/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1539263572662},{"_id":"themes/hexo-theme-skapp/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1539263572665},{"_id":"themes/hexo-theme-skapp/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1539263572661},{"_id":"themes/hexo-theme-skapp/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1539263572663},{"_id":"themes/hexo-theme-skapp/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1539263572663},{"_id":"themes/hexo-theme-skapp/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1539263572665},{"_id":"themes/hexo-theme-skapp/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1539263572660},{"_id":"themes/hexo-theme-skapp/.git/logs/HEAD","hash":"671937769527962a0dbfc3d5a8314160a207cb6e","modified":1539263587803},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.eot","hash":"87bd2f3e4f3b26d80fe97943b8deec98168affc2","modified":1539263587820},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.svg","hash":"88c42c2bd4256f13a0f885abe01a4cc65b2c5a45","modified":1539263587822},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.ttf","hash":"cbe6cffb573ef986e91c6705c9839a9c53edb1c8","modified":1539263587822},{"_id":"themes/hexo-theme-skapp/source/fonts/iconfont.woff","hash":"37b11e65abc366b2b4a212a302b36f7152921625","modified":1539263587823},{"_id":"themes/hexo-theme-skapp/source/img/logo.svg","hash":"96888554b49b60e3c8484e544a276a79e599c106","modified":1536670607017},{"_id":"themes/hexo-theme-skapp/source/img/quotes.png","hash":"4510107c2b0ea522ac2dc2048cb7471b468af5ff","modified":1539263587823},{"_id":"themes/hexo-theme-skapp/source/js/md5.min.js","hash":"9e95b3d2fad05cd68bbe721bd9fe79e524c47e71","modified":1539263587827},{"_id":"themes/hexo-theme-skapp/source/scss/_theme.scss","hash":"b8804eb3d4b0c991b72ddcf43337e47cffd573d5","modified":1539273752522},{"_id":"source/images/1538297025076.png","hash":"7793e6bdca1ba33320d871141014b4f250e5f1be","modified":1538297025078},{"_id":"source/images/banner.jpeg","hash":"88ad5d73f418897a23bb13579b79466b0c4cce0c","modified":1539321291333},{"_id":"source/images/1538297510399.png","hash":"90aa1f1393742c89390e259722999b6fac380189","modified":1538297510401},{"_id":"source/images/1538297855578.png","hash":"9da5c05715eab77a53e5b7043955dacb173460a3","modified":1538297855580},{"_id":"themes/hexo-theme-skapp/source/scss/base/_input.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539263587828},{"_id":"source/images/1538296119277.png","hash":"a58263f2fa1d7124cfcb6fdf77135d27b81b29aa","modified":1538296119280},{"_id":"source/images/1538297199420.png","hash":"cd313b2b72f94c5e877396ef7078c8fc4facbccc","modified":1538297199422},{"_id":"source/images/banner2.jpeg","hash":"40ad070d306f096284f9fc59b8260d05acd7fcce","modified":1539311420332},{"_id":"themes/hexo-theme-skapp/.git/objects/pack/pack-2aefb345a378e87b7c72bc17311e99c6fe8e8dd2.idx","hash":"f7cb4118144dccc96166a8f2165da83b861736fd","modified":1539263587792},{"_id":"themes/hexo-theme-skapp/.git/refs/heads/master","hash":"37753c4a4a6ed20e50c1c68b19c134c0bfbb6b67","modified":1539263587803},{"_id":"themes/hexo-theme-skapp/layout/_partial/about/main.swig","hash":"6d532834ecc639ff61ecba6109921193a6ebc8c9","modified":1539263587810},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/analytics.swig","hash":"2c1f77dabe54f04c4a9a2865fac65a8f32d6aa98","modified":1539263587811},{"_id":"themes/hexo-theme-skapp/layout/_partial/archive/main.swig","hash":"c33edd2ed0e25ec4a42a8ccb3de19d7b98b40b17","modified":1539263587811},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/back-top.swig","hash":"431866aacaab8805590b0e09de1c908f67a5f54d","modified":1539263587812},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/comment.swig","hash":"29c7a31191a296e4f4c89bee873d37ba31ff3b67","modified":1539263587812},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/error-header.swig","hash":"7468ed219619f89ed1331da6b8faf4e74af9bbd7","modified":1539263587812},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/footer.swig","hash":"1ead5e54b298f826b5dbbdd330a306001b8b3393","modified":1539273310103},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/head.swig","hash":"03e43adefe260dd3a38661989264280f504beabe","modified":1539263587813},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/header.swig","hash":"eda9abd3b086f9084ae1f21a1ebe55194a2419ab","modified":1539263587813},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/loader.swig","hash":"e8b7c60f6186d6309d35e321bdbb486ef11d3e97","modified":1539263587813},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/math.swig","hash":"07d9cc16965fbaa0972ba9c349db1500dfc1fb76","modified":1539263587813},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/prefetch.swig","hash":"9a28af3878333cc843f073909c9180e1eab83ba9","modified":1539263587814},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/sidebar.swig","hash":"756ba972946317406f1b1be97196cafd5d577666","modified":1539263587814},{"_id":"themes/hexo-theme-skapp/layout/_partial/common/small-header.swig","hash":"5222d7d76ef0f89181a442b66008b8d23d5e8d74","modified":1539263587814},{"_id":"themes/hexo-theme-skapp/layout/_partial/category/main.swig","hash":"eea7cafb4a8f83d89fa10312bd65f172716b10cf","modified":1539263587811},{"_id":"themes/hexo-theme-skapp/layout/_partial/error/main.swig","hash":"07bc5bc17756e428235fba0e820b77bb9705e627","modified":1539263587815},{"_id":"themes/hexo-theme-skapp/layout/_partial/index/main.swig","hash":"eea7cafb4a8f83d89fa10312bd65f172716b10cf","modified":1539263587815},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/content.swig","hash":"c76b75355a9233ed05c8347aeacb3c09338e6cd6","modified":1539263587816},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/main.swig","hash":"97b21ffbfebe31444acb02109e19a27677b3e98a","modified":1539263587816},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/mini.swig","hash":"d9d1c45a62e7e12fd5048e2e2dbeba0cb84d0656","modified":1539263587816},{"_id":"themes/hexo-theme-skapp/layout/_partial/post/post-statistical.swig","hash":"b45afecc44ecd8578b6f7c6daba19b41b872a0f5","modified":1539263587816},{"_id":"themes/hexo-theme-skapp/layout/_partial/search/main.swig","hash":"88216dfef45a4c8b3d9697bccc30d1da3f9fbee4","modified":1539263587817},{"_id":"themes/hexo-theme-skapp/layout/_partial/tag/main.swig","hash":"eea7cafb4a8f83d89fa10312bd65f172716b10cf","modified":1539263587817},{"_id":"themes/hexo-theme-skapp/source/js/common/animation.js","hash":"4d360fdde4bf2a891e9b921dd10c34e137447e47","modified":1539263587824},{"_id":"themes/hexo-theme-skapp/source/js/common/pack.js","hash":"00b906b3d2ab92f8a169ad9e495a83733188d3f7","modified":1539263587824},{"_id":"themes/hexo-theme-skapp/source/js/common/utils.js","hash":"9c0e7a01f07a332e69fdd3ae6a7d6b14c217e4b8","modified":1539263587824},{"_id":"themes/hexo-theme-skapp/source/js/layout/back-top.js","hash":"ada2d0ac7b4d7cf8e755572ffa2505ea84063917","modified":1539263587825},{"_id":"themes/hexo-theme-skapp/source/js/layout/header.js","hash":"9e013fa56d999c669ea62d22220b624c56511b36","modified":1539263587825},{"_id":"themes/hexo-theme-skapp/source/js/layout/loading.js","hash":"653bd858627880d87a2481660ea6f7b35780aa7b","modified":1539263587825},{"_id":"themes/hexo-theme-skapp/source/js/layout/post.js","hash":"e80ab1ff01783b018fa7d2c63591603e53345e23","modified":1539263587826},{"_id":"themes/hexo-theme-skapp/source/js/libs/axios.min.js","hash":"466d49238fad59ff522440c609502e01ca000558","modified":1539263587826},{"_id":"themes/hexo-theme-skapp/source/js/libs/lunr.min.js","hash":"6af45288bd3cf5d3be1e595eb544fe84ea5900aa","modified":1539263587826},{"_id":"themes/hexo-theme-skapp/source/js/page/post.js","hash":"691de1e5863ba863b6cf015af6dd0de4ea51192c","modified":1539263587827},{"_id":"themes/hexo-theme-skapp/source/js/page/search.js","hash":"f6356a8e892cce3bd637db92592bf2ca3db4c766","modified":1539263587827},{"_id":"themes/hexo-theme-skapp/source/scss/base/_element.scss","hash":"2731e14c5447a5d0b620c85598b69dba56c05f03","modified":1539263587828},{"_id":"themes/hexo-theme-skapp/source/scss/base/_font.scss","hash":"9886f69ef10beb3c7f2c3efd652a4b6d21dc069d","modified":1539263587828},{"_id":"themes/hexo-theme-skapp/source/scss/base/_js-toggle.scss","hash":"0d1e23f1775a7696d98924606379273f79eba0d1","modified":1539263587829},{"_id":"themes/hexo-theme-skapp/source/scss/base/_mixins.scss","hash":"5da8755017aee88b229dd78255636960ce6f36fc","modified":1539263587829},{"_id":"themes/hexo-theme-skapp/source/scss/base/index.scss","hash":"c95bdb29c2b1e1a9ac67e626d1e4e2d38f509b63","modified":1539263587829},{"_id":"source/images/1538291854892.png","hash":"f0d4cfd2701f97c77b1fe755ab3f7fb165a59c15","modified":1538291854895},{"_id":"source/images/1538296756913.png","hash":"428902134790f84613139832f8211a3b3861cd8a","modified":1538296756920},{"_id":"source/images/1538297678652.png","hash":"514c3a3c0175bf3595740bf0f37492b49dad1b21","modified":1538297678653},{"_id":"source/images/working.psd","hash":"e2475e1e170b15bae05e5b16af33eb1bead67b00","modified":1539322629801},{"_id":"source/images/1538297252771.png","hash":"0965a5a0fc5606ea2985ebea405f465bd6cd3296","modified":1538297252773},{"_id":"themes/hexo-theme-skapp/.git/logs/refs/heads/master","hash":"671937769527962a0dbfc3d5a8314160a207cb6e","modified":1539263587803},{"_id":"themes/hexo-theme-skapp/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1539263587802},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/about.scss","hash":"bb45079d117def23f5f8e90c0afec36e8d157f3c","modified":1539263587835},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/archive.scss","hash":"bd5980bd667ff1a099ea3dbaa7e0a307da8eedaf","modified":1539263587835},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/category.scss","hash":"060931308b8ac3740ca3928afeb6246041cf9a84","modified":1539263587836},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/error.scss","hash":"00f58a708061bdca7be9f46ce31fb901dfabe704","modified":1539263587836},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/index.scss","hash":"8fa3cfcecc08182de1005554e7f88c57bb8ac898","modified":1539263587837},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/post.scss","hash":"ff2eb070c17b4c2029c110c53e2658e7fa1c222a","modified":1539263587837},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/search.scss","hash":"a30023f0023a4de288cf359157eca4867e8bcc5f","modified":1539263587838},{"_id":"themes/hexo-theme-skapp/source/scss/views/page/tag.scss","hash":"060931308b8ac3740ca3928afeb6246041cf9a84","modified":1539263587838},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_back-top.scss","hash":"5fa2593f9d6875c8e0780d889e6bb6b3183aa8bb","modified":1539263587830},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_container.scss","hash":"5be8d3f29aed5b308fe207e6296e22fa4f24ddfb","modified":1539263587830},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_footer.scss","hash":"6be99d8932e0e8f60e5b8b5c657abeb8876ec572","modified":1539263587831},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_header.scss","hash":"2d356bec303bab50680664b26d1b70ab04825d89","modified":1539321729982},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_index.scss","hash":"419ca53eaffc9a7e20fbce92a9c6e276008b707a","modified":1539263587831},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_loading.scss","hash":"833010d3f05fa5b8620471d8f7361db679398f55","modified":1539263587832},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_mini-post.scss","hash":"f2602bb792a65c5dca7ec40622766bacb0bb8dae","modified":1539263587832},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_paginator.scss","hash":"1d4ceeb90de6f218dcc955eee5631c0b0bf298c9","modified":1539263587833},{"_id":"themes/hexo-theme-skapp/source/scss/views/layout/_sidebar.scss","hash":"f9db4b44731ca409db3a319b22ccf39ed06c44dc","modified":1539263587834},{"_id":"source/images/1538297380747.png","hash":"5b86d182b4de0fc7faa3a46da9fcadca5c9a4ce0","modified":1538297380750},{"_id":"themes/hexo-theme-skapp/.git/logs/refs/remotes/origin/HEAD","hash":"671937769527962a0dbfc3d5a8314160a207cb6e","modified":1539263587802},{"_id":"themes/hexo-theme-skapp/.git/objects/pack/pack-2aefb345a378e87b7c72bc17311e99c6fe8e8dd2.pack","hash":"5cb2fd601243634056b4e95c3be358ed142f1794","modified":1539263587792},{"_id":"public/images/1537246923798.png","hash":"c8b4eeaefa32aa16462d8ca9f903ec43f5ed4687","modified":1539709244682},{"_id":"public/images/fastjson.jpg","hash":"790f61d2f22aa744849d13b6f80e5d8f29586329","modified":1539709244682},{"_id":"public/images/spring.jpg","hash":"3cfb26e6a67bbaa167d208626643ac45c41b9bc7","modified":1539709244682},{"_id":"public/images/yiji.png","hash":"acff0bbbd24a117cdee0c0bcb2dff6256279acc4","modified":1539709244682},{"_id":"public/images/1538293549011.png","hash":"1aa8b16b221aaf1ea963afb9418d993a8afb9f92","modified":1539709244682},{"_id":"public/fonts/iconfont.svg","hash":"3cac0ba4e321c3927d7f78b93e873c04a97f72f8","modified":1539709244682},{"_id":"public/img/logo.svg","hash":"9989f8f37ef93fcdf57892d7dceee65606a72c6c","modified":1539709244682},{"_id":"public/img/quotes.png","hash":"d971044cf4d14bc81e63c5a9f9528832fab378cf","modified":1539709244683},{"_id":"public/images/1538297025076.png","hash":"3850179d903d041a56c38f0a45de4f1bb5d4d08e","modified":1539709244683},{"_id":"public/images/1538297510399.png","hash":"11f7e99c673b9178236b06c86187d0ea7b76bbc6","modified":1539709244683},{"_id":"public/images/1538297855578.png","hash":"6b011c7f523462405fef74e4da2e2fb7c4e7449d","modified":1539709244683},{"_id":"public/images/1538296119277.png","hash":"69ddb3b7f4a5f5f4baf95c02b23a5900d7acafe1","modified":1539709244683},{"_id":"public/images/1538297199420.png","hash":"4836226d2927ca12e2f88843d904d73a6b48c736","modified":1539709244683},{"_id":"public/images/1538291854892.png","hash":"566f6729d7bc23725b0fc3846c4744fb99b67972","modified":1539709244683},{"_id":"public/images/1538296756913.png","hash":"b67fe971b2da179a02121ec1ce156b1d09dfb89f","modified":1539709244683},{"_id":"public/images/1538297678652.png","hash":"b6c6f513934785af4bdf7158e87c771d10cfbc6a","modified":1539709244683},{"_id":"public/images/1538297252771.png","hash":"7a18b7508409c1b825b0f1223827dbf67aecc8c5","modified":1539709244683},{"_id":"public/images/1538297380747.png","hash":"385da390ec1b783ccd0d16ce6a6f6e5c4cb257f4","modified":1539709244684},{"_id":"public/atom.xml","hash":"8d66cd467fa3d0275e3431b57d9f33e92a381396","modified":1539709244684},{"_id":"public/sitemap.xml","hash":"dd6357a36c78024b83efb8555d58bfd87a39fa29","modified":1539709244684},{"_id":"public/search.xml","hash":"ebce11f36f0e196fdd4508008a4b94d456b32a7c","modified":1539709244684},{"_id":"public/assets/lunr/2018.json","hash":"d50c28f03dcbacab990506b9755d655bf6c1ed69","modified":1539709244684},{"_id":"public/assets/lunr/all.json","hash":"d50c28f03dcbacab990506b9755d655bf6c1ed69","modified":1539709244685},{"_id":"public/404.html","hash":"9a1e271a76f1848f9f25788ec8cc65fa01d1164a","modified":1539709244685},{"_id":"public/archives/index.html","hash":"6141c6ed3db87c234df258307a65b3399c95b834","modified":1539709244685},{"_id":"public/categories/index.html","hash":"d63707bec3791bc5567a270e76941a7b82029d57","modified":1539709244685},{"_id":"public/search/index.html","hash":"ce2bf86648875e80ed81fea2489538dae3384438","modified":1539709244685},{"_id":"public/tags/index.html","hash":"00d4875a481b9e03803dda2e2b5e2c4aa71b6752","modified":1539709244685},{"_id":"public/2018/10/01/Spring杂谈-循环依赖导致Dubbo服务无法被正确代理/index.html","hash":"bbea9d8285aa61c8de903361ad54116230b31004","modified":1539709244685},{"_id":"public/2018/10/01/诣极的工作经历/index.html","hash":"930d4a04b2fdbbb201df6b3ae3734e58be121a98","modified":1539709244685},{"_id":"public/2018/09/30/Fastjson源码解析-反序列化(二)-内部注册反序列化解析/index.html","hash":"74902514f6cafe4b8193659718acd0c8375eadcc","modified":1539709244685},{"_id":"public/2018/09/30/Fastjson源码解析-反序列化(一)-反序列化解析介绍/index.html","hash":"204aecd2174d92a800570fd68acb8c92209ca4a0","modified":1539709244685},{"_id":"public/2018/09/30/Fastjson源码解析-词法和语法解析-(三)-针对对象实现解析/index.html","hash":"4fc38de7cd437edd06d22d60b5908c6e14d4271c","modified":1539709244686},{"_id":"public/2018/09/30/Fastjson源码解析-词法和语法解析-(二)-基础类型实现解析/index.html","hash":"ff53d90e074bcabee5d529d86986ab6c4bb405a3","modified":1539709244686},{"_id":"public/2018/09/30/Fastjson源码解析-序列化(六)-json特定序列化实现解析/index.html","hash":"e9c2a407444bf840246b076f7565b29464d7b806","modified":1539709244686},{"_id":"public/2018/09/30/Fastjson源码解析-词法和语法解析(一)-token定义解析实现解析/index.html","hash":"a2642a1d9bf23c0faa7544577b580239374f6665","modified":1539709244686},{"_id":"public/2018/09/30/Fastjson源码解析-序列化(五)-json内部注册序列化解析/index.html","hash":"0539b15f02546418a7c520f8c3fea7f3ee3406df","modified":1539709244686},{"_id":"public/2018/09/30/Fastjson源码解析-序列化(四)-json序列化实现解析/index.html","hash":"a65bac75652f3feeeb02af84f1d43606d527a6d5","modified":1539709244686},{"_id":"public/2018/09/30/Fastjson源码解析-序列化(三)-序列化字段属性键值对/index.html","hash":"2e1db012a51c20b6e4dc8ad34828c8e2051b53f7","modified":1539709244686},{"_id":"public/2018/09/30/Fastjson源码解析-序列化(二)-序列化字节和字符串解析/index.html","hash":"c03e103a2c6767d9bb6c8ed0834b0b64c33e284e","modified":1539709244686},{"_id":"public/2018/09/30/Fastjson源码解析-序列化(一)-序列化基础类型解析/index.html","hash":"dbb7ce82815f0ffc20df9e37f682aa496a98e902","modified":1539709244686},{"_id":"public/2018/09/30/源码编译openjdk8/index.html","hash":"10f2f3e4e166c665ea26f12e1716a13347ec8617","modified":1539709244687},{"_id":"public/archives/page/2/index.html","hash":"917eb89c0b1d2fed220b807c79bf2021e2f3415f","modified":1539709244687},{"_id":"public/archives/2018/index.html","hash":"b2efac66c00b2e393a19d2e7801966f1c4dfae61","modified":1539709244687},{"_id":"public/archives/2018/page/2/index.html","hash":"a1a7bc73def22e206ac73c617022f731c5544465","modified":1539709244687},{"_id":"public/archives/2018/09/index.html","hash":"f8e0ebd7aee38f2a1b67ad2c2e9025db1818b88b","modified":1539709244687},{"_id":"public/archives/2018/09/page/2/index.html","hash":"efe2686d2ab1c0b73cdaf9ba99633202da62dfc6","modified":1539709244687},{"_id":"public/archives/2018/10/index.html","hash":"6fca0c9ab949e270b2108972de147a49121558f7","modified":1539709244687},{"_id":"public/categories/Fastjson源码解析/index.html","hash":"eddf40186fbe14ed5b0f6c607344356efcdb981b","modified":1539709244687},{"_id":"public/categories/Fastjson源码解析/page/2/index.html","hash":"c784c3adfc0b824d229affc5c3b87a93d6df4b7f","modified":1539709244687},{"_id":"public/categories/Spring杂谈/index.html","hash":"67ba4afe1176828399e2b5196726ccc68ed01018","modified":1539709244687},{"_id":"public/categories/OpenJDK/index.html","hash":"0c5061041747c179069a34b461954929d24a9dd5","modified":1539709244687},{"_id":"public/categories/工作经历/index.html","hash":"9e6a5404a3870fd89c70e72e512629cd5b280d3d","modified":1539709244687},{"_id":"public/index.html","hash":"7b5ef11638e2aaffecd860623bd4cfed24e75cb3","modified":1539709244688},{"_id":"public/page/2/index.html","hash":"a171a4d6e44f639da66b8b375b5ed6c452471c59","modified":1539709244688},{"_id":"public/tags/Fastjson源码解析/index.html","hash":"d51b951df01ac73389c06639b6565bbf84991ba3","modified":1539709244688},{"_id":"public/tags/Fastjson源码解析/page/2/index.html","hash":"27e520b33f1e121bbffc8f741950321bf9cb3208","modified":1539709244688},{"_id":"public/tags/Spring杂谈/index.html","hash":"d130a1f7cd84dc5e691bccf398f47751a1bb9c9d","modified":1539709244688},{"_id":"public/tags/Dubbo框架问题/index.html","hash":"3d6c0ced0fbc3792384b636f187fe71db6d36a8e","modified":1539709244688},{"_id":"public/tags/OpenJDK/index.html","hash":"456c10d01d6ad9e9fff0610253af471768398c1a","modified":1539709244688},{"_id":"public/tags/工作经历/index.html","hash":"13b5ffee0492cc85e981dfb3cb2257a1e5d06fc3","modified":1539709244688},{"_id":"public/js/common.js","hash":"a83403f50595296f05ebef8fc950c3cac2fb14ce","modified":1539709244688},{"_id":"public/js/search.js","hash":"1d56c7e32ef49409c4ffb23eb4a55346befd8517","modified":1539709244688},{"_id":"public/images/jdk.jpg","hash":"0896c3e6327a9302879b580ca6a4c5d8ee12fe0f","modified":1539709244694},{"_id":"public/images/working.jpg","hash":"e278fbace01d876f07aa67930c7f4433d40f415f","modified":1539709244694},{"_id":"public/fonts/iconfont.eot","hash":"87bd2f3e4f3b26d80fe97943b8deec98168affc2","modified":1539709244694},{"_id":"public/fonts/iconfont.ttf","hash":"cbe6cffb573ef986e91c6705c9839a9c53edb1c8","modified":1539709244694},{"_id":"public/fonts/iconfont.woff","hash":"37b11e65abc366b2b4a212a302b36f7152921625","modified":1539709244694},{"_id":"public/scss/base/index.css","hash":"9ad53651b0d02630eba9b99b299385eb9adf7503","modified":1539709245007},{"_id":"public/scss/views/page/archive.css","hash":"8358dd4489ea3cb929ae4f9e1aa6b7adcfc58530","modified":1539709245007},{"_id":"public/scss/views/page/error.css","hash":"6523d58ca20d056f0df27459afbd501619c05846","modified":1539709245007},{"_id":"public/scss/views/page/about.css","hash":"80919908a0947b62e4f8fc74bfdaac298bb58112","modified":1539709245007},{"_id":"public/scss/views/page/index.css","hash":"bf31d22b3a96f1d1019139a72158dfa106f8d9b0","modified":1539709245007},{"_id":"public/scss/views/page/post.css","hash":"718d8232590d2e7c94686f0d73eade9f33754b6e","modified":1539709245007},{"_id":"public/scss/views/page/category.css","hash":"bf31d22b3a96f1d1019139a72158dfa106f8d9b0","modified":1539709245007},{"_id":"public/scss/views/page/search.css","hash":"611728aa7edee296e2b433ea8153fc4f21ce9438","modified":1539709245007},{"_id":"public/scss/views/page/tag.css","hash":"bf31d22b3a96f1d1019139a72158dfa106f8d9b0","modified":1539709245007},{"_id":"public/images/banner.jpeg","hash":"88ad5d73f418897a23bb13579b79466b0c4cce0c","modified":1539709245007},{"_id":"public/images/banner2.jpeg","hash":"40ad070d306f096284f9fc59b8260d05acd7fcce","modified":1539709245110},{"_id":"public/js/md5.min.js","hash":"794c3fc5f481907415dc196891c1814c36170886","modified":1539709245114},{"_id":"public/js/common/animation.js","hash":"2d46a1275b21e9a39595aa75af5b61e341da612e","modified":1539709245114},{"_id":"public/js/layout/back-top.js","hash":"9228f4a4dd49486090b9c5943b1f28a75aa74c68","modified":1539709245114},{"_id":"public/js/common/utils.js","hash":"39162db90c091127d796a3b7df7c7754ec49233b","modified":1539709245114},{"_id":"public/js/common/pack.js","hash":"7e59daf725f6b324d45fcdc04bb32ae73e553a65","modified":1539709245114},{"_id":"public/js/layout/header.js","hash":"15c354ac06c2886f0ef80c1fa0a037d7086e8278","modified":1539709245115},{"_id":"public/js/layout/loading.js","hash":"4678f71ab17f627c14df93d64876ec6256a62890","modified":1539709245115},{"_id":"public/js/layout/post.js","hash":"d283b30fec045c8f597122ef1188f192061663d6","modified":1539709245115},{"_id":"public/js/page/post.js","hash":"d7f9aab4ace1a8090872bf15c71ae7e37218d360","modified":1539709245115},{"_id":"public/js/libs/axios.min.js","hash":"dc10b0025b8b5abcdd67531c6beb9f51d049eef4","modified":1539709245115},{"_id":"public/js/libs/lunr.min.js","hash":"0e231d538c0127b6d78a48b3694ffa23be4f104f","modified":1539709245115},{"_id":"public/js/page/search.js","hash":"408f84470f774c90db99408db22571b53474fad6","modified":1539709245115},{"_id":"public/images/working.psd","hash":"e2475e1e170b15bae05e5b16af33eb1bead67b00","modified":1539709245116}],"Category":[{"name":"Fastjson源码解析","_id":"cjnbz4esw0005xat8kd08eee1"},{"name":"Spring杂谈","_id":"cjnbz4eth000uxat8v6e9euf3"},{"name":"OpenJDK","_id":"cjnbz4etk0014xat8g1hiiqqg"},{"name":"工作经历","_id":"cjnbz4etn001cxat80jzdind5"}],"Data":[{"_id":"contact","data":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}],"Page":[{"title":"404 Page Not Found","date":"2018-10-11T13:36:59.000Z","type":"error","layout":"error","_content":"","source":"404.md","raw":"---\ntitle: 404 Page Not Found\ndate: 2018-10-11 21:36:59\ntype: error\nlayout: error\n---\n","updated":"2018-10-11T13:36:47.037Z","path":"404.html","comments":1,"_id":"cjnbz4ert0000xat8u71xft77","content":"","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":""},{"title":"所有归档","type":"archives","date":"2018-09-20T03:13:02.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: 所有归档\ntype: \"archives\"\ndate: 2018-09-20 11:13:02\n---\n","updated":"2018-09-20T03:32:39.533Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cjnbz4ess0002xat8q11444hn","content":"","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":""},{"title":"所有分类","type":"categories","date":"2018-09-20T03:03:25.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 所有分类\ntype: \"categories\"\ndate: 2018-09-20 11:03:25\n---\n","updated":"2018-09-20T03:03:50.362Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjnbz4esu0004xat80zjl6ajk","content":"","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":""},{"title":"search","date":"2018-10-11T13:33:39.000Z","type":"search","layout":"search","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2018-10-11 21:33:39\ntype: search\nlayout: search\n---\n","updated":"2018-10-11T13:34:27.342Z","path":"search/index.html","comments":1,"_id":"cjnbz4esz0008xat8a36w86vn","content":"","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":""},{"title":"所有标签","type":"tags","date":"2018-09-20T03:01:54.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 所有标签\ntype: \"tags\"\ndate: 2018-09-20 11:01:54\n---\n","updated":"2018-09-20T03:03:08.467Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjnbz4et0000axat84boxdce2","content":"","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":""}],"Post":[{"title":"反序列化解析介绍（十）","subtitle":"fastjson核心功能包括序列化和反序列化，反序列化的含义是将跨语言的json字符串转换成java对象。","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:11:14.000Z","_content":"\n## 概要\n\nfastjson核心功能包括序列化和反序列化，反序列化的含义是将跨语言的json字符串转换成java对象。\b遇到\b到反序列化章节，这里\b假定你\b已经阅读并理解了词法分析章节的内容。\n\n\b反序列化的章节\b比序列化复杂一些，\b我认为通过调试小单元代码片段的方式有助于理解，我在适当的地方会给出单元测试入口，集中精力理解具体类型的实现。\n\n现在，我们正式开始理解反序列化实现吧。\n\n```java\n    public static <T> T parseObject(String text, Class<T> clazz) {\n        /** 根据指定text，返回期望的java对象类型class */\n        return parseObject(text, clazz, new Feature[0]);\n    }\n```\n\n这个反序列化接口可以处理对象包含任意字段类型，但是自身不能是泛型类型，原因是java的运行时类型擦除。`fastjson`给出了替代方法解决：\n\n```java\n   String json = \"[{},...]\";\n   Type listType = new TypeReference<List<Model>>() {}.getType();\n   List<Model> modelList = JSON.parseObject(json, listType);\n```\n\n我们把关注点收回来，继续分析内部调用`parseObject` :\n\n```java\n    public static <T> T parseObject(String json, Class<T> clazz, Feature... features) {\n        return (T) parseObject(json, (Type) clazz, ParserConfig.global, null, DEFAULT_PARSER_FEATURE, features);\n    }\n\n        public static <T> T parseObject(String input, Type clazz, ParserConfig config, ParseProcess processor,\n                                          int featureValues, Feature... features) {\n        if (input == null) {\n            return null;\n        }\n\n        /** 配置反序列化时启用的特性，比如是否允许json字符串字段不包含双引号 */\n        if (features != null) {\n            for (Feature feature : features) {\n                featureValues |= feature.mask;\n            }\n        }\n\n        /**\n         *  初始化DefaultJSONParser，反序列化类型由它\n         *  委托config查找具体序列化处理器处理\n         */\n        DefaultJSONParser parser = new DefaultJSONParser(input, config, featureValues);\n\n        /** 添加拦截器 */\n        if (processor != null) {\n            if (processor instanceof ExtraTypeProvider) {\n                parser.getExtraTypeProviders().add((ExtraTypeProvider) processor);\n            }\n\n            if (processor instanceof ExtraProcessor) {\n                parser.getExtraProcessors().add((ExtraProcessor) processor);\n            }\n\n            if (processor instanceof FieldTypeResolver) {\n                parser.setFieldTypeResolver((FieldTypeResolver) processor);\n            }\n        }\n\n        /** 使用反序列化实例转换对象，查找具体序列化实例委托给config查找 */\n        T value = (T) parser.parseObject(clazz, null);\n\n        /** 处理json内部引用协议格式对象 */\n        parser.handleResovleTask(value);\n\n        parser.close();\n\n        return (T) value;\n    }\n```\n\n最终反序列化\b接口定义了执行的大框架：\n\n1. 创建解析配置`ParserConfig`对象，包括初始化内部反序列化实例和特性配置等。\n2. 添加反序列化拦截器\n3. 根据具体类型查找反序列化实例，\b执行\b反序列化转换\n4. 解析对象内部引用\n\n我们\b继续查看`parser.parseObject(clazz, null)`逻辑：\n\n```java\n    public <T> T parseObject(Type type, Object fieldName) {\n        /** 获取json串第一个有效token */\n        int token = lexer.token();\n        if (token == JSONToken.NULL) {\n            /** 如果返回时null，自动预读下一个token */\n            lexer.nextToken();\n            return null;\n        }\n\n        /** 判定token属于字符串 */\n        if (token == JSONToken.LITERAL_STRING) {\n            /** 获取byte字节数据，分为十六进制和base64编码 */\n            if (type == byte[].class) {\n                byte[] bytes = lexer.bytesValue();\n                lexer.nextToken();\n                return (T) bytes;\n            }\n\n            /** 获取字符数组, 特殊处理String内存占用 */\n            if (type == char[].class) {\n                String strVal = lexer.stringVal();\n                lexer.nextToken();\n                return (T) strVal.toCharArray();\n            }\n        }\n\n        /** 委托config进行特定类型查找反序列化实例 */\n        ObjectDeserializer derializer = config.getDeserializer(type);\n\n        try {\n            /** 执行反序列化 */\n            return (T) derializer.deserialze(this, type, fieldName);\n        } catch (JSONException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new JSONException(e.getMessage(), e);\n        }\n    }\n```\n\n反序列化核心逻辑还是在委托配置查找反序列化实例，我们具体看看是如何查找反序列化实例的， 进入`ParserConfig#getDeserializer(java.lang.reflect.Type)`自己查看逻辑：\n\n```java\n    public ObjectDeserializer getDeserializer(Type type) {\n        /** 首先从内部已经注册查找特定class的反序列化实例 */\n        ObjectDeserializer derializer = this.deserializers.get(type);\n        if (derializer != null) {\n            return derializer;\n        }\n\n        if (type instanceof Class<?>) {\n            /** 引用类型，根据特定类型再次匹配 */\n            return getDeserializer((Class<?>) type, type);\n        }\n\n        if (type instanceof ParameterizedType) {\n            /** 获取泛型类型原始类型 */\n            Type rawType = ((ParameterizedType) type).getRawType();\n            /** 泛型原始类型是引用类型，根据特定类型再次匹配 */\n            if (rawType instanceof Class<?>) {\n                return getDeserializer((Class<?>) rawType, type);\n            } else {\n                /** 递归调用反序列化查找 */\n                return getDeserializer(rawType);\n            }\n        }\n\n        if (type instanceof WildcardType) {\n            /** 类型是通配符或者限定类型 */\n            WildcardType wildcardType = (WildcardType) type;\n            Type[] upperBounds = wildcardType.getUpperBounds();\n            if (upperBounds.length == 1) {\n                Type upperBoundType = upperBounds[0];\n                /** 获取泛型上界(? extends T)，根据特定类型再次匹配 */\n                return getDeserializer(upperBoundType);\n            }\n        }\n\n        /** 如果无法匹配到，使用默认JavaObjectDeserializer反序列化 */\n        return JavaObjectDeserializer.instance;\n    }\n```\n\b\n反序列化匹配`getDeserializer(Type)`主要\b特定处理了泛型类型，取出泛型类型真实类型还是委托内部`ParserConfig#getDeserializer(java.lang.Class<?>, java.lang.reflect.Type)`进行精确类型查找：\n\n```java\n    public ObjectDeserializer getDeserializer(Class<?> clazz, Type type) {\n        /** 首先从内部已经注册查找特定type的反序列化实例 */\n        ObjectDeserializer derializer = deserializers.get(type);\n        if (derializer != null) {\n            return derializer;\n        }\n\n        if (type == null) {\n            type = clazz;\n        }\n\n        /** 再次从内部已经注册查找特定class的反序列化实例 */\n        derializer = deserializers.get(type);\n        if (derializer != null) {\n            return derializer;\n        }\n\n        {\n            JSONType annotation = TypeUtils.getAnnotation(clazz,JSONType.class);\n            if (annotation != null) {\n                Class<?> mappingTo = annotation.mappingTo();\n                /** 根据类型注解指定的反序列化类型 */\n                if (mappingTo != Void.class) {\n                    return getDeserializer(mappingTo, mappingTo);\n                }\n            }\n        }\n\n        if (type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType) {\n            /** 根据泛型真实类型查找反序列化实例 */\n            derializer = deserializers.get(clazz);\n        }\n\n        if (derializer != null) {\n            return derializer;\n        }\n\n        /** 获取class名称，进行类型匹配(可以支持高版本jdk和三方库) */\n        String className = clazz.getName();\n        className = className.replace('$', '.');\n\n        if (className.startsWith(\"java.awt.\")\n            && AwtCodec.support(clazz)) {\n            /**\n             *  如果class的name是\"java.awt.\"开头 并且\n             *  继承 Point、Rectangle、Font或者Color 其中之一\n             */\n            if (!awtError) {\n                String[] names = new String[] {\n                        \"java.awt.Point\",\n                        \"java.awt.Font\",\n                        \"java.awt.Rectangle\",\n                        \"java.awt.Color\"\n                };\n\n                try {\n                    for (String name : names) {\n                        if (name.equals(className)) {\n                            /** 如果系统支持4中类型， 使用AwtCodec 反序列化 */\n                            deserializers.put(Class.forName(name), derializer = AwtCodec.instance);\n                            return derializer;\n                        }\n                    }\n                } catch (Throwable e) {\n                    // skip\n                    awtError = true;\n                }\n\n                derializer = AwtCodec.instance;\n            }\n        }\n\n        if (!jdk8Error) {\n            try {\n                if (className.startsWith(\"java.time.\")) {\n                    String[] names = new String[] {\n                            \"java.time.LocalDateTime\",\n                            \"java.time.LocalDate\",\n                            \"java.time.LocalTime\",\n                            \"java.time.ZonedDateTime\",\n                            \"java.time.OffsetDateTime\",\n                            \"java.time.OffsetTime\",\n                            \"java.time.ZoneOffset\",\n                            \"java.time.ZoneRegion\",\n                            \"java.time.ZoneId\",\n                            \"java.time.Period\",\n                            \"java.time.Duration\",\n                            \"java.time.Instant\"\n                    };\n\n                    for (String name : names) {\n                        if (name.equals(className)) {\n                            /** 如果系统支持JDK8中日期类型， 使用Jdk8DateCodec 反序列化 */\n                            deserializers.put(Class.forName(name), derializer = Jdk8DateCodec.instance);\n                            return derializer;\n                        }\n                    }\n                } else if (className.startsWith(\"java.util.Optional\")) {\n                    String[] names = new String[] {\n                            \"java.util.Optional\",\n                            \"java.util.OptionalDouble\",\n                            \"java.util.OptionalInt\",\n                            \"java.util.OptionalLong\"\n                    };\n                    for (String name : names) {\n                        if (name.equals(className)) {\n                            /** 如果系统支持JDK8中可选类型， 使用OptionalCodec 反序列化 */\n                            deserializers.put(Class.forName(name), derializer = OptionalCodec.instance);\n                            return derializer;\n                        }\n                    }\n                }\n            } catch (Throwable e) {\n                // skip\n                jdk8Error = true;\n            }\n        }\n\n        if (className.equals(\"java.nio.file.Path\")) {\n            deserializers.put(clazz, derializer = MiscCodec.instance);\n        }\n\n        if (clazz == Map.Entry.class) {\n            deserializers.put(clazz, derializer = MiscCodec.instance);\n        }\n\n        final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        try {\n            /** 使用当前线程类加载器 查找 META-INF/services/AutowiredObjectDeserializer.class实现类 */\n            for (AutowiredObjectDeserializer autowired : ServiceLoader.load(AutowiredObjectDeserializer.class,\n                                                                            classLoader)) {\n                for (Type forType : autowired.getAutowiredFor()) {\n                    deserializers.put(forType, autowired);\n                }\n            }\n        } catch (Exception ex) {\n            // skip\n        }\n\n        if (derializer == null) {\n            derializer = deserializers.get(type);\n        }\n\n        if (derializer != null) {\n            return derializer;\n        }\n\n        if (clazz.isEnum()) {\n            Class<?> deserClass = null;\n            JSONType jsonType = clazz.getAnnotation(JSONType.class);\n            if (jsonType != null) {\n                deserClass = jsonType.deserializer();\n                try {\n                    /** 如果是枚举类型并使用了注解，使用注解指定的反序列化 */\n                    derializer = (ObjectDeserializer) deserClass.newInstance();\n                    deserializers.put(clazz, derializer);\n                    return derializer;\n                } catch (Throwable error) {\n                    // skip\n                }\n            }\n            /** 如果是枚举类型，使用EnumSerializer反序列化 */\n            derializer = new EnumDeserializer(clazz);\n        } else if (clazz.isArray()) {\n            /** 如果是数组类型，使用数组对象反序列化实例 */\n            derializer = ObjectArrayCodec.instance;\n        } else if (clazz == Set.class || clazz == HashSet.class || clazz == Collection.class || clazz == List.class\n                   || clazz == ArrayList.class) {\n            /** 如果class实现集合接口，使用CollectionCodec反序列化 */\n            derializer = CollectionCodec.instance;\n        } else if (Collection.class.isAssignableFrom(clazz)) {\n            /** 如果class实现类Collection接口，使用CollectionCodec反序列化 */\n            derializer = CollectionCodec.instance;\n        } else if (Map.class.isAssignableFrom(clazz)) {\n            /** 如果class实现Map接口，使用MapDeserializer反序列化 */\n            derializer = MapDeserializer.instance;\n        } else if (Throwable.class.isAssignableFrom(clazz)) {\n            /** 如果class继承Throwable类，使用ThrowableDeserializer反序列化 */\n            derializer = new ThrowableDeserializer(this, clazz);\n        } else if (PropertyProcessable.class.isAssignableFrom(clazz)) {\n            derializer = new PropertyProcessableDeserializer((Class<PropertyProcessable>)clazz);\n        } else {\n            /** 默认使用JavaBeanDeserializer反序列化(没有开启asm情况下) */\n            derializer = createJavaBeanDeserializer(clazz, type);\n        }\n\n        /** 加入cache，避免同类型反复创建 */\n        putDeserializer(type, derializer);\n\n        return derializer;\n    }\n```\n\b\n其实查找反序列化和之前提到了序列化类似，根据特定类型匹配接口或者继承实现类查找的，这里指的关注一下创建通用反序列化实例 `createJavaBeanDeserializer(clazz, type)` ：\n\n```java\n    public ObjectDeserializer createJavaBeanDeserializer(Class<?> clazz, Type type) {\n        boolean asmEnable = this.asmEnable & !this.fieldBased;\n\n        /**\n         *  ... 省略判定是否开启asm逻辑\n         */\n\n        /** 创建通用Java对象反序列化实例JavaBeanDeserializer */\n        if (!asmEnable) {\n            return new JavaBeanDeserializer(this, clazz, type);\n        }\n\n        /**\n         *  ... 省略创建基于asm的反序列化对象\n         */\n    }\n```\n\n对于自定义类反序列化，如果没有开启`asm`的情况下，会使用`JavaBeanDeserializer`进行反序列化\b转换，这里有意屏蔽基于`asm`直接操纵字节码实现，后面会单独列一个章节对该主题深入讲解。\n\n接下来会进入反序列化实现\b细节深入理解。\n","source":"_posts/Fastjson源码解析-反序列化(一)-反序列化解析介绍.md","raw":"---\ntitle: 反序列化解析介绍（十）\nsubtitle: fastjson核心功能包括序列化和反序列化，反序列化的含义是将跨语言的json字符串转换成java对象。\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n  - Fastjson源码解析\ncategories:\n  - Fastjson源码解析\ndate: 2018-09-30 23:11:14\n---\n\n## 概要\n\nfastjson核心功能包括序列化和反序列化，反序列化的含义是将跨语言的json字符串转换成java对象。\b遇到\b到反序列化章节，这里\b假定你\b已经阅读并理解了词法分析章节的内容。\n\n\b反序列化的章节\b比序列化复杂一些，\b我认为通过调试小单元代码片段的方式有助于理解，我在适当的地方会给出单元测试入口，集中精力理解具体类型的实现。\n\n现在，我们正式开始理解反序列化实现吧。\n\n```java\n    public static <T> T parseObject(String text, Class<T> clazz) {\n        /** 根据指定text，返回期望的java对象类型class */\n        return parseObject(text, clazz, new Feature[0]);\n    }\n```\n\n这个反序列化接口可以处理对象包含任意字段类型，但是自身不能是泛型类型，原因是java的运行时类型擦除。`fastjson`给出了替代方法解决：\n\n```java\n   String json = \"[{},...]\";\n   Type listType = new TypeReference<List<Model>>() {}.getType();\n   List<Model> modelList = JSON.parseObject(json, listType);\n```\n\n我们把关注点收回来，继续分析内部调用`parseObject` :\n\n```java\n    public static <T> T parseObject(String json, Class<T> clazz, Feature... features) {\n        return (T) parseObject(json, (Type) clazz, ParserConfig.global, null, DEFAULT_PARSER_FEATURE, features);\n    }\n\n        public static <T> T parseObject(String input, Type clazz, ParserConfig config, ParseProcess processor,\n                                          int featureValues, Feature... features) {\n        if (input == null) {\n            return null;\n        }\n\n        /** 配置反序列化时启用的特性，比如是否允许json字符串字段不包含双引号 */\n        if (features != null) {\n            for (Feature feature : features) {\n                featureValues |= feature.mask;\n            }\n        }\n\n        /**\n         *  初始化DefaultJSONParser，反序列化类型由它\n         *  委托config查找具体序列化处理器处理\n         */\n        DefaultJSONParser parser = new DefaultJSONParser(input, config, featureValues);\n\n        /** 添加拦截器 */\n        if (processor != null) {\n            if (processor instanceof ExtraTypeProvider) {\n                parser.getExtraTypeProviders().add((ExtraTypeProvider) processor);\n            }\n\n            if (processor instanceof ExtraProcessor) {\n                parser.getExtraProcessors().add((ExtraProcessor) processor);\n            }\n\n            if (processor instanceof FieldTypeResolver) {\n                parser.setFieldTypeResolver((FieldTypeResolver) processor);\n            }\n        }\n\n        /** 使用反序列化实例转换对象，查找具体序列化实例委托给config查找 */\n        T value = (T) parser.parseObject(clazz, null);\n\n        /** 处理json内部引用协议格式对象 */\n        parser.handleResovleTask(value);\n\n        parser.close();\n\n        return (T) value;\n    }\n```\n\n最终反序列化\b接口定义了执行的大框架：\n\n1. 创建解析配置`ParserConfig`对象，包括初始化内部反序列化实例和特性配置等。\n2. 添加反序列化拦截器\n3. 根据具体类型查找反序列化实例，\b执行\b反序列化转换\n4. 解析对象内部引用\n\n我们\b继续查看`parser.parseObject(clazz, null)`逻辑：\n\n```java\n    public <T> T parseObject(Type type, Object fieldName) {\n        /** 获取json串第一个有效token */\n        int token = lexer.token();\n        if (token == JSONToken.NULL) {\n            /** 如果返回时null，自动预读下一个token */\n            lexer.nextToken();\n            return null;\n        }\n\n        /** 判定token属于字符串 */\n        if (token == JSONToken.LITERAL_STRING) {\n            /** 获取byte字节数据，分为十六进制和base64编码 */\n            if (type == byte[].class) {\n                byte[] bytes = lexer.bytesValue();\n                lexer.nextToken();\n                return (T) bytes;\n            }\n\n            /** 获取字符数组, 特殊处理String内存占用 */\n            if (type == char[].class) {\n                String strVal = lexer.stringVal();\n                lexer.nextToken();\n                return (T) strVal.toCharArray();\n            }\n        }\n\n        /** 委托config进行特定类型查找反序列化实例 */\n        ObjectDeserializer derializer = config.getDeserializer(type);\n\n        try {\n            /** 执行反序列化 */\n            return (T) derializer.deserialze(this, type, fieldName);\n        } catch (JSONException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new JSONException(e.getMessage(), e);\n        }\n    }\n```\n\n反序列化核心逻辑还是在委托配置查找反序列化实例，我们具体看看是如何查找反序列化实例的， 进入`ParserConfig#getDeserializer(java.lang.reflect.Type)`自己查看逻辑：\n\n```java\n    public ObjectDeserializer getDeserializer(Type type) {\n        /** 首先从内部已经注册查找特定class的反序列化实例 */\n        ObjectDeserializer derializer = this.deserializers.get(type);\n        if (derializer != null) {\n            return derializer;\n        }\n\n        if (type instanceof Class<?>) {\n            /** 引用类型，根据特定类型再次匹配 */\n            return getDeserializer((Class<?>) type, type);\n        }\n\n        if (type instanceof ParameterizedType) {\n            /** 获取泛型类型原始类型 */\n            Type rawType = ((ParameterizedType) type).getRawType();\n            /** 泛型原始类型是引用类型，根据特定类型再次匹配 */\n            if (rawType instanceof Class<?>) {\n                return getDeserializer((Class<?>) rawType, type);\n            } else {\n                /** 递归调用反序列化查找 */\n                return getDeserializer(rawType);\n            }\n        }\n\n        if (type instanceof WildcardType) {\n            /** 类型是通配符或者限定类型 */\n            WildcardType wildcardType = (WildcardType) type;\n            Type[] upperBounds = wildcardType.getUpperBounds();\n            if (upperBounds.length == 1) {\n                Type upperBoundType = upperBounds[0];\n                /** 获取泛型上界(? extends T)，根据特定类型再次匹配 */\n                return getDeserializer(upperBoundType);\n            }\n        }\n\n        /** 如果无法匹配到，使用默认JavaObjectDeserializer反序列化 */\n        return JavaObjectDeserializer.instance;\n    }\n```\n\b\n反序列化匹配`getDeserializer(Type)`主要\b特定处理了泛型类型，取出泛型类型真实类型还是委托内部`ParserConfig#getDeserializer(java.lang.Class<?>, java.lang.reflect.Type)`进行精确类型查找：\n\n```java\n    public ObjectDeserializer getDeserializer(Class<?> clazz, Type type) {\n        /** 首先从内部已经注册查找特定type的反序列化实例 */\n        ObjectDeserializer derializer = deserializers.get(type);\n        if (derializer != null) {\n            return derializer;\n        }\n\n        if (type == null) {\n            type = clazz;\n        }\n\n        /** 再次从内部已经注册查找特定class的反序列化实例 */\n        derializer = deserializers.get(type);\n        if (derializer != null) {\n            return derializer;\n        }\n\n        {\n            JSONType annotation = TypeUtils.getAnnotation(clazz,JSONType.class);\n            if (annotation != null) {\n                Class<?> mappingTo = annotation.mappingTo();\n                /** 根据类型注解指定的反序列化类型 */\n                if (mappingTo != Void.class) {\n                    return getDeserializer(mappingTo, mappingTo);\n                }\n            }\n        }\n\n        if (type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType) {\n            /** 根据泛型真实类型查找反序列化实例 */\n            derializer = deserializers.get(clazz);\n        }\n\n        if (derializer != null) {\n            return derializer;\n        }\n\n        /** 获取class名称，进行类型匹配(可以支持高版本jdk和三方库) */\n        String className = clazz.getName();\n        className = className.replace('$', '.');\n\n        if (className.startsWith(\"java.awt.\")\n            && AwtCodec.support(clazz)) {\n            /**\n             *  如果class的name是\"java.awt.\"开头 并且\n             *  继承 Point、Rectangle、Font或者Color 其中之一\n             */\n            if (!awtError) {\n                String[] names = new String[] {\n                        \"java.awt.Point\",\n                        \"java.awt.Font\",\n                        \"java.awt.Rectangle\",\n                        \"java.awt.Color\"\n                };\n\n                try {\n                    for (String name : names) {\n                        if (name.equals(className)) {\n                            /** 如果系统支持4中类型， 使用AwtCodec 反序列化 */\n                            deserializers.put(Class.forName(name), derializer = AwtCodec.instance);\n                            return derializer;\n                        }\n                    }\n                } catch (Throwable e) {\n                    // skip\n                    awtError = true;\n                }\n\n                derializer = AwtCodec.instance;\n            }\n        }\n\n        if (!jdk8Error) {\n            try {\n                if (className.startsWith(\"java.time.\")) {\n                    String[] names = new String[] {\n                            \"java.time.LocalDateTime\",\n                            \"java.time.LocalDate\",\n                            \"java.time.LocalTime\",\n                            \"java.time.ZonedDateTime\",\n                            \"java.time.OffsetDateTime\",\n                            \"java.time.OffsetTime\",\n                            \"java.time.ZoneOffset\",\n                            \"java.time.ZoneRegion\",\n                            \"java.time.ZoneId\",\n                            \"java.time.Period\",\n                            \"java.time.Duration\",\n                            \"java.time.Instant\"\n                    };\n\n                    for (String name : names) {\n                        if (name.equals(className)) {\n                            /** 如果系统支持JDK8中日期类型， 使用Jdk8DateCodec 反序列化 */\n                            deserializers.put(Class.forName(name), derializer = Jdk8DateCodec.instance);\n                            return derializer;\n                        }\n                    }\n                } else if (className.startsWith(\"java.util.Optional\")) {\n                    String[] names = new String[] {\n                            \"java.util.Optional\",\n                            \"java.util.OptionalDouble\",\n                            \"java.util.OptionalInt\",\n                            \"java.util.OptionalLong\"\n                    };\n                    for (String name : names) {\n                        if (name.equals(className)) {\n                            /** 如果系统支持JDK8中可选类型， 使用OptionalCodec 反序列化 */\n                            deserializers.put(Class.forName(name), derializer = OptionalCodec.instance);\n                            return derializer;\n                        }\n                    }\n                }\n            } catch (Throwable e) {\n                // skip\n                jdk8Error = true;\n            }\n        }\n\n        if (className.equals(\"java.nio.file.Path\")) {\n            deserializers.put(clazz, derializer = MiscCodec.instance);\n        }\n\n        if (clazz == Map.Entry.class) {\n            deserializers.put(clazz, derializer = MiscCodec.instance);\n        }\n\n        final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        try {\n            /** 使用当前线程类加载器 查找 META-INF/services/AutowiredObjectDeserializer.class实现类 */\n            for (AutowiredObjectDeserializer autowired : ServiceLoader.load(AutowiredObjectDeserializer.class,\n                                                                            classLoader)) {\n                for (Type forType : autowired.getAutowiredFor()) {\n                    deserializers.put(forType, autowired);\n                }\n            }\n        } catch (Exception ex) {\n            // skip\n        }\n\n        if (derializer == null) {\n            derializer = deserializers.get(type);\n        }\n\n        if (derializer != null) {\n            return derializer;\n        }\n\n        if (clazz.isEnum()) {\n            Class<?> deserClass = null;\n            JSONType jsonType = clazz.getAnnotation(JSONType.class);\n            if (jsonType != null) {\n                deserClass = jsonType.deserializer();\n                try {\n                    /** 如果是枚举类型并使用了注解，使用注解指定的反序列化 */\n                    derializer = (ObjectDeserializer) deserClass.newInstance();\n                    deserializers.put(clazz, derializer);\n                    return derializer;\n                } catch (Throwable error) {\n                    // skip\n                }\n            }\n            /** 如果是枚举类型，使用EnumSerializer反序列化 */\n            derializer = new EnumDeserializer(clazz);\n        } else if (clazz.isArray()) {\n            /** 如果是数组类型，使用数组对象反序列化实例 */\n            derializer = ObjectArrayCodec.instance;\n        } else if (clazz == Set.class || clazz == HashSet.class || clazz == Collection.class || clazz == List.class\n                   || clazz == ArrayList.class) {\n            /** 如果class实现集合接口，使用CollectionCodec反序列化 */\n            derializer = CollectionCodec.instance;\n        } else if (Collection.class.isAssignableFrom(clazz)) {\n            /** 如果class实现类Collection接口，使用CollectionCodec反序列化 */\n            derializer = CollectionCodec.instance;\n        } else if (Map.class.isAssignableFrom(clazz)) {\n            /** 如果class实现Map接口，使用MapDeserializer反序列化 */\n            derializer = MapDeserializer.instance;\n        } else if (Throwable.class.isAssignableFrom(clazz)) {\n            /** 如果class继承Throwable类，使用ThrowableDeserializer反序列化 */\n            derializer = new ThrowableDeserializer(this, clazz);\n        } else if (PropertyProcessable.class.isAssignableFrom(clazz)) {\n            derializer = new PropertyProcessableDeserializer((Class<PropertyProcessable>)clazz);\n        } else {\n            /** 默认使用JavaBeanDeserializer反序列化(没有开启asm情况下) */\n            derializer = createJavaBeanDeserializer(clazz, type);\n        }\n\n        /** 加入cache，避免同类型反复创建 */\n        putDeserializer(type, derializer);\n\n        return derializer;\n    }\n```\n\b\n其实查找反序列化和之前提到了序列化类似，根据特定类型匹配接口或者继承实现类查找的，这里指的关注一下创建通用反序列化实例 `createJavaBeanDeserializer(clazz, type)` ：\n\n```java\n    public ObjectDeserializer createJavaBeanDeserializer(Class<?> clazz, Type type) {\n        boolean asmEnable = this.asmEnable & !this.fieldBased;\n\n        /**\n         *  ... 省略判定是否开启asm逻辑\n         */\n\n        /** 创建通用Java对象反序列化实例JavaBeanDeserializer */\n        if (!asmEnable) {\n            return new JavaBeanDeserializer(this, clazz, type);\n        }\n\n        /**\n         *  ... 省略创建基于asm的反序列化对象\n         */\n    }\n```\n\n对于自定义类反序列化，如果没有开启`asm`的情况下，会使用`JavaBeanDeserializer`进行反序列化\b转换，这里有意屏蔽基于`asm`直接操纵字节码实现，后面会单独列一个章节对该主题深入讲解。\n\n接下来会进入反序列化实现\b细节深入理解。\n","slug":"Fastjson源码解析-反序列化(一)-反序列化解析介绍","published":1,"updated":"2018-10-12T02:06:35.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4esp0001xat8snammwyg","content":"<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>fastjson核心功能包括序列化和反序列化，反序列化的含义是将跨语言的json字符串转换成java对象。\b遇到\b到反序列化章节，这里\b假定你\b已经阅读并理解了词法分析章节的内容。</p>\n<p>\b反序列化的章节\b比序列化复杂一些，\b我认为通过调试小单元代码片段的方式有助于理解，我在适当的地方会给出单元测试入口，集中精力理解具体类型的实现。</p>\n<p>现在，我们正式开始理解反序列化实现吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">parseObject</span><span class=\"params\">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 根据指定text，返回期望的java对象类型class */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseObject(text, clazz, <span class=\"keyword\">new</span> Feature[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个反序列化接口可以处理对象包含任意字段类型，但是自身不能是泛型类型，原因是java的运行时类型擦除。<code>fastjson</code>给出了替代方法解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String json = <span class=\"string\">\"[&#123;&#125;,...]\"</span>;</span><br><span class=\"line\">Type listType = <span class=\"keyword\">new</span> TypeReference&lt;List&lt;Model&gt;&gt;() &#123;&#125;.getType();</span><br><span class=\"line\">List&lt;Model&gt; modelList = JSON.parseObject(json, listType);</span><br></pre></td></tr></table></figure>\n<p>我们把关注点收回来，继续分析内部调用<code>parseObject</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">parseObject</span><span class=\"params\">(String json, Class&lt;T&gt; clazz, Feature... features)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) parseObject(json, (Type) clazz, ParserConfig.global, <span class=\"keyword\">null</span>, DEFAULT_PARSER_FEATURE, features);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">parseObject</span><span class=\"params\">(String input, Type clazz, ParserConfig config, ParseProcess processor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      <span class=\"keyword\">int</span> featureValues, Feature... features)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 配置反序列化时启用的特性，比如是否允许json字符串字段不包含双引号 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (features != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Feature feature : features) &#123;</span><br><span class=\"line\">            featureValues |= feature.mask;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  初始化DefaultJSONParser，反序列化类型由它</span></span><br><span class=\"line\"><span class=\"comment\">     *  委托config查找具体序列化处理器处理</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DefaultJSONParser parser = <span class=\"keyword\">new</span> DefaultJSONParser(input, config, featureValues);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 添加拦截器 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (processor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (processor <span class=\"keyword\">instanceof</span> ExtraTypeProvider) &#123;</span><br><span class=\"line\">            parser.getExtraTypeProviders().add((ExtraTypeProvider) processor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (processor <span class=\"keyword\">instanceof</span> ExtraProcessor) &#123;</span><br><span class=\"line\">            parser.getExtraProcessors().add((ExtraProcessor) processor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (processor <span class=\"keyword\">instanceof</span> FieldTypeResolver) &#123;</span><br><span class=\"line\">            parser.setFieldTypeResolver((FieldTypeResolver) processor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 使用反序列化实例转换对象，查找具体序列化实例委托给config查找 */</span></span><br><span class=\"line\">    T value = (T) parser.parseObject(clazz, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 处理json内部引用协议格式对象 */</span></span><br><span class=\"line\">    parser.handleResovleTask(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    parser.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终反序列化\b接口定义了执行的大框架：</p>\n<ol>\n<li>创建解析配置<code>ParserConfig</code>对象，包括初始化内部反序列化实例和特性配置等。</li>\n<li>添加反序列化拦截器</li>\n<li>根据具体类型查找反序列化实例，\b执行\b反序列化转换</li>\n<li>解析对象内部引用</li>\n</ol>\n<p>我们\b继续查看<code>parser.parseObject(clazz, null)</code>逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">parseObject</span><span class=\"params\">(Type type, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 获取json串第一个有效token */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> token = lexer.token();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.NULL) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果返回时null，自动预读下一个token */</span></span><br><span class=\"line\">        lexer.nextToken();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判定token属于字符串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取byte字节数据，分为十六进制和base64编码 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">byte</span>[].class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = lexer.bytesValue();</span><br><span class=\"line\">            lexer.nextToken();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) bytes;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 获取字符数组, 特殊处理String内存占用 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">char</span>[].class) &#123;</span><br><span class=\"line\">            String strVal = lexer.stringVal();</span><br><span class=\"line\">            lexer.nextToken();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) strVal.toCharArray();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 委托config进行特定类型查找反序列化实例 */</span></span><br><span class=\"line\">    ObjectDeserializer derializer = config.getDeserializer(type);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 执行反序列化 */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) derializer.deserialze(<span class=\"keyword\">this</span>, type, fieldName);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(e.getMessage(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反序列化核心逻辑还是在委托配置查找反序列化实例，我们具体看看是如何查找反序列化实例的， 进入<code>ParserConfig#getDeserializer(java.lang.reflect.Type)</code>自己查看逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ObjectDeserializer <span class=\"title\">getDeserializer</span><span class=\"params\">(Type type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 首先从内部已经注册查找特定class的反序列化实例 */</span></span><br><span class=\"line\">    ObjectDeserializer derializer = <span class=\"keyword\">this</span>.deserializers.get(type);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> Class&lt;?&gt;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 引用类型，根据特定类型再次匹配 */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getDeserializer((Class&lt;?&gt;) type, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> ParameterizedType) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取泛型类型原始类型 */</span></span><br><span class=\"line\">        Type rawType = ((ParameterizedType) type).getRawType();</span><br><span class=\"line\">        <span class=\"comment\">/** 泛型原始类型是引用类型，根据特定类型再次匹配 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rawType <span class=\"keyword\">instanceof</span> Class&lt;?&gt;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDeserializer((Class&lt;?&gt;) rawType, type);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 递归调用反序列化查找 */</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDeserializer(rawType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> WildcardType) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 类型是通配符或者限定类型 */</span></span><br><span class=\"line\">        WildcardType wildcardType = (WildcardType) type;</span><br><span class=\"line\">        Type[] upperBounds = wildcardType.getUpperBounds();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (upperBounds.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            Type upperBoundType = upperBounds[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"comment\">/** 获取泛型上界(? extends T)，根据特定类型再次匹配 */</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDeserializer(upperBoundType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果无法匹配到，使用默认JavaObjectDeserializer反序列化 */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> JavaObjectDeserializer.instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b<br>反序列化匹配<code>getDeserializer(Type)</code>主要\b特定处理了泛型类型，取出泛型类型真实类型还是委托内部<code>ParserConfig#getDeserializer(java.lang.Class&lt;?&gt;, java.lang.reflect.Type)</code>进行精确类型查找：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ObjectDeserializer <span class=\"title\">getDeserializer</span><span class=\"params\">(Class&lt;?&gt; clazz, Type type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 首先从内部已经注册查找特定type的反序列化实例 */</span></span><br><span class=\"line\">    ObjectDeserializer derializer = deserializers.get(type);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        type = clazz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 再次从内部已经注册查找特定class的反序列化实例 */</span></span><br><span class=\"line\">    derializer = deserializers.get(type);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        JSONType annotation = TypeUtils.getAnnotation(clazz,JSONType.class);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (annotation != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; mappingTo = annotation.mappingTo();</span><br><span class=\"line\">            <span class=\"comment\">/** 根据类型注解指定的反序列化类型 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappingTo != Void.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> getDeserializer(mappingTo, mappingTo);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> WildcardType || type <span class=\"keyword\">instanceof</span> TypeVariable || type <span class=\"keyword\">instanceof</span> ParameterizedType) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 根据泛型真实类型查找反序列化实例 */</span></span><br><span class=\"line\">        derializer = deserializers.get(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 获取class名称，进行类型匹配(可以支持高版本jdk和三方库) */</span></span><br><span class=\"line\">    String className = clazz.getName();</span><br><span class=\"line\">    className = className.replace(<span class=\"string\">'$'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">\"java.awt.\"</span>)</span><br><span class=\"line\">        &amp;&amp; AwtCodec.support(clazz)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  如果class的name是\"java.awt.\"开头 并且</span></span><br><span class=\"line\"><span class=\"comment\">         *  继承 Point、Rectangle、Font或者Color 其中之一</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!awtError) &#123;</span><br><span class=\"line\">            String[] names = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">                    <span class=\"string\">\"java.awt.Point\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"java.awt.Font\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"java.awt.Rectangle\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"java.awt.Color\"</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 如果系统支持4中类型， 使用AwtCodec 反序列化 */</span></span><br><span class=\"line\">                        deserializers.put(Class.forName(name), derializer = AwtCodec.instance);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// skip</span></span><br><span class=\"line\">                awtError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            derializer = AwtCodec.instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!jdk8Error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">\"java.time.\"</span>)) &#123;</span><br><span class=\"line\">                String[] names = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.LocalDateTime\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.LocalDate\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.LocalTime\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.ZonedDateTime\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.OffsetDateTime\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.OffsetTime\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.ZoneOffset\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.ZoneRegion\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.ZoneId\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.Period\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.Duration\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.Instant\"</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 如果系统支持JDK8中日期类型， 使用Jdk8DateCodec 反序列化 */</span></span><br><span class=\"line\">                        deserializers.put(Class.forName(name), derializer = Jdk8DateCodec.instance);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">\"java.util.Optional\"</span>)) &#123;</span><br><span class=\"line\">                String[] names = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"java.util.Optional\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.util.OptionalDouble\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.util.OptionalInt\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.util.OptionalLong\"</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 如果系统支持JDK8中可选类型， 使用OptionalCodec 反序列化 */</span></span><br><span class=\"line\">                        deserializers.put(Class.forName(name), derializer = OptionalCodec.instance);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// skip</span></span><br><span class=\"line\">            jdk8Error = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (className.equals(<span class=\"string\">\"java.nio.file.Path\"</span>)) &#123;</span><br><span class=\"line\">        deserializers.put(clazz, derializer = MiscCodec.instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz == Map.Entry.class) &#123;</span><br><span class=\"line\">        deserializers.put(clazz, derializer = MiscCodec.instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 使用当前线程类加载器 查找 META-INF/services/AutowiredObjectDeserializer.class实现类 */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (AutowiredObjectDeserializer autowired : ServiceLoader.load(AutowiredObjectDeserializer.class,</span><br><span class=\"line\">                                                                        classLoader)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class=\"line\">                deserializers.put(forType, autowired);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// skip</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        derializer = deserializers.get(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz.isEnum()) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; deserClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        JSONType jsonType = clazz.getAnnotation(JSONType.class);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jsonType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            deserClass = jsonType.deserializer();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果是枚举类型并使用了注解，使用注解指定的反序列化 */</span></span><br><span class=\"line\">                derializer = (ObjectDeserializer) deserClass.newInstance();</span><br><span class=\"line\">                deserializers.put(clazz, derializer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable error) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// skip</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是枚举类型，使用EnumSerializer反序列化 */</span></span><br><span class=\"line\">        derializer = <span class=\"keyword\">new</span> EnumDeserializer(clazz);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz.isArray()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是数组类型，使用数组对象反序列化实例 */</span></span><br><span class=\"line\">        derializer = ObjectArrayCodec.instance;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz == Set.class || clazz == HashSet.class || clazz == Collection.class || clazz == List.class</span><br><span class=\"line\">               || clazz == ArrayList.class) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果class实现集合接口，使用CollectionCodec反序列化 */</span></span><br><span class=\"line\">        derializer = CollectionCodec.instance;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果class实现类Collection接口，使用CollectionCodec反序列化 */</span></span><br><span class=\"line\">        derializer = CollectionCodec.instance;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果class实现Map接口，使用MapDeserializer反序列化 */</span></span><br><span class=\"line\">        derializer = MapDeserializer.instance;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Throwable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果class继承Throwable类，使用ThrowableDeserializer反序列化 */</span></span><br><span class=\"line\">        derializer = <span class=\"keyword\">new</span> ThrowableDeserializer(<span class=\"keyword\">this</span>, clazz);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PropertyProcessable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">        derializer = <span class=\"keyword\">new</span> PropertyProcessableDeserializer((Class&lt;PropertyProcessable&gt;)clazz);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 默认使用JavaBeanDeserializer反序列化(没有开启asm情况下) */</span></span><br><span class=\"line\">        derializer = createJavaBeanDeserializer(clazz, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 加入cache，避免同类型反复创建 */</span></span><br><span class=\"line\">    putDeserializer(type, derializer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b<br>其实查找反序列化和之前提到了序列化类似，根据特定类型匹配接口或者继承实现类查找的，这里指的关注一下创建通用反序列化实例 <code>createJavaBeanDeserializer(clazz, type)</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ObjectDeserializer <span class=\"title\">createJavaBeanDeserializer</span><span class=\"params\">(Class&lt;?&gt; clazz, Type type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> asmEnable = <span class=\"keyword\">this</span>.asmEnable &amp; !<span class=\"keyword\">this</span>.fieldBased;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  ... 省略判定是否开启asm逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 创建通用Java对象反序列化实例JavaBeanDeserializer */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!asmEnable) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JavaBeanDeserializer(<span class=\"keyword\">this</span>, clazz, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  ... 省略创建基于asm的反序列化对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于自定义类反序列化，如果没有开启<code>asm</code>的情况下，会使用<code>JavaBeanDeserializer</code>进行反序列化\b转换，这里有意屏蔽基于<code>asm</code>直接操纵字节码实现，后面会单独列一个章节对该主题深入讲解。</p>\n<p>接下来会进入反序列化实现\b细节深入理解。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>fastjson核心功能包括序列化和反序列化，反序列化的含义是将跨语言的json字符串转换成java对象。\b遇到\b到反序列化章节，这里\b假定你\b已经阅读并理解了词法分析章节的内容。</p>\n<p>\b反序列化的章节\b比序列化复杂一些，\b我认为通过调试小单元代码片段的方式有助于理解，我在适当的地方会给出单元测试入口，集中精力理解具体类型的实现。</p>\n<p>现在，我们正式开始理解反序列化实现吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">parseObject</span><span class=\"params\">(String text, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 根据指定text，返回期望的java对象类型class */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseObject(text, clazz, <span class=\"keyword\">new</span> Feature[<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个反序列化接口可以处理对象包含任意字段类型，但是自身不能是泛型类型，原因是java的运行时类型擦除。<code>fastjson</code>给出了替代方法解决：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String json = <span class=\"string\">\"[&#123;&#125;,...]\"</span>;</span><br><span class=\"line\">Type listType = <span class=\"keyword\">new</span> TypeReference&lt;List&lt;Model&gt;&gt;() &#123;&#125;.getType();</span><br><span class=\"line\">List&lt;Model&gt; modelList = JSON.parseObject(json, listType);</span><br></pre></td></tr></table></figure>\n<p>我们把关注点收回来，继续分析内部调用<code>parseObject</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">parseObject</span><span class=\"params\">(String json, Class&lt;T&gt; clazz, Feature... features)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) parseObject(json, (Type) clazz, ParserConfig.global, <span class=\"keyword\">null</span>, DEFAULT_PARSER_FEATURE, features);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">parseObject</span><span class=\"params\">(String input, Type clazz, ParserConfig config, ParseProcess processor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                      <span class=\"keyword\">int</span> featureValues, Feature... features)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (input == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 配置反序列化时启用的特性，比如是否允许json字符串字段不包含双引号 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (features != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Feature feature : features) &#123;</span><br><span class=\"line\">            featureValues |= feature.mask;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  初始化DefaultJSONParser，反序列化类型由它</span></span><br><span class=\"line\"><span class=\"comment\">     *  委托config查找具体序列化处理器处理</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    DefaultJSONParser parser = <span class=\"keyword\">new</span> DefaultJSONParser(input, config, featureValues);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 添加拦截器 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (processor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (processor <span class=\"keyword\">instanceof</span> ExtraTypeProvider) &#123;</span><br><span class=\"line\">            parser.getExtraTypeProviders().add((ExtraTypeProvider) processor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (processor <span class=\"keyword\">instanceof</span> ExtraProcessor) &#123;</span><br><span class=\"line\">            parser.getExtraProcessors().add((ExtraProcessor) processor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (processor <span class=\"keyword\">instanceof</span> FieldTypeResolver) &#123;</span><br><span class=\"line\">            parser.setFieldTypeResolver((FieldTypeResolver) processor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 使用反序列化实例转换对象，查找具体序列化实例委托给config查找 */</span></span><br><span class=\"line\">    T value = (T) parser.parseObject(clazz, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 处理json内部引用协议格式对象 */</span></span><br><span class=\"line\">    parser.handleResovleTask(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    parser.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终反序列化\b接口定义了执行的大框架：</p>\n<ol>\n<li>创建解析配置<code>ParserConfig</code>对象，包括初始化内部反序列化实例和特性配置等。</li>\n<li>添加反序列化拦截器</li>\n<li>根据具体类型查找反序列化实例，\b执行\b反序列化转换</li>\n<li>解析对象内部引用</li>\n</ol>\n<p>我们\b继续查看<code>parser.parseObject(clazz, null)</code>逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">parseObject</span><span class=\"params\">(Type type, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 获取json串第一个有效token */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> token = lexer.token();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.NULL) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果返回时null，自动预读下一个token */</span></span><br><span class=\"line\">        lexer.nextToken();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判定token属于字符串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取byte字节数据，分为十六进制和base64编码 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">byte</span>[].class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] bytes = lexer.bytesValue();</span><br><span class=\"line\">            lexer.nextToken();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) bytes;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 获取字符数组, 特殊处理String内存占用 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type == <span class=\"keyword\">char</span>[].class) &#123;</span><br><span class=\"line\">            String strVal = lexer.stringVal();</span><br><span class=\"line\">            lexer.nextToken();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) strVal.toCharArray();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 委托config进行特定类型查找反序列化实例 */</span></span><br><span class=\"line\">    ObjectDeserializer derializer = config.getDeserializer(type);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 执行反序列化 */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) derializer.deserialze(<span class=\"keyword\">this</span>, type, fieldName);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(e.getMessage(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>反序列化核心逻辑还是在委托配置查找反序列化实例，我们具体看看是如何查找反序列化实例的， 进入<code>ParserConfig#getDeserializer(java.lang.reflect.Type)</code>自己查看逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ObjectDeserializer <span class=\"title\">getDeserializer</span><span class=\"params\">(Type type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 首先从内部已经注册查找特定class的反序列化实例 */</span></span><br><span class=\"line\">    ObjectDeserializer derializer = <span class=\"keyword\">this</span>.deserializers.get(type);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> Class&lt;?&gt;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 引用类型，根据特定类型再次匹配 */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> getDeserializer((Class&lt;?&gt;) type, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> ParameterizedType) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取泛型类型原始类型 */</span></span><br><span class=\"line\">        Type rawType = ((ParameterizedType) type).getRawType();</span><br><span class=\"line\">        <span class=\"comment\">/** 泛型原始类型是引用类型，根据特定类型再次匹配 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rawType <span class=\"keyword\">instanceof</span> Class&lt;?&gt;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDeserializer((Class&lt;?&gt;) rawType, type);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 递归调用反序列化查找 */</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDeserializer(rawType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> WildcardType) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 类型是通配符或者限定类型 */</span></span><br><span class=\"line\">        WildcardType wildcardType = (WildcardType) type;</span><br><span class=\"line\">        Type[] upperBounds = wildcardType.getUpperBounds();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (upperBounds.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            Type upperBoundType = upperBounds[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"comment\">/** 获取泛型上界(? extends T)，根据特定类型再次匹配 */</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> getDeserializer(upperBoundType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果无法匹配到，使用默认JavaObjectDeserializer反序列化 */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> JavaObjectDeserializer.instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b<br>反序列化匹配<code>getDeserializer(Type)</code>主要\b特定处理了泛型类型，取出泛型类型真实类型还是委托内部<code>ParserConfig#getDeserializer(java.lang.Class&lt;?&gt;, java.lang.reflect.Type)</code>进行精确类型查找：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ObjectDeserializer <span class=\"title\">getDeserializer</span><span class=\"params\">(Class&lt;?&gt; clazz, Type type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 首先从内部已经注册查找特定type的反序列化实例 */</span></span><br><span class=\"line\">    ObjectDeserializer derializer = deserializers.get(type);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        type = clazz;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 再次从内部已经注册查找特定class的反序列化实例 */</span></span><br><span class=\"line\">    derializer = deserializers.get(type);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        JSONType annotation = TypeUtils.getAnnotation(clazz,JSONType.class);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (annotation != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; mappingTo = annotation.mappingTo();</span><br><span class=\"line\">            <span class=\"comment\">/** 根据类型注解指定的反序列化类型 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mappingTo != Void.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> getDeserializer(mappingTo, mappingTo);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> WildcardType || type <span class=\"keyword\">instanceof</span> TypeVariable || type <span class=\"keyword\">instanceof</span> ParameterizedType) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 根据泛型真实类型查找反序列化实例 */</span></span><br><span class=\"line\">        derializer = deserializers.get(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 获取class名称，进行类型匹配(可以支持高版本jdk和三方库) */</span></span><br><span class=\"line\">    String className = clazz.getName();</span><br><span class=\"line\">    className = className.replace(<span class=\"string\">'$'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">\"java.awt.\"</span>)</span><br><span class=\"line\">        &amp;&amp; AwtCodec.support(clazz)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  如果class的name是\"java.awt.\"开头 并且</span></span><br><span class=\"line\"><span class=\"comment\">         *  继承 Point、Rectangle、Font或者Color 其中之一</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!awtError) &#123;</span><br><span class=\"line\">            String[] names = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">                    <span class=\"string\">\"java.awt.Point\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"java.awt.Font\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"java.awt.Rectangle\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"java.awt.Color\"</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 如果系统支持4中类型， 使用AwtCodec 反序列化 */</span></span><br><span class=\"line\">                        deserializers.put(Class.forName(name), derializer = AwtCodec.instance);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// skip</span></span><br><span class=\"line\">                awtError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            derializer = AwtCodec.instance;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!jdk8Error) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">\"java.time.\"</span>)) &#123;</span><br><span class=\"line\">                String[] names = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.LocalDateTime\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.LocalDate\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.LocalTime\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.ZonedDateTime\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.OffsetDateTime\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.OffsetTime\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.ZoneOffset\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.ZoneRegion\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.ZoneId\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.Period\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.Duration\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.time.Instant\"</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 如果系统支持JDK8中日期类型， 使用Jdk8DateCodec 反序列化 */</span></span><br><span class=\"line\">                        deserializers.put(Class.forName(name), derializer = Jdk8DateCodec.instance);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">\"java.util.Optional\"</span>)) &#123;</span><br><span class=\"line\">                String[] names = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">                        <span class=\"string\">\"java.util.Optional\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.util.OptionalDouble\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.util.OptionalInt\"</span>,</span><br><span class=\"line\">                        <span class=\"string\">\"java.util.OptionalLong\"</span></span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 如果系统支持JDK8中可选类型， 使用OptionalCodec 反序列化 */</span></span><br><span class=\"line\">                        deserializers.put(Class.forName(name), derializer = OptionalCodec.instance);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// skip</span></span><br><span class=\"line\">            jdk8Error = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (className.equals(<span class=\"string\">\"java.nio.file.Path\"</span>)) &#123;</span><br><span class=\"line\">        deserializers.put(clazz, derializer = MiscCodec.instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz == Map.Entry.class) &#123;</span><br><span class=\"line\">        deserializers.put(clazz, derializer = MiscCodec.instance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 使用当前线程类加载器 查找 META-INF/services/AutowiredObjectDeserializer.class实现类 */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (AutowiredObjectDeserializer autowired : ServiceLoader.load(AutowiredObjectDeserializer.class,</span><br><span class=\"line\">                                                                        classLoader)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class=\"line\">                deserializers.put(forType, autowired);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// skip</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        derializer = deserializers.get(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (derializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz.isEnum()) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; deserClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        JSONType jsonType = clazz.getAnnotation(JSONType.class);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jsonType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            deserClass = jsonType.deserializer();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果是枚举类型并使用了注解，使用注解指定的反序列化 */</span></span><br><span class=\"line\">                derializer = (ObjectDeserializer) deserClass.newInstance();</span><br><span class=\"line\">                deserializers.put(clazz, derializer);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable error) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// skip</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是枚举类型，使用EnumSerializer反序列化 */</span></span><br><span class=\"line\">        derializer = <span class=\"keyword\">new</span> EnumDeserializer(clazz);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz.isArray()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是数组类型，使用数组对象反序列化实例 */</span></span><br><span class=\"line\">        derializer = ObjectArrayCodec.instance;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz == Set.class || clazz == HashSet.class || clazz == Collection.class || clazz == List.class</span><br><span class=\"line\">               || clazz == ArrayList.class) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果class实现集合接口，使用CollectionCodec反序列化 */</span></span><br><span class=\"line\">        derializer = CollectionCodec.instance;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果class实现类Collection接口，使用CollectionCodec反序列化 */</span></span><br><span class=\"line\">        derializer = CollectionCodec.instance;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果class实现Map接口，使用MapDeserializer反序列化 */</span></span><br><span class=\"line\">        derializer = MapDeserializer.instance;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Throwable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果class继承Throwable类，使用ThrowableDeserializer反序列化 */</span></span><br><span class=\"line\">        derializer = <span class=\"keyword\">new</span> ThrowableDeserializer(<span class=\"keyword\">this</span>, clazz);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (PropertyProcessable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">        derializer = <span class=\"keyword\">new</span> PropertyProcessableDeserializer((Class&lt;PropertyProcessable&gt;)clazz);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 默认使用JavaBeanDeserializer反序列化(没有开启asm情况下) */</span></span><br><span class=\"line\">        derializer = createJavaBeanDeserializer(clazz, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 加入cache，避免同类型反复创建 */</span></span><br><span class=\"line\">    putDeserializer(type, derializer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> derializer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b<br>其实查找反序列化和之前提到了序列化类似，根据特定类型匹配接口或者继承实现类查找的，这里指的关注一下创建通用反序列化实例 <code>createJavaBeanDeserializer(clazz, type)</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ObjectDeserializer <span class=\"title\">createJavaBeanDeserializer</span><span class=\"params\">(Class&lt;?&gt; clazz, Type type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> asmEnable = <span class=\"keyword\">this</span>.asmEnable &amp; !<span class=\"keyword\">this</span>.fieldBased;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  ... 省略判定是否开启asm逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 创建通用Java对象反序列化实例JavaBeanDeserializer */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!asmEnable) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JavaBeanDeserializer(<span class=\"keyword\">this</span>, clazz, type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  ... 省略创建基于asm的反序列化对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于自定义类反序列化，如果没有开启<code>asm</code>的情况下，会使用<code>JavaBeanDeserializer</code>进行反序列化\b转换，这里有意屏蔽基于<code>asm</code>直接操纵字节码实现，后面会单独列一个章节对该主题深入讲解。</p>\n<p>接下来会进入反序列化实现\b细节深入理解。</p>\n"},{"title":"序列化（三）","subtitle":"序列化字段属性键值对，主要讲解SerializeWriter成员函数","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:05:14.000Z","_content":"## SerializeWriter成员函数\n\n### 序列化字段名称\n\n```java\n    public void writeFieldName(String key, boolean checkSpecial) {\n        if (key == null) {\n            /** 如果字段key为null， 输出 \"null:\" */\n            write(\"null:\");\n            return;\n        }\n\n        if (useSingleQuotes) {\n            if (quoteFieldNames) {\n                /** 使用单引号并且在字段后面加'：'输出 标准的json key*/\n                writeStringWithSingleQuote(key);\n                write(':');\n            } else {\n                /** 输出key，如果有特殊字符会自动添加单引号 */\n                writeKeyWithSingleQuoteIfHasSpecial(key);\n            }\n        } else {\n            if (quoteFieldNames) {\n                /** 使用双引号输出json key 并添加 ： */\n                writeStringWithDoubleQuote(key, ':');\n            } else {\n                boolean hashSpecial = key.length() == 0;\n                for (int i = 0; i < key.length(); ++i) {\n                    char ch = key.charAt(i);\n                    boolean special = (ch < 64 && (sepcialBits & (1L << ch)) != 0) || ch == '\\\\';\n                    if (special) {\n                        hashSpecial = true;\n                        break;\n                    }\n                }\n                if (hashSpecial) {\n                    /** 如果包含特殊字符，会进行特殊字符转换输出，eg: 使用转换后的native编码输出 */\n                    writeStringWithDoubleQuote(key, ':');\n                } else {\n                    /** 输出字段不加引号 */\n                    write(key);\n                    write(':');\n                }\n            }\n        }\n    }\n```\n\n序列化字段名称方法writeFieldName主要的任务：\n\n1. 完成\b字段特殊字符的转译\n2. 添加字段的引号\n\n处理输出key的特殊字符方法`writeStringWithDoubleQuote`前面已经分析过了，序列化字段名称是否需要添加引号和特殊字符处理参考`writeKeyWithSingleQuoteIfHasSpecial`：\n\n```java\n    private void writeKeyWithSingleQuoteIfHasSpecial(String text) {\n        final byte[] specicalFlags_singleQuotes = IOUtils.specicalFlags_singleQuotes;\n\n        int len = text.length();\n        int newcount = count + len + 1;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                if (len == 0) {\n                    /** 如果字段为null， 输出空白字符('':)作为key */\n                    write('\\'');\n                    write('\\'');\n                    write(':');\n                    return;\n                }\n\n                boolean hasSpecial = false;\n                for (int i = 0; i < len; ++i) {\n                    char ch = text.charAt(i);\n                    if (ch < specicalFlags_singleQuotes.length && specicalFlags_singleQuotes[ch] != 0) {\n                        hasSpecial = true;\n                        break;\n                    }\n                }\n\n                /** 如果有特殊字符，给字段key添加单引号 */\n                if (hasSpecial) {\n                    write('\\'');\n                }\n                for (int i = 0; i < len; ++i) {\n                    char ch = text.charAt(i);\n                    if (ch < specicalFlags_singleQuotes.length && specicalFlags_singleQuotes[ch] != 0) {\n                        /** 如果输出key中包含特殊字符，添加转译字符并将特殊字符替换成普通字符 */\n                        write('\\\\');\n                        write(replaceChars[(int) ch]);\n                    } else {\n                        write(ch);\n                    }\n                }\n\n                /** 如果有特殊字符，给字段key添加单引号 */\n                if (hasSpecial) {\n                    write('\\'');\n                }\n                write(':');\n                return;\n            }\n            /** 输出器writer为null触发扩容，扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n            expandCapacity(newcount);\n        }\n\n        if (len == 0) {\n            int newCount = count + 3;\n            if (newCount > buf.length) {\n                expandCapacity(count + 3);\n            }\n            buf[count++] = '\\'';\n            buf[count++] = '\\'';\n            buf[count++] = ':';\n            return;\n        }\n\n        int start = count;\n        int end = start + len;\n\n        /** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */\n        text.getChars(0, len, buf, start);\n        count = newcount;\n\n        boolean hasSpecial = false;\n\n        for (int i = start; i < end; ++i) {\n            char ch = buf[i];\n            if (ch < specicalFlags_singleQuotes.length && specicalFlags_singleQuotes[ch] != 0) {\n                if (!hasSpecial) {\n                    newcount += 3;\n                    if (newcount > buf.length) {\n                        expandCapacity(newcount);\n                    }\n                    count = newcount;\n\n                    /** 将字符后移两位，插入字符'\\ 并替换特殊字符为普通字符 */\n                    System.arraycopy(buf, i + 1, buf, i + 3, end - i - 1);\n                    /** 将字符后移一位 */\n                    System.arraycopy(buf, 0, buf, 1, i);\n                    buf[start] = '\\'';\n                    buf[++i] = '\\\\';\n                    buf[++i] = replaceChars[(int) ch];\n                    end += 2;\n                    buf[count - 2] = '\\'';\n\n                    hasSpecial = true;\n                } else {\n                    newcount++;\n                    if (newcount > buf.length) {\n                        expandCapacity(newcount);\n                    }\n                    count = newcount;\n\n                    /** 包含特殊字符，将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符 */\n                    System.arraycopy(buf, i + 1, buf, i + 2, end - i);\n                    buf[i] = '\\\\';\n                    buf[++i] = replaceChars[(int) ch];\n                    end++;\n                }\n            }\n        }\n\n        buf[newcount - 1] = ':';\n    }\n```\n\n### 序列化Boolean类型字段键值对\n\n```java\n    public void writeFieldValue(char seperator, String name, boolean value) {\n        if (!quoteFieldNames) {\n            /** 如果不需要输出双引号，则一次输出字段分隔符，字段名字，字段值 */\n            write(seperator);\n            writeFieldName(name);\n            write(value);\n            return;\n        }\n        /** true 占用4位， false 占用5位 */\n        int intSize = value ? 4 : 5;\n\n        int nameLen = name.length();\n        /** 输出总长度， 中间的4  代表 key 和 value 总共占用4个引号 */\n        int newcount = count + nameLen + 4 + intSize;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                /** 依次输出字段分隔符，字段：字段值 */\n                write(seperator);\n                writeString(name);\n                write(':');\n                write(value);\n                return;\n            }\n            /** 输出器writer为null触发扩容，扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n            expandCapacity(newcount);\n        }\n\n        int start = count;\n        count = newcount;\n\n        /** 输出字段分隔符，一般是, */\n        buf[start] = seperator;\n\n        int nameEnd = start + nameLen + 1;\n\n        /** 输出字段属性分隔符，一般是单引号或双引号 */\n        buf[start + 1] = keySeperator;\n\n        /** 输出字段名称 */\n        name.getChars(0, nameLen, buf, start + 2);\n\n        /** 字段名称添加分隔符，一般是单引号或双引号 */\n        buf[nameEnd + 1] = keySeperator;\n\n        /** 输出boolean类型字符串值 */\n        if (value) {\n            System.arraycopy(\":true\".toCharArray(), 0, buf, nameEnd + 2, 5);\n        } else {\n            System.arraycopy(\":false\".toCharArray(), 0, buf, nameEnd + 2, 6);\n        }\n    }\n```\n\n序列化boolean类型的键值对属性，因为不涉及特殊字符，主要就是把原型序列化为字面量值。\n\n### 序列化Int类型字段键值对\n\n```java\n    public void writeFieldValue(char seperator, String name, int value) {\n        if (value == Integer.MIN_VALUE || !quoteFieldNames) {\n            /** 如果是整数最小值或不需要输出双引号，则一次输出字段分隔符，字段名字，字段值 */\n            write(seperator);\n            writeFieldName(name);\n            writeInt(value);\n            return;\n        }\n\n        /** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */\n        int intSize = (value < 0) ? IOUtils.stringSize(-value) + 1 : IOUtils.stringSize(value);\n\n        int nameLen = name.length();\n        int newcount = count + nameLen + 4 + intSize;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                write(seperator);\n                writeFieldName(name);\n                writeInt(value);\n                return;\n            }\n            /** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n            expandCapacity(newcount);\n        }\n\n        int start = count;\n        count = newcount;\n\n        /** 输出字段分隔符，一般是, */\n        buf[start] = seperator;\n\n        int nameEnd = start + nameLen + 1;\n\n        /** 输出字段属性分隔符，一般是单引号或双引号 */\n        buf[start + 1] = keySeperator;\n\n        /** 输出字段名称 */\n        name.getChars(0, nameLen, buf, start + 2);\n\n        buf[nameEnd + 1] = keySeperator;\n        buf[nameEnd + 2] = ':';\n\n        /** 输出整数值，对整数转化成单字符 */\n        IOUtils.getChars(value, count, buf);\n    }\n```\n\n序列化int类型的键值对属性，因为不涉及特殊字符，主要就是把原型序列化为字面量值。截止到现在，已经把核心`SerializWriter`类讲完了，剩余字段键值对极其类似`writeFieldValue` boolean和int等，因此无需冗余分析。因为序列化真正开始之前，这个\b类\b极其基础并且非常重要，因此花的时间较多。\n","source":"_posts/Fastjson源码解析-序列化(三)-序列化字段属性键值对.md","raw":"---\ntitle: 序列化（三）\nsubtitle:  序列化字段属性键值对，主要讲解SerializeWriter成员函数\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n- Fastjson源码解析\ncategories:\n- Fastjson源码解析\ndate: 2018-09-30 23:05:14\n---\n## SerializeWriter成员函数\n\n### 序列化字段名称\n\n```java\n    public void writeFieldName(String key, boolean checkSpecial) {\n        if (key == null) {\n            /** 如果字段key为null， 输出 \"null:\" */\n            write(\"null:\");\n            return;\n        }\n\n        if (useSingleQuotes) {\n            if (quoteFieldNames) {\n                /** 使用单引号并且在字段后面加'：'输出 标准的json key*/\n                writeStringWithSingleQuote(key);\n                write(':');\n            } else {\n                /** 输出key，如果有特殊字符会自动添加单引号 */\n                writeKeyWithSingleQuoteIfHasSpecial(key);\n            }\n        } else {\n            if (quoteFieldNames) {\n                /** 使用双引号输出json key 并添加 ： */\n                writeStringWithDoubleQuote(key, ':');\n            } else {\n                boolean hashSpecial = key.length() == 0;\n                for (int i = 0; i < key.length(); ++i) {\n                    char ch = key.charAt(i);\n                    boolean special = (ch < 64 && (sepcialBits & (1L << ch)) != 0) || ch == '\\\\';\n                    if (special) {\n                        hashSpecial = true;\n                        break;\n                    }\n                }\n                if (hashSpecial) {\n                    /** 如果包含特殊字符，会进行特殊字符转换输出，eg: 使用转换后的native编码输出 */\n                    writeStringWithDoubleQuote(key, ':');\n                } else {\n                    /** 输出字段不加引号 */\n                    write(key);\n                    write(':');\n                }\n            }\n        }\n    }\n```\n\n序列化字段名称方法writeFieldName主要的任务：\n\n1. 完成\b字段特殊字符的转译\n2. 添加字段的引号\n\n处理输出key的特殊字符方法`writeStringWithDoubleQuote`前面已经分析过了，序列化字段名称是否需要添加引号和特殊字符处理参考`writeKeyWithSingleQuoteIfHasSpecial`：\n\n```java\n    private void writeKeyWithSingleQuoteIfHasSpecial(String text) {\n        final byte[] specicalFlags_singleQuotes = IOUtils.specicalFlags_singleQuotes;\n\n        int len = text.length();\n        int newcount = count + len + 1;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                if (len == 0) {\n                    /** 如果字段为null， 输出空白字符('':)作为key */\n                    write('\\'');\n                    write('\\'');\n                    write(':');\n                    return;\n                }\n\n                boolean hasSpecial = false;\n                for (int i = 0; i < len; ++i) {\n                    char ch = text.charAt(i);\n                    if (ch < specicalFlags_singleQuotes.length && specicalFlags_singleQuotes[ch] != 0) {\n                        hasSpecial = true;\n                        break;\n                    }\n                }\n\n                /** 如果有特殊字符，给字段key添加单引号 */\n                if (hasSpecial) {\n                    write('\\'');\n                }\n                for (int i = 0; i < len; ++i) {\n                    char ch = text.charAt(i);\n                    if (ch < specicalFlags_singleQuotes.length && specicalFlags_singleQuotes[ch] != 0) {\n                        /** 如果输出key中包含特殊字符，添加转译字符并将特殊字符替换成普通字符 */\n                        write('\\\\');\n                        write(replaceChars[(int) ch]);\n                    } else {\n                        write(ch);\n                    }\n                }\n\n                /** 如果有特殊字符，给字段key添加单引号 */\n                if (hasSpecial) {\n                    write('\\'');\n                }\n                write(':');\n                return;\n            }\n            /** 输出器writer为null触发扩容，扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n            expandCapacity(newcount);\n        }\n\n        if (len == 0) {\n            int newCount = count + 3;\n            if (newCount > buf.length) {\n                expandCapacity(count + 3);\n            }\n            buf[count++] = '\\'';\n            buf[count++] = '\\'';\n            buf[count++] = ':';\n            return;\n        }\n\n        int start = count;\n        int end = start + len;\n\n        /** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */\n        text.getChars(0, len, buf, start);\n        count = newcount;\n\n        boolean hasSpecial = false;\n\n        for (int i = start; i < end; ++i) {\n            char ch = buf[i];\n            if (ch < specicalFlags_singleQuotes.length && specicalFlags_singleQuotes[ch] != 0) {\n                if (!hasSpecial) {\n                    newcount += 3;\n                    if (newcount > buf.length) {\n                        expandCapacity(newcount);\n                    }\n                    count = newcount;\n\n                    /** 将字符后移两位，插入字符'\\ 并替换特殊字符为普通字符 */\n                    System.arraycopy(buf, i + 1, buf, i + 3, end - i - 1);\n                    /** 将字符后移一位 */\n                    System.arraycopy(buf, 0, buf, 1, i);\n                    buf[start] = '\\'';\n                    buf[++i] = '\\\\';\n                    buf[++i] = replaceChars[(int) ch];\n                    end += 2;\n                    buf[count - 2] = '\\'';\n\n                    hasSpecial = true;\n                } else {\n                    newcount++;\n                    if (newcount > buf.length) {\n                        expandCapacity(newcount);\n                    }\n                    count = newcount;\n\n                    /** 包含特殊字符，将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符 */\n                    System.arraycopy(buf, i + 1, buf, i + 2, end - i);\n                    buf[i] = '\\\\';\n                    buf[++i] = replaceChars[(int) ch];\n                    end++;\n                }\n            }\n        }\n\n        buf[newcount - 1] = ':';\n    }\n```\n\n### 序列化Boolean类型字段键值对\n\n```java\n    public void writeFieldValue(char seperator, String name, boolean value) {\n        if (!quoteFieldNames) {\n            /** 如果不需要输出双引号，则一次输出字段分隔符，字段名字，字段值 */\n            write(seperator);\n            writeFieldName(name);\n            write(value);\n            return;\n        }\n        /** true 占用4位， false 占用5位 */\n        int intSize = value ? 4 : 5;\n\n        int nameLen = name.length();\n        /** 输出总长度， 中间的4  代表 key 和 value 总共占用4个引号 */\n        int newcount = count + nameLen + 4 + intSize;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                /** 依次输出字段分隔符，字段：字段值 */\n                write(seperator);\n                writeString(name);\n                write(':');\n                write(value);\n                return;\n            }\n            /** 输出器writer为null触发扩容，扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n            expandCapacity(newcount);\n        }\n\n        int start = count;\n        count = newcount;\n\n        /** 输出字段分隔符，一般是, */\n        buf[start] = seperator;\n\n        int nameEnd = start + nameLen + 1;\n\n        /** 输出字段属性分隔符，一般是单引号或双引号 */\n        buf[start + 1] = keySeperator;\n\n        /** 输出字段名称 */\n        name.getChars(0, nameLen, buf, start + 2);\n\n        /** 字段名称添加分隔符，一般是单引号或双引号 */\n        buf[nameEnd + 1] = keySeperator;\n\n        /** 输出boolean类型字符串值 */\n        if (value) {\n            System.arraycopy(\":true\".toCharArray(), 0, buf, nameEnd + 2, 5);\n        } else {\n            System.arraycopy(\":false\".toCharArray(), 0, buf, nameEnd + 2, 6);\n        }\n    }\n```\n\n序列化boolean类型的键值对属性，因为不涉及特殊字符，主要就是把原型序列化为字面量值。\n\n### 序列化Int类型字段键值对\n\n```java\n    public void writeFieldValue(char seperator, String name, int value) {\n        if (value == Integer.MIN_VALUE || !quoteFieldNames) {\n            /** 如果是整数最小值或不需要输出双引号，则一次输出字段分隔符，字段名字，字段值 */\n            write(seperator);\n            writeFieldName(name);\n            writeInt(value);\n            return;\n        }\n\n        /** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */\n        int intSize = (value < 0) ? IOUtils.stringSize(-value) + 1 : IOUtils.stringSize(value);\n\n        int nameLen = name.length();\n        int newcount = count + nameLen + 4 + intSize;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                write(seperator);\n                writeFieldName(name);\n                writeInt(value);\n                return;\n            }\n            /** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n            expandCapacity(newcount);\n        }\n\n        int start = count;\n        count = newcount;\n\n        /** 输出字段分隔符，一般是, */\n        buf[start] = seperator;\n\n        int nameEnd = start + nameLen + 1;\n\n        /** 输出字段属性分隔符，一般是单引号或双引号 */\n        buf[start + 1] = keySeperator;\n\n        /** 输出字段名称 */\n        name.getChars(0, nameLen, buf, start + 2);\n\n        buf[nameEnd + 1] = keySeperator;\n        buf[nameEnd + 2] = ':';\n\n        /** 输出整数值，对整数转化成单字符 */\n        IOUtils.getChars(value, count, buf);\n    }\n```\n\n序列化int类型的键值对属性，因为不涉及特殊字符，主要就是把原型序列化为字面量值。截止到现在，已经把核心`SerializWriter`类讲完了，剩余字段键值对极其类似`writeFieldValue` boolean和int等，因此无需冗余分析。因为序列化真正开始之前，这个\b类\b极其基础并且非常重要，因此花的时间较多。\n","slug":"Fastjson源码解析-序列化(三)-序列化字段属性键值对","published":1,"updated":"2018-10-12T02:24:59.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4est0003xat8lbiv4hj0","content":"<h2 id=\"SerializeWriter成员函数\"><a href=\"#SerializeWriter成员函数\" class=\"headerlink\" title=\"SerializeWriter成员函数\"></a>SerializeWriter成员函数</h2><h3 id=\"序列化字段名称\"><a href=\"#序列化字段名称\" class=\"headerlink\" title=\"序列化字段名称\"></a>序列化字段名称</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldName</span><span class=\"params\">(String key, <span class=\"keyword\">boolean</span> checkSpecial)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果字段key为null， 输出 \"null:\" */</span></span><br><span class=\"line\">        write(<span class=\"string\">\"null:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (useSingleQuotes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quoteFieldNames) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用单引号并且在字段后面加'：'输出 标准的json key*/</span></span><br><span class=\"line\">            writeStringWithSingleQuote(key);</span><br><span class=\"line\">            write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 输出key，如果有特殊字符会自动添加单引号 */</span></span><br><span class=\"line\">            writeKeyWithSingleQuoteIfHasSpecial(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quoteFieldNames) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用双引号输出json key 并添加 ： */</span></span><br><span class=\"line\">            writeStringWithDoubleQuote(key, <span class=\"string\">':'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> hashSpecial = key.length() == <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = key.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> special = (ch &lt; <span class=\"number\">64</span> &amp;&amp; (sepcialBits &amp; (<span class=\"number\">1L</span> &lt;&lt; ch)) != <span class=\"number\">0</span>) || ch == <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (special) &#123;</span><br><span class=\"line\">                    hashSpecial = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hashSpecial) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果包含特殊字符，会进行特殊字符转换输出，eg: 使用转换后的native编码输出 */</span></span><br><span class=\"line\">                writeStringWithDoubleQuote(key, <span class=\"string\">':'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 输出字段不加引号 */</span></span><br><span class=\"line\">                write(key);</span><br><span class=\"line\">                write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化字段名称方法writeFieldName主要的任务：</p>\n<ol>\n<li>完成\b字段特殊字符的转译</li>\n<li>添加字段的引号</li>\n</ol>\n<p>处理输出key的特殊字符方法<code>writeStringWithDoubleQuote</code>前面已经分析过了，序列化字段名称是否需要添加引号和特殊字符处理参考<code>writeKeyWithSingleQuoteIfHasSpecial</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeKeyWithSingleQuoteIfHasSpecial</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] specicalFlags_singleQuotes = IOUtils.specicalFlags_singleQuotes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = text.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + len + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果字段为null， 输出空白字符('':)作为key */</span></span><br><span class=\"line\">                write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">                write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">                write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> hasSpecial = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &lt; specicalFlags_singleQuotes.length &amp;&amp; specicalFlags_singleQuotes[ch] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    hasSpecial = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 如果有特殊字符，给字段key添加单引号 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasSpecial) &#123;</span><br><span class=\"line\">                write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &lt; specicalFlags_singleQuotes.length &amp;&amp; specicalFlags_singleQuotes[ch] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果输出key中包含特殊字符，添加转译字符并将特殊字符替换成普通字符 */</span></span><br><span class=\"line\">                    write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                    write(replaceChars[(<span class=\"keyword\">int</span>) ch]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    write(ch);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 如果有特殊字符，给字段key添加单引号 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasSpecial) &#123;</span><br><span class=\"line\">                write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出器writer为null触发扩容，扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newCount = count + <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCount &gt; buf.length) &#123;</span><br><span class=\"line\">            expandCapacity(count + <span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        buf[count++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">        buf[count++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">        buf[count++] = <span class=\"string\">':'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = count;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = start + len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */</span></span><br><span class=\"line\">    text.getChars(<span class=\"number\">0</span>, len, buf, start);</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> hasSpecial = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &lt; specicalFlags_singleQuotes.length &amp;&amp; specicalFlags_singleQuotes[ch] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!hasSpecial) &#123;</span><br><span class=\"line\">                newcount += <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">                    expandCapacity(newcount);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 将字符后移两位，插入字符'\\ 并替换特殊字符为普通字符 */</span></span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">3</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">/** 将字符后移一位 */</span></span><br><span class=\"line\">                System.arraycopy(buf, <span class=\"number\">0</span>, buf, <span class=\"number\">1</span>, i);</span><br><span class=\"line\">                buf[start] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">                buf[++i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[++i] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                end += <span class=\"number\">2</span>;</span><br><span class=\"line\">                buf[count - <span class=\"number\">2</span>] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                hasSpecial = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                newcount++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">                    expandCapacity(newcount);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 包含特殊字符，将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符 */</span></span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">2</span>, end - i);</span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[++i] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                end++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[newcount - <span class=\"number\">1</span>] = <span class=\"string\">':'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化Boolean类型字段键值对\"><a href=\"#序列化Boolean类型字段键值对\" class=\"headerlink\" title=\"序列化Boolean类型字段键值对\"></a>序列化Boolean类型字段键值对</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldValue</span><span class=\"params\">(<span class=\"keyword\">char</span> seperator, String name, <span class=\"keyword\">boolean</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!quoteFieldNames) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果不需要输出双引号，则一次输出字段分隔符，字段名字，字段值 */</span></span><br><span class=\"line\">        write(seperator);</span><br><span class=\"line\">        writeFieldName(name);</span><br><span class=\"line\">        write(value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** true 占用4位， false 占用5位 */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> intSize = value ? <span class=\"number\">4</span> : <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nameLen = name.length();</span><br><span class=\"line\">    <span class=\"comment\">/** 输出总长度， 中间的4  代表 key 和 value 总共占用4个引号 */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + nameLen + <span class=\"number\">4</span> + intSize;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 依次输出字段分隔符，字段：字段值 */</span></span><br><span class=\"line\">            write(seperator);</span><br><span class=\"line\">            writeString(name);</span><br><span class=\"line\">            write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            write(value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出器writer为null触发扩容，扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = count;</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段分隔符，一般是, */</span></span><br><span class=\"line\">    buf[start] = seperator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nameEnd = start + nameLen + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段属性分隔符，一般是单引号或双引号 */</span></span><br><span class=\"line\">    buf[start + <span class=\"number\">1</span>] = keySeperator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段名称 */</span></span><br><span class=\"line\">    name.getChars(<span class=\"number\">0</span>, nameLen, buf, start + <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 字段名称添加分隔符，一般是单引号或双引号 */</span></span><br><span class=\"line\">    buf[nameEnd + <span class=\"number\">1</span>] = keySeperator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出boolean类型字符串值 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">        System.arraycopy(<span class=\"string\">\":true\"</span>.toCharArray(), <span class=\"number\">0</span>, buf, nameEnd + <span class=\"number\">2</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.arraycopy(<span class=\"string\">\":false\"</span>.toCharArray(), <span class=\"number\">0</span>, buf, nameEnd + <span class=\"number\">2</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化boolean类型的键值对属性，因为不涉及特殊字符，主要就是把原型序列化为字面量值。</p>\n<h3 id=\"序列化Int类型字段键值对\"><a href=\"#序列化Int类型字段键值对\" class=\"headerlink\" title=\"序列化Int类型字段键值对\"></a>序列化Int类型字段键值对</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldValue</span><span class=\"params\">(<span class=\"keyword\">char</span> seperator, String name, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == Integer.MIN_VALUE || !quoteFieldNames) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是整数最小值或不需要输出双引号，则一次输出字段分隔符，字段名字，字段值 */</span></span><br><span class=\"line\">        write(seperator);</span><br><span class=\"line\">        writeFieldName(name);</span><br><span class=\"line\">        writeInt(value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> intSize = (value &lt; <span class=\"number\">0</span>) ? IOUtils.stringSize(-value) + <span class=\"number\">1</span> : IOUtils.stringSize(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nameLen = name.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + nameLen + <span class=\"number\">4</span> + intSize;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            write(seperator);</span><br><span class=\"line\">            writeFieldName(name);</span><br><span class=\"line\">            writeInt(value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = count;</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段分隔符，一般是, */</span></span><br><span class=\"line\">    buf[start] = seperator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nameEnd = start + nameLen + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段属性分隔符，一般是单引号或双引号 */</span></span><br><span class=\"line\">    buf[start + <span class=\"number\">1</span>] = keySeperator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段名称 */</span></span><br><span class=\"line\">    name.getChars(<span class=\"number\">0</span>, nameLen, buf, start + <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[nameEnd + <span class=\"number\">1</span>] = keySeperator;</span><br><span class=\"line\">    buf[nameEnd + <span class=\"number\">2</span>] = <span class=\"string\">':'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出整数值，对整数转化成单字符 */</span></span><br><span class=\"line\">    IOUtils.getChars(value, count, buf);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化int类型的键值对属性，因为不涉及特殊字符，主要就是把原型序列化为字面量值。截止到现在，已经把核心<code>SerializWriter</code>类讲完了，剩余字段键值对极其类似<code>writeFieldValue</code> boolean和int等，因此无需冗余分析。因为序列化真正开始之前，这个\b类\b极其基础并且非常重要，因此花的时间较多。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"SerializeWriter成员函数\"><a href=\"#SerializeWriter成员函数\" class=\"headerlink\" title=\"SerializeWriter成员函数\"></a>SerializeWriter成员函数</h2><h3 id=\"序列化字段名称\"><a href=\"#序列化字段名称\" class=\"headerlink\" title=\"序列化字段名称\"></a>序列化字段名称</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldName</span><span class=\"params\">(String key, <span class=\"keyword\">boolean</span> checkSpecial)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果字段key为null， 输出 \"null:\" */</span></span><br><span class=\"line\">        write(<span class=\"string\">\"null:\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (useSingleQuotes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quoteFieldNames) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用单引号并且在字段后面加'：'输出 标准的json key*/</span></span><br><span class=\"line\">            writeStringWithSingleQuote(key);</span><br><span class=\"line\">            write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 输出key，如果有特殊字符会自动添加单引号 */</span></span><br><span class=\"line\">            writeKeyWithSingleQuoteIfHasSpecial(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quoteFieldNames) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用双引号输出json key 并添加 ： */</span></span><br><span class=\"line\">            writeStringWithDoubleQuote(key, <span class=\"string\">':'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> hashSpecial = key.length() == <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = key.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> special = (ch &lt; <span class=\"number\">64</span> &amp;&amp; (sepcialBits &amp; (<span class=\"number\">1L</span> &lt;&lt; ch)) != <span class=\"number\">0</span>) || ch == <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (special) &#123;</span><br><span class=\"line\">                    hashSpecial = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hashSpecial) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果包含特殊字符，会进行特殊字符转换输出，eg: 使用转换后的native编码输出 */</span></span><br><span class=\"line\">                writeStringWithDoubleQuote(key, <span class=\"string\">':'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 输出字段不加引号 */</span></span><br><span class=\"line\">                write(key);</span><br><span class=\"line\">                write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化字段名称方法writeFieldName主要的任务：</p>\n<ol>\n<li>完成\b字段特殊字符的转译</li>\n<li>添加字段的引号</li>\n</ol>\n<p>处理输出key的特殊字符方法<code>writeStringWithDoubleQuote</code>前面已经分析过了，序列化字段名称是否需要添加引号和特殊字符处理参考<code>writeKeyWithSingleQuoteIfHasSpecial</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">writeKeyWithSingleQuoteIfHasSpecial</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">byte</span>[] specicalFlags_singleQuotes = IOUtils.specicalFlags_singleQuotes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = text.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + len + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果字段为null， 输出空白字符('':)作为key */</span></span><br><span class=\"line\">                write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">                write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">                write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> hasSpecial = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &lt; specicalFlags_singleQuotes.length &amp;&amp; specicalFlags_singleQuotes[ch] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    hasSpecial = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 如果有特殊字符，给字段key添加单引号 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasSpecial) &#123;</span><br><span class=\"line\">                write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &lt; specicalFlags_singleQuotes.length &amp;&amp; specicalFlags_singleQuotes[ch] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果输出key中包含特殊字符，添加转译字符并将特殊字符替换成普通字符 */</span></span><br><span class=\"line\">                    write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                    write(replaceChars[(<span class=\"keyword\">int</span>) ch]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    write(ch);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 如果有特殊字符，给字段key添加单引号 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasSpecial) &#123;</span><br><span class=\"line\">                write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出器writer为null触发扩容，扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newCount = count + <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newCount &gt; buf.length) &#123;</span><br><span class=\"line\">            expandCapacity(count + <span class=\"number\">3</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        buf[count++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">        buf[count++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">        buf[count++] = <span class=\"string\">':'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = count;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = start + len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */</span></span><br><span class=\"line\">    text.getChars(<span class=\"number\">0</span>, len, buf, start);</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> hasSpecial = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &lt; specicalFlags_singleQuotes.length &amp;&amp; specicalFlags_singleQuotes[ch] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!hasSpecial) &#123;</span><br><span class=\"line\">                newcount += <span class=\"number\">3</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">                    expandCapacity(newcount);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 将字符后移两位，插入字符'\\ 并替换特殊字符为普通字符 */</span></span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">3</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">/** 将字符后移一位 */</span></span><br><span class=\"line\">                System.arraycopy(buf, <span class=\"number\">0</span>, buf, <span class=\"number\">1</span>, i);</span><br><span class=\"line\">                buf[start] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">                buf[++i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[++i] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                end += <span class=\"number\">2</span>;</span><br><span class=\"line\">                buf[count - <span class=\"number\">2</span>] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                hasSpecial = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                newcount++;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">                    expandCapacity(newcount);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 包含特殊字符，将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符 */</span></span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">2</span>, end - i);</span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[++i] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                end++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[newcount - <span class=\"number\">1</span>] = <span class=\"string\">':'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化Boolean类型字段键值对\"><a href=\"#序列化Boolean类型字段键值对\" class=\"headerlink\" title=\"序列化Boolean类型字段键值对\"></a>序列化Boolean类型字段键值对</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldValue</span><span class=\"params\">(<span class=\"keyword\">char</span> seperator, String name, <span class=\"keyword\">boolean</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!quoteFieldNames) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果不需要输出双引号，则一次输出字段分隔符，字段名字，字段值 */</span></span><br><span class=\"line\">        write(seperator);</span><br><span class=\"line\">        writeFieldName(name);</span><br><span class=\"line\">        write(value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** true 占用4位， false 占用5位 */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> intSize = value ? <span class=\"number\">4</span> : <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nameLen = name.length();</span><br><span class=\"line\">    <span class=\"comment\">/** 输出总长度， 中间的4  代表 key 和 value 总共占用4个引号 */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + nameLen + <span class=\"number\">4</span> + intSize;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 依次输出字段分隔符，字段：字段值 */</span></span><br><span class=\"line\">            write(seperator);</span><br><span class=\"line\">            writeString(name);</span><br><span class=\"line\">            write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            write(value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出器writer为null触发扩容，扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = count;</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段分隔符，一般是, */</span></span><br><span class=\"line\">    buf[start] = seperator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nameEnd = start + nameLen + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段属性分隔符，一般是单引号或双引号 */</span></span><br><span class=\"line\">    buf[start + <span class=\"number\">1</span>] = keySeperator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段名称 */</span></span><br><span class=\"line\">    name.getChars(<span class=\"number\">0</span>, nameLen, buf, start + <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 字段名称添加分隔符，一般是单引号或双引号 */</span></span><br><span class=\"line\">    buf[nameEnd + <span class=\"number\">1</span>] = keySeperator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出boolean类型字符串值 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">        System.arraycopy(<span class=\"string\">\":true\"</span>.toCharArray(), <span class=\"number\">0</span>, buf, nameEnd + <span class=\"number\">2</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        System.arraycopy(<span class=\"string\">\":false\"</span>.toCharArray(), <span class=\"number\">0</span>, buf, nameEnd + <span class=\"number\">2</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化boolean类型的键值对属性，因为不涉及特殊字符，主要就是把原型序列化为字面量值。</p>\n<h3 id=\"序列化Int类型字段键值对\"><a href=\"#序列化Int类型字段键值对\" class=\"headerlink\" title=\"序列化Int类型字段键值对\"></a>序列化Int类型字段键值对</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFieldValue</span><span class=\"params\">(<span class=\"keyword\">char</span> seperator, String name, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == Integer.MIN_VALUE || !quoteFieldNames) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是整数最小值或不需要输出双引号，则一次输出字段分隔符，字段名字，字段值 */</span></span><br><span class=\"line\">        write(seperator);</span><br><span class=\"line\">        writeFieldName(name);</span><br><span class=\"line\">        writeInt(value);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> intSize = (value &lt; <span class=\"number\">0</span>) ? IOUtils.stringSize(-value) + <span class=\"number\">1</span> : IOUtils.stringSize(value);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nameLen = name.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + nameLen + <span class=\"number\">4</span> + intSize;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            write(seperator);</span><br><span class=\"line\">            writeFieldName(name);</span><br><span class=\"line\">            writeInt(value);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = count;</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段分隔符，一般是, */</span></span><br><span class=\"line\">    buf[start] = seperator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nameEnd = start + nameLen + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段属性分隔符，一般是单引号或双引号 */</span></span><br><span class=\"line\">    buf[start + <span class=\"number\">1</span>] = keySeperator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出字段名称 */</span></span><br><span class=\"line\">    name.getChars(<span class=\"number\">0</span>, nameLen, buf, start + <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[nameEnd + <span class=\"number\">1</span>] = keySeperator;</span><br><span class=\"line\">    buf[nameEnd + <span class=\"number\">2</span>] = <span class=\"string\">':'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出整数值，对整数转化成单字符 */</span></span><br><span class=\"line\">    IOUtils.getChars(value, count, buf);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化int类型的键值对属性，因为不涉及特殊字符，主要就是把原型序列化为字面量值。截止到现在，已经把核心<code>SerializWriter</code>类讲完了，剩余字段键值对极其类似<code>writeFieldValue</code> boolean和int等，因此无需冗余分析。因为序列化真正开始之前，这个\b类\b极其基础并且非常重要，因此花的时间较多。</p>\n"},{"title":"序列化（一）","subtitle":"fastjson核心功能包括序列化和反序列化，序列化的含义是将java对象转换成跨语言的json字符串。我认为从这里作为分析入口相对比较简单，第二章会从反序列化角度切入，会包含词法分析等较为复杂点展开。","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:03:19.000Z","_content":"\n## 概要\n\nfastjson核心功能包括序列化和反序列化，序列化的含义是将java对象转换成跨语言的json字符串。我认为从这里作为分析入口相对比较简单，第二章会从反序列化角度切入，会包含词法分析等较为复杂点展开。\n\n现在，我们正式开始咀嚼原汁原味的代码吧，我添加了详细的代码注释。\n\n## SerializeWriter成员变量\n\n`com.alibaba.fastjson.serializer.SerializeWriter`类非常重要，序列化输出都是通过转换底层操作，重要字段如下：\n\n```java\n    /** 字符类型buffer */\n    private final static ThreadLocal<char[]> bufLocal      = new ThreadLocal<char[]>();\n    /** 字节类型buffer */\n    private final static ThreadLocal<byte[]> bytesBufLocal = new ThreadLocal<byte[]>();\n\n    /** 存储序列化结果buffer */\n    protected char                           buf[];\n\n    /** buffer中包含的字符数 */\n    protected int                            count;\n\n    /** 序列化的特性，比如写枚举按照名字还是枚举值 */\n    protected int                            features;\n\n    /** 序列化输出器 */\n    private final Writer                     writer;\n\n    /** 是否使用单引号输出json */\n    protected boolean                        useSingleQuotes;\n    /** 输出字段是否追加 \"和：字符 */\n    protected boolean                        quoteFieldNames;\n    /** 是否对字段排序 */\n    protected boolean                        sortField;\n    /** 禁用字段循环引用探测 */\n    protected boolean                        disableCircularReferenceDetect;\n    protected boolean                        beanToArray;\n    /** 按照toString方式获取对象字面值 */\n    protected boolean                        writeNonStringValueAsString;\n    /** 如果字段默认值不输出，比如原型int，默认值0不输出 */\n    protected boolean                        notWriteDefaultValue;\n    /** 序列化枚举时使用枚举name */\n    protected boolean                        writeEnumUsingName;\n    /** 序列化枚举时使用枚举toString值 */\n    protected boolean                        writeEnumUsingToString;\n    protected boolean                        writeDirect;\n    /** key分隔符，默认单引号是'，双引号是\" */\n    protected char                           keySeperator;\n\n    protected int                            maxBufSize = -1;\n\n    protected boolean                        browserSecure;\n    protected long                           sepcialBits;\n```\n\n## SerializeWriter成员函数\n\n### 序列化整形数字\n\n```java\n    public void writeInt(int i) {\n        /** 如果是整数最小值，调用字符串函数输出到缓冲区*/\n        if (i == Integer.MIN_VALUE) {\n            write(\"-2147483648\");\n            return;\n        }\n\n        /** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */\n        int size = (i < 0) ? IOUtils.stringSize(-i) + 1 : IOUtils.stringSize(i);\n\n        int newcount = count + size;\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer == null) {\n                /** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n                expandCapacity(newcount);\n            } else {\n                char[] chars = new char[size];\n                /** 将整数i转换成单字符并存储到chars数组 */\n                IOUtils.getChars(i, size, chars);\n                /** 将chars字符数组内容写到buffer中*/\n                write(chars, 0, chars.length);\n                return;\n            }\n        }\n\n        /** 如果buffer空间够，直接将字符写到buffer中 */\n        IOUtils.getChars(i, newcount, buf);\n        /** 重新计数buffer中字符数 */\n        count = newcount;\n    }\n```\n\n其中值得提一下的是`IOUtils.getChars`，里面利用了`Integer.getChars(int i, int index, char[] buf)`,主要的思想是整数超过65536 进行除以100, 循环取出数字后两位，依次将个位和十位转换为单字符，如果整数小于等于65536，进行除以10，取出个位数字并转换单字符，getCharts中 `q = (i * 52429) >>> (16+3)`，可以理解为 (i乘以0.1), 但是精度更高。\n\n### 序列化长整形数字\n\n```java\n    public void writeLong(long i) {\n        boolean needQuotationMark = isEnabled(SerializerFeature.BrowserCompatible) //\n                                    && (!isEnabled(SerializerFeature.WriteClassName)) //\n                                    && (i > 9007199254740991L || i < -9007199254740991L);\n\n        if (i == Long.MIN_VALUE) {\n            if (needQuotationMark) write(\"\\\"-9223372036854775808\\\"\");\n            /** 如果是长整数最小值，调用字符串函数输出到缓冲区*/\n            else write(\"-9223372036854775808\");\n            return;\n        }\n\n        /** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */\n        int size = (i < 0) ? IOUtils.stringSize(-i) + 1 : IOUtils.stringSize(i);\n\n        int newcount = count + size;\n        if (needQuotationMark) newcount += 2;\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer == null) {\n                /** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n                expandCapacity(newcount);\n            } else {\n                char[] chars = new char[size];\n                /** 将长整数i转换成单字符并存储到chars数组 */\n                IOUtils.getChars(i, size, chars);\n                if (needQuotationMark) {\n                    write('\"');\n                    write(chars, 0, chars.length);\n                    write('\"');\n                } else {\n                    write(chars, 0, chars.length);\n                }\n                return;\n            }\n        }\n\n        /** 添加引号 */\n        if (needQuotationMark) {\n            buf[count] = '\"';\n            IOUtils.getChars(i, newcount - 1, buf);\n            buf[newcount - 1] = '\"';\n        } else {\n            IOUtils.getChars(i, newcount, buf);\n        }\n\n        count = newcount;\n    }\n```\n\n序列化长整型和整型非常类似，增加了双引号判断，采用用了和Integer转换为单字符同样的技巧。\n\n### 序列化浮点类型数字\n\n```java\n    public void writeDouble(double doubleValue, boolean checkWriteClassName) {\n        /** 如果doubleValue不合法或者是无穷数，调用writeNull */\n        if (Double.isNaN(doubleValue)\n                || Double.isInfinite(doubleValue)) {\n            writeNull();\n        } else {\n            /** 将高精度double转换为字符串 */\n            String doubleText = Double.toString(doubleValue);\n            /** 启动WriteNullNumberAsZero特性，会将结尾.0去除 */\n            if (isEnabled(SerializerFeature.WriteNullNumberAsZero) && doubleText.endsWith(\".0\")) {\n                doubleText = doubleText.substring(0, doubleText.length() - 2);\n            }\n\n            /** 调用字符串输出方法 */\n            write(doubleText);\n\n            /** 如果开启序列化WriteClassName特性，输出Double类型 */\n            if (checkWriteClassName && isEnabled(SerializerFeature.WriteClassName)) {\n                write('D');\n            }\n        }\n    }\n\n     public void writeFloat(float value, boolean checkWriteClassName) {\n        /** 如果value不合法或者是无穷数，调用writeNull */\n        if (Float.isNaN(value) //\n                || Float.isInfinite(value)) {\n            writeNull();\n        } else {\n            /** 将高精度float转换为字符串 */\n            String floatText= Float.toString(value);\n            /** 启动WriteNullNumberAsZero特性，会将结尾.0去除 */\n            if (isEnabled(SerializerFeature.WriteNullNumberAsZero) && floatText.endsWith(\".0\")) {\n                floatText = floatText.substring(0, floatText.length() - 2);\n            }\n            write(floatText);\n\n            /** 如果开启序列化WriteClassName特性，输出float类型 */\n            if (checkWriteClassName && isEnabled(SerializerFeature.WriteClassName)) {\n                write('F');\n            }\n        }\n    }\n```\n\n序列化浮点类型的基本思路是先转换为字符串，然后在输出到输出流中。\n\n### 序列化枚举类型\n\n```java\n    public void writeEnum(Enum<?> value) {\n        if (value == null) {\n            /** 如果枚举value为空，调用writeNull输出 */\n            writeNull();\n            return;\n        }\n\n        String strVal = null;\n        /** 如果开启序列化输出枚举名字作为属性值 */\n        if (writeEnumUsingName && !writeEnumUsingToString) {\n            strVal = value.name();\n        } else if (writeEnumUsingToString) {\n            /** 采用枚举默认toString方法作为属性值 */\n            strVal = value.toString();;\n        }\n\n        if (strVal != null) {\n            /** 如果开启引号特性，输出json包含引号的字符串 */\n            char quote = isEnabled(SerializerFeature.UseSingleQuotes) ? '\\'' : '\"';\n            write(quote);\n            write(strVal);\n            write(quote);\n        } else {\n            /** 输出枚举所在的索引号 */\n            writeInt(value.ordinal());\n        }\n    }\n```\n\n### 序列化单字符\n\n```java\n    public void write(int c) {\n        int newcount = count + 1;\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer == null) {\n                expandCapacity(newcount);\n            } else {\n                /** 强制流输出并刷新缓冲区 */\n                flush();\n                newcount = 1;\n            }\n        }\n        /** 存储单字符到buffer并更新计数 */\n        buf[count] = (char) c;\n        count = newcount;\n    }\n```\n\n### 序列化Null\n\n```java\n    public void writeNull() {\n        /** 调用输出字符串null */\n        write(\"null\");\n    }\n```\n\n### 序列化Boolean\n\n```java\n    public void write(boolean value) {\n        if (value) {\n            /** 输出true字符串 */\n            write(\"true\");\n        } else {\n            /** 输出false字符串 */\n            write(\"false\");\n        }\n    }\n```\n","source":"_posts/Fastjson源码解析-序列化(一)-序列化基础类型解析.md","raw":"---\ntitle: 序列化（一）\nsubtitle:  fastjson核心功能包括序列化和反序列化，序列化的含义是将java对象转换成跨语言的json字符串。我认为从这里作为分析入口相对比较简单，第二章会从反序列化角度切入，会包含词法分析等较为复杂点展开。\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n- Fastjson源码解析\ncategories:\n- Fastjson源码解析\ndate: 2018-09-30 23:03:19\n---\n\n## 概要\n\nfastjson核心功能包括序列化和反序列化，序列化的含义是将java对象转换成跨语言的json字符串。我认为从这里作为分析入口相对比较简单，第二章会从反序列化角度切入，会包含词法分析等较为复杂点展开。\n\n现在，我们正式开始咀嚼原汁原味的代码吧，我添加了详细的代码注释。\n\n## SerializeWriter成员变量\n\n`com.alibaba.fastjson.serializer.SerializeWriter`类非常重要，序列化输出都是通过转换底层操作，重要字段如下：\n\n```java\n    /** 字符类型buffer */\n    private final static ThreadLocal<char[]> bufLocal      = new ThreadLocal<char[]>();\n    /** 字节类型buffer */\n    private final static ThreadLocal<byte[]> bytesBufLocal = new ThreadLocal<byte[]>();\n\n    /** 存储序列化结果buffer */\n    protected char                           buf[];\n\n    /** buffer中包含的字符数 */\n    protected int                            count;\n\n    /** 序列化的特性，比如写枚举按照名字还是枚举值 */\n    protected int                            features;\n\n    /** 序列化输出器 */\n    private final Writer                     writer;\n\n    /** 是否使用单引号输出json */\n    protected boolean                        useSingleQuotes;\n    /** 输出字段是否追加 \"和：字符 */\n    protected boolean                        quoteFieldNames;\n    /** 是否对字段排序 */\n    protected boolean                        sortField;\n    /** 禁用字段循环引用探测 */\n    protected boolean                        disableCircularReferenceDetect;\n    protected boolean                        beanToArray;\n    /** 按照toString方式获取对象字面值 */\n    protected boolean                        writeNonStringValueAsString;\n    /** 如果字段默认值不输出，比如原型int，默认值0不输出 */\n    protected boolean                        notWriteDefaultValue;\n    /** 序列化枚举时使用枚举name */\n    protected boolean                        writeEnumUsingName;\n    /** 序列化枚举时使用枚举toString值 */\n    protected boolean                        writeEnumUsingToString;\n    protected boolean                        writeDirect;\n    /** key分隔符，默认单引号是'，双引号是\" */\n    protected char                           keySeperator;\n\n    protected int                            maxBufSize = -1;\n\n    protected boolean                        browserSecure;\n    protected long                           sepcialBits;\n```\n\n## SerializeWriter成员函数\n\n### 序列化整形数字\n\n```java\n    public void writeInt(int i) {\n        /** 如果是整数最小值，调用字符串函数输出到缓冲区*/\n        if (i == Integer.MIN_VALUE) {\n            write(\"-2147483648\");\n            return;\n        }\n\n        /** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */\n        int size = (i < 0) ? IOUtils.stringSize(-i) + 1 : IOUtils.stringSize(i);\n\n        int newcount = count + size;\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer == null) {\n                /** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n                expandCapacity(newcount);\n            } else {\n                char[] chars = new char[size];\n                /** 将整数i转换成单字符并存储到chars数组 */\n                IOUtils.getChars(i, size, chars);\n                /** 将chars字符数组内容写到buffer中*/\n                write(chars, 0, chars.length);\n                return;\n            }\n        }\n\n        /** 如果buffer空间够，直接将字符写到buffer中 */\n        IOUtils.getChars(i, newcount, buf);\n        /** 重新计数buffer中字符数 */\n        count = newcount;\n    }\n```\n\n其中值得提一下的是`IOUtils.getChars`，里面利用了`Integer.getChars(int i, int index, char[] buf)`,主要的思想是整数超过65536 进行除以100, 循环取出数字后两位，依次将个位和十位转换为单字符，如果整数小于等于65536，进行除以10，取出个位数字并转换单字符，getCharts中 `q = (i * 52429) >>> (16+3)`，可以理解为 (i乘以0.1), 但是精度更高。\n\n### 序列化长整形数字\n\n```java\n    public void writeLong(long i) {\n        boolean needQuotationMark = isEnabled(SerializerFeature.BrowserCompatible) //\n                                    && (!isEnabled(SerializerFeature.WriteClassName)) //\n                                    && (i > 9007199254740991L || i < -9007199254740991L);\n\n        if (i == Long.MIN_VALUE) {\n            if (needQuotationMark) write(\"\\\"-9223372036854775808\\\"\");\n            /** 如果是长整数最小值，调用字符串函数输出到缓冲区*/\n            else write(\"-9223372036854775808\");\n            return;\n        }\n\n        /** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */\n        int size = (i < 0) ? IOUtils.stringSize(-i) + 1 : IOUtils.stringSize(i);\n\n        int newcount = count + size;\n        if (needQuotationMark) newcount += 2;\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer == null) {\n                /** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n                expandCapacity(newcount);\n            } else {\n                char[] chars = new char[size];\n                /** 将长整数i转换成单字符并存储到chars数组 */\n                IOUtils.getChars(i, size, chars);\n                if (needQuotationMark) {\n                    write('\"');\n                    write(chars, 0, chars.length);\n                    write('\"');\n                } else {\n                    write(chars, 0, chars.length);\n                }\n                return;\n            }\n        }\n\n        /** 添加引号 */\n        if (needQuotationMark) {\n            buf[count] = '\"';\n            IOUtils.getChars(i, newcount - 1, buf);\n            buf[newcount - 1] = '\"';\n        } else {\n            IOUtils.getChars(i, newcount, buf);\n        }\n\n        count = newcount;\n    }\n```\n\n序列化长整型和整型非常类似，增加了双引号判断，采用用了和Integer转换为单字符同样的技巧。\n\n### 序列化浮点类型数字\n\n```java\n    public void writeDouble(double doubleValue, boolean checkWriteClassName) {\n        /** 如果doubleValue不合法或者是无穷数，调用writeNull */\n        if (Double.isNaN(doubleValue)\n                || Double.isInfinite(doubleValue)) {\n            writeNull();\n        } else {\n            /** 将高精度double转换为字符串 */\n            String doubleText = Double.toString(doubleValue);\n            /** 启动WriteNullNumberAsZero特性，会将结尾.0去除 */\n            if (isEnabled(SerializerFeature.WriteNullNumberAsZero) && doubleText.endsWith(\".0\")) {\n                doubleText = doubleText.substring(0, doubleText.length() - 2);\n            }\n\n            /** 调用字符串输出方法 */\n            write(doubleText);\n\n            /** 如果开启序列化WriteClassName特性，输出Double类型 */\n            if (checkWriteClassName && isEnabled(SerializerFeature.WriteClassName)) {\n                write('D');\n            }\n        }\n    }\n\n     public void writeFloat(float value, boolean checkWriteClassName) {\n        /** 如果value不合法或者是无穷数，调用writeNull */\n        if (Float.isNaN(value) //\n                || Float.isInfinite(value)) {\n            writeNull();\n        } else {\n            /** 将高精度float转换为字符串 */\n            String floatText= Float.toString(value);\n            /** 启动WriteNullNumberAsZero特性，会将结尾.0去除 */\n            if (isEnabled(SerializerFeature.WriteNullNumberAsZero) && floatText.endsWith(\".0\")) {\n                floatText = floatText.substring(0, floatText.length() - 2);\n            }\n            write(floatText);\n\n            /** 如果开启序列化WriteClassName特性，输出float类型 */\n            if (checkWriteClassName && isEnabled(SerializerFeature.WriteClassName)) {\n                write('F');\n            }\n        }\n    }\n```\n\n序列化浮点类型的基本思路是先转换为字符串，然后在输出到输出流中。\n\n### 序列化枚举类型\n\n```java\n    public void writeEnum(Enum<?> value) {\n        if (value == null) {\n            /** 如果枚举value为空，调用writeNull输出 */\n            writeNull();\n            return;\n        }\n\n        String strVal = null;\n        /** 如果开启序列化输出枚举名字作为属性值 */\n        if (writeEnumUsingName && !writeEnumUsingToString) {\n            strVal = value.name();\n        } else if (writeEnumUsingToString) {\n            /** 采用枚举默认toString方法作为属性值 */\n            strVal = value.toString();;\n        }\n\n        if (strVal != null) {\n            /** 如果开启引号特性，输出json包含引号的字符串 */\n            char quote = isEnabled(SerializerFeature.UseSingleQuotes) ? '\\'' : '\"';\n            write(quote);\n            write(strVal);\n            write(quote);\n        } else {\n            /** 输出枚举所在的索引号 */\n            writeInt(value.ordinal());\n        }\n    }\n```\n\n### 序列化单字符\n\n```java\n    public void write(int c) {\n        int newcount = count + 1;\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer == null) {\n                expandCapacity(newcount);\n            } else {\n                /** 强制流输出并刷新缓冲区 */\n                flush();\n                newcount = 1;\n            }\n        }\n        /** 存储单字符到buffer并更新计数 */\n        buf[count] = (char) c;\n        count = newcount;\n    }\n```\n\n### 序列化Null\n\n```java\n    public void writeNull() {\n        /** 调用输出字符串null */\n        write(\"null\");\n    }\n```\n\n### 序列化Boolean\n\n```java\n    public void write(boolean value) {\n        if (value) {\n            /** 输出true字符串 */\n            write(\"true\");\n        } else {\n            /** 输出false字符串 */\n            write(\"false\");\n        }\n    }\n```\n","slug":"Fastjson源码解析-序列化(一)-序列化基础类型解析","published":1,"updated":"2018-10-12T02:23:32.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4esy0007xat84mcqikl2","content":"<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>fastjson核心功能包括序列化和反序列化，序列化的含义是将java对象转换成跨语言的json字符串。我认为从这里作为分析入口相对比较简单，第二章会从反序列化角度切入，会包含词法分析等较为复杂点展开。</p>\n<p>现在，我们正式开始咀嚼原汁原味的代码吧，我添加了详细的代码注释。</p>\n<h2 id=\"SerializeWriter成员变量\"><a href=\"#SerializeWriter成员变量\" class=\"headerlink\" title=\"SerializeWriter成员变量\"></a>SerializeWriter成员变量</h2><p><code>com.alibaba.fastjson.serializer.SerializeWriter</code>类非常重要，序列化输出都是通过转换底层操作，重要字段如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 字符类型buffer */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> ThreadLocal&lt;<span class=\"keyword\">char</span>[]&gt; bufLocal      = <span class=\"keyword\">new</span> ThreadLocal&lt;<span class=\"keyword\">char</span>[]&gt;();</span><br><span class=\"line\"><span class=\"comment\">/** 字节类型buffer */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> ThreadLocal&lt;<span class=\"keyword\">byte</span>[]&gt; bytesBufLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;<span class=\"keyword\">byte</span>[]&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 存储序列化结果buffer */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">char</span>                           buf[];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** buffer中包含的字符数 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            count;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 序列化的特性，比如写枚举按照名字还是枚举值 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            features;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 序列化输出器 */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Writer                     writer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 是否使用单引号输出json */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        useSingleQuotes;</span><br><span class=\"line\"><span class=\"comment\">/** 输出字段是否追加 \"和：字符 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        quoteFieldNames;</span><br><span class=\"line\"><span class=\"comment\">/** 是否对字段排序 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        sortField;</span><br><span class=\"line\"><span class=\"comment\">/** 禁用字段循环引用探测 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        disableCircularReferenceDetect;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        beanToArray;</span><br><span class=\"line\"><span class=\"comment\">/** 按照toString方式获取对象字面值 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        writeNonStringValueAsString;</span><br><span class=\"line\"><span class=\"comment\">/** 如果字段默认值不输出，比如原型int，默认值0不输出 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        notWriteDefaultValue;</span><br><span class=\"line\"><span class=\"comment\">/** 序列化枚举时使用枚举name */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        writeEnumUsingName;</span><br><span class=\"line\"><span class=\"comment\">/** 序列化枚举时使用枚举toString值 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        writeEnumUsingToString;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        writeDirect;</span><br><span class=\"line\"><span class=\"comment\">/** key分隔符，默认单引号是'，双引号是\" */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">char</span>                           keySeperator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            maxBufSize = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        browserSecure;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span>                           sepcialBits;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SerializeWriter成员函数\"><a href=\"#SerializeWriter成员函数\" class=\"headerlink\" title=\"SerializeWriter成员函数\"></a>SerializeWriter成员函数</h2><h3 id=\"序列化整形数字\"><a href=\"#序列化整形数字\" class=\"headerlink\" title=\"序列化整形数字\"></a>序列化整形数字</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeInt</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果是整数最小值，调用字符串函数输出到缓冲区*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">        write(<span class=\"string\">\"-2147483648\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = (i &lt; <span class=\"number\">0</span>) ? IOUtils.stringSize(-i) + <span class=\"number\">1</span> : IOUtils.stringSize(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + size;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[size];</span><br><span class=\"line\">            <span class=\"comment\">/** 将整数i转换成单字符并存储到chars数组 */</span></span><br><span class=\"line\">            IOUtils.getChars(i, size, chars);</span><br><span class=\"line\">            <span class=\"comment\">/** 将chars字符数组内容写到buffer中*/</span></span><br><span class=\"line\">            write(chars, <span class=\"number\">0</span>, chars.length);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果buffer空间够，直接将字符写到buffer中 */</span></span><br><span class=\"line\">    IOUtils.getChars(i, newcount, buf);</span><br><span class=\"line\">    <span class=\"comment\">/** 重新计数buffer中字符数 */</span></span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中值得提一下的是<code>IOUtils.getChars</code>，里面利用了<code>Integer.getChars(int i, int index, char[] buf)</code>,主要的思想是整数超过65536 进行除以100, 循环取出数字后两位，依次将个位和十位转换为单字符，如果整数小于等于65536，进行除以10，取出个位数字并转换单字符，getCharts中 <code>q = (i * 52429) &gt;&gt;&gt; (16+3)</code>，可以理解为 (i乘以0.1), 但是精度更高。</p>\n<h3 id=\"序列化长整形数字\"><a href=\"#序列化长整形数字\" class=\"headerlink\" title=\"序列化长整形数字\"></a>序列化长整形数字</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeLong</span><span class=\"params\">(<span class=\"keyword\">long</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> needQuotationMark = isEnabled(SerializerFeature.BrowserCompatible) <span class=\"comment\">//</span></span><br><span class=\"line\">                                &amp;&amp; (!isEnabled(SerializerFeature.WriteClassName)) <span class=\"comment\">//</span></span><br><span class=\"line\">                                &amp;&amp; (i &gt; <span class=\"number\">9007199254740991L</span> || i &lt; -<span class=\"number\">9007199254740991L</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == Long.MIN_VALUE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needQuotationMark) write(<span class=\"string\">\"\\\"-9223372036854775808\\\"\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是长整数最小值，调用字符串函数输出到缓冲区*/</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> write(<span class=\"string\">\"-9223372036854775808\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = (i &lt; <span class=\"number\">0</span>) ? IOUtils.stringSize(-i) + <span class=\"number\">1</span> : IOUtils.stringSize(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + size;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needQuotationMark) newcount += <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[size];</span><br><span class=\"line\">            <span class=\"comment\">/** 将长整数i转换成单字符并存储到chars数组 */</span></span><br><span class=\"line\">            IOUtils.getChars(i, size, chars);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (needQuotationMark) &#123;</span><br><span class=\"line\">                write(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\">                write(chars, <span class=\"number\">0</span>, chars.length);</span><br><span class=\"line\">                write(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                write(chars, <span class=\"number\">0</span>, chars.length);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 添加引号 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needQuotationMark) &#123;</span><br><span class=\"line\">        buf[count] = <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">        IOUtils.getChars(i, newcount - <span class=\"number\">1</span>, buf);</span><br><span class=\"line\">        buf[newcount - <span class=\"number\">1</span>] = <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        IOUtils.getChars(i, newcount, buf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化长整型和整型非常类似，增加了双引号判断，采用用了和Integer转换为单字符同样的技巧。</p>\n<h3 id=\"序列化浮点类型数字\"><a href=\"#序列化浮点类型数字\" class=\"headerlink\" title=\"序列化浮点类型数字\"></a>序列化浮点类型数字</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeDouble</span><span class=\"params\">(<span class=\"keyword\">double</span> doubleValue, <span class=\"keyword\">boolean</span> checkWriteClassName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果doubleValue不合法或者是无穷数，调用writeNull */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Double.isNaN(doubleValue)</span><br><span class=\"line\">            || Double.isInfinite(doubleValue)) &#123;</span><br><span class=\"line\">        writeNull();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 将高精度double转换为字符串 */</span></span><br><span class=\"line\">        String doubleText = Double.toString(doubleValue);</span><br><span class=\"line\">        <span class=\"comment\">/** 启动WriteNullNumberAsZero特性，会将结尾.0去除 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.WriteNullNumberAsZero) &amp;&amp; doubleText.endsWith(<span class=\"string\">\".0\"</span>)) &#123;</span><br><span class=\"line\">            doubleText = doubleText.substring(<span class=\"number\">0</span>, doubleText.length() - <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 调用字符串输出方法 */</span></span><br><span class=\"line\">        write(doubleText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果开启序列化WriteClassName特性，输出Double类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkWriteClassName &amp;&amp; isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">            write(<span class=\"string\">'D'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFloat</span><span class=\"params\">(<span class=\"keyword\">float</span> value, <span class=\"keyword\">boolean</span> checkWriteClassName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果value不合法或者是无穷数，调用writeNull */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Float.isNaN(value) <span class=\"comment\">//</span></span><br><span class=\"line\">            || Float.isInfinite(value)) &#123;</span><br><span class=\"line\">        writeNull();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 将高精度float转换为字符串 */</span></span><br><span class=\"line\">        String floatText= Float.toString(value);</span><br><span class=\"line\">        <span class=\"comment\">/** 启动WriteNullNumberAsZero特性，会将结尾.0去除 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.WriteNullNumberAsZero) &amp;&amp; floatText.endsWith(<span class=\"string\">\".0\"</span>)) &#123;</span><br><span class=\"line\">            floatText = floatText.substring(<span class=\"number\">0</span>, floatText.length() - <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        write(floatText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果开启序列化WriteClassName特性，输出float类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkWriteClassName &amp;&amp; isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">            write(<span class=\"string\">'F'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化浮点类型的基本思路是先转换为字符串，然后在输出到输出流中。</p>\n<h3 id=\"序列化枚举类型\"><a href=\"#序列化枚举类型\" class=\"headerlink\" title=\"序列化枚举类型\"></a>序列化枚举类型</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeEnum</span><span class=\"params\">(Enum&lt;?&gt; value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果枚举value为空，调用writeNull输出 */</span></span><br><span class=\"line\">        writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String strVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果开启序列化输出枚举名字作为属性值 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writeEnumUsingName &amp;&amp; !writeEnumUsingToString) &#123;</span><br><span class=\"line\">        strVal = value.name();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (writeEnumUsingToString) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 采用枚举默认toString方法作为属性值 */</span></span><br><span class=\"line\">        strVal = value.toString();;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strVal != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果开启引号特性，输出json包含引号的字符串 */</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> quote = isEnabled(SerializerFeature.UseSingleQuotes) ? <span class=\"string\">'\\''</span> : <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">        write(quote);</span><br><span class=\"line\">        write(strVal);</span><br><span class=\"line\">        write(quote);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出枚举所在的索引号 */</span></span><br><span class=\"line\">        writeInt(value.ordinal());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化单字符\"><a href=\"#序列化单字符\" class=\"headerlink\" title=\"序列化单字符\"></a>序列化单字符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 强制流输出并刷新缓冲区 */</span></span><br><span class=\"line\">            flush();</span><br><span class=\"line\">            newcount = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 存储单字符到buffer并更新计数 */</span></span><br><span class=\"line\">    buf[count] = (<span class=\"keyword\">char</span>) c;</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化Null\"><a href=\"#序列化Null\" class=\"headerlink\" title=\"序列化Null\"></a>序列化Null</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeNull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 调用输出字符串null */</span></span><br><span class=\"line\">    write(<span class=\"string\">\"null\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化Boolean\"><a href=\"#序列化Boolean\" class=\"headerlink\" title=\"序列化Boolean\"></a>序列化Boolean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">boolean</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出true字符串 */</span></span><br><span class=\"line\">        write(<span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出false字符串 */</span></span><br><span class=\"line\">        write(<span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>fastjson核心功能包括序列化和反序列化，序列化的含义是将java对象转换成跨语言的json字符串。我认为从这里作为分析入口相对比较简单，第二章会从反序列化角度切入，会包含词法分析等较为复杂点展开。</p>\n<p>现在，我们正式开始咀嚼原汁原味的代码吧，我添加了详细的代码注释。</p>\n<h2 id=\"SerializeWriter成员变量\"><a href=\"#SerializeWriter成员变量\" class=\"headerlink\" title=\"SerializeWriter成员变量\"></a>SerializeWriter成员变量</h2><p><code>com.alibaba.fastjson.serializer.SerializeWriter</code>类非常重要，序列化输出都是通过转换底层操作，重要字段如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 字符类型buffer */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> ThreadLocal&lt;<span class=\"keyword\">char</span>[]&gt; bufLocal      = <span class=\"keyword\">new</span> ThreadLocal&lt;<span class=\"keyword\">char</span>[]&gt;();</span><br><span class=\"line\"><span class=\"comment\">/** 字节类型buffer */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> ThreadLocal&lt;<span class=\"keyword\">byte</span>[]&gt; bytesBufLocal = <span class=\"keyword\">new</span> ThreadLocal&lt;<span class=\"keyword\">byte</span>[]&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 存储序列化结果buffer */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">char</span>                           buf[];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** buffer中包含的字符数 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            count;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 序列化的特性，比如写枚举按照名字还是枚举值 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            features;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 序列化输出器 */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Writer                     writer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 是否使用单引号输出json */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        useSingleQuotes;</span><br><span class=\"line\"><span class=\"comment\">/** 输出字段是否追加 \"和：字符 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        quoteFieldNames;</span><br><span class=\"line\"><span class=\"comment\">/** 是否对字段排序 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        sortField;</span><br><span class=\"line\"><span class=\"comment\">/** 禁用字段循环引用探测 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        disableCircularReferenceDetect;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        beanToArray;</span><br><span class=\"line\"><span class=\"comment\">/** 按照toString方式获取对象字面值 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        writeNonStringValueAsString;</span><br><span class=\"line\"><span class=\"comment\">/** 如果字段默认值不输出，比如原型int，默认值0不输出 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        notWriteDefaultValue;</span><br><span class=\"line\"><span class=\"comment\">/** 序列化枚举时使用枚举name */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        writeEnumUsingName;</span><br><span class=\"line\"><span class=\"comment\">/** 序列化枚举时使用枚举toString值 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        writeEnumUsingToString;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        writeDirect;</span><br><span class=\"line\"><span class=\"comment\">/** key分隔符，默认单引号是'，双引号是\" */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">char</span>                           keySeperator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            maxBufSize = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span>                        browserSecure;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">long</span>                           sepcialBits;</span><br></pre></td></tr></table></figure>\n<h2 id=\"SerializeWriter成员函数\"><a href=\"#SerializeWriter成员函数\" class=\"headerlink\" title=\"SerializeWriter成员函数\"></a>SerializeWriter成员函数</h2><h3 id=\"序列化整形数字\"><a href=\"#序列化整形数字\" class=\"headerlink\" title=\"序列化整形数字\"></a>序列化整形数字</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeInt</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果是整数最小值，调用字符串函数输出到缓冲区*/</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == Integer.MIN_VALUE) &#123;</span><br><span class=\"line\">        write(<span class=\"string\">\"-2147483648\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = (i &lt; <span class=\"number\">0</span>) ? IOUtils.stringSize(-i) + <span class=\"number\">1</span> : IOUtils.stringSize(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + size;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[size];</span><br><span class=\"line\">            <span class=\"comment\">/** 将整数i转换成单字符并存储到chars数组 */</span></span><br><span class=\"line\">            IOUtils.getChars(i, size, chars);</span><br><span class=\"line\">            <span class=\"comment\">/** 将chars字符数组内容写到buffer中*/</span></span><br><span class=\"line\">            write(chars, <span class=\"number\">0</span>, chars.length);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果buffer空间够，直接将字符写到buffer中 */</span></span><br><span class=\"line\">    IOUtils.getChars(i, newcount, buf);</span><br><span class=\"line\">    <span class=\"comment\">/** 重新计数buffer中字符数 */</span></span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中值得提一下的是<code>IOUtils.getChars</code>，里面利用了<code>Integer.getChars(int i, int index, char[] buf)</code>,主要的思想是整数超过65536 进行除以100, 循环取出数字后两位，依次将个位和十位转换为单字符，如果整数小于等于65536，进行除以10，取出个位数字并转换单字符，getCharts中 <code>q = (i * 52429) &gt;&gt;&gt; (16+3)</code>，可以理解为 (i乘以0.1), 但是精度更高。</p>\n<h3 id=\"序列化长整形数字\"><a href=\"#序列化长整形数字\" class=\"headerlink\" title=\"序列化长整形数字\"></a>序列化长整形数字</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeLong</span><span class=\"params\">(<span class=\"keyword\">long</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> needQuotationMark = isEnabled(SerializerFeature.BrowserCompatible) <span class=\"comment\">//</span></span><br><span class=\"line\">                                &amp;&amp; (!isEnabled(SerializerFeature.WriteClassName)) <span class=\"comment\">//</span></span><br><span class=\"line\">                                &amp;&amp; (i &gt; <span class=\"number\">9007199254740991L</span> || i &lt; -<span class=\"number\">9007199254740991L</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == Long.MIN_VALUE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needQuotationMark) write(<span class=\"string\">\"\\\"-9223372036854775808\\\"\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是长整数最小值，调用字符串函数输出到缓冲区*/</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> write(<span class=\"string\">\"-9223372036854775808\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 根据数字判断占用的位数，负数会多一位用于存储字符`-` */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = (i &lt; <span class=\"number\">0</span>) ? IOUtils.stringSize(-i) + <span class=\"number\">1</span> : IOUtils.stringSize(i);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + size;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needQuotationMark) newcount += <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[size];</span><br><span class=\"line\">            <span class=\"comment\">/** 将长整数i转换成单字符并存储到chars数组 */</span></span><br><span class=\"line\">            IOUtils.getChars(i, size, chars);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (needQuotationMark) &#123;</span><br><span class=\"line\">                write(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\">                write(chars, <span class=\"number\">0</span>, chars.length);</span><br><span class=\"line\">                write(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                write(chars, <span class=\"number\">0</span>, chars.length);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 添加引号 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needQuotationMark) &#123;</span><br><span class=\"line\">        buf[count] = <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">        IOUtils.getChars(i, newcount - <span class=\"number\">1</span>, buf);</span><br><span class=\"line\">        buf[newcount - <span class=\"number\">1</span>] = <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        IOUtils.getChars(i, newcount, buf);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化长整型和整型非常类似，增加了双引号判断，采用用了和Integer转换为单字符同样的技巧。</p>\n<h3 id=\"序列化浮点类型数字\"><a href=\"#序列化浮点类型数字\" class=\"headerlink\" title=\"序列化浮点类型数字\"></a>序列化浮点类型数字</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeDouble</span><span class=\"params\">(<span class=\"keyword\">double</span> doubleValue, <span class=\"keyword\">boolean</span> checkWriteClassName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果doubleValue不合法或者是无穷数，调用writeNull */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Double.isNaN(doubleValue)</span><br><span class=\"line\">            || Double.isInfinite(doubleValue)) &#123;</span><br><span class=\"line\">        writeNull();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 将高精度double转换为字符串 */</span></span><br><span class=\"line\">        String doubleText = Double.toString(doubleValue);</span><br><span class=\"line\">        <span class=\"comment\">/** 启动WriteNullNumberAsZero特性，会将结尾.0去除 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.WriteNullNumberAsZero) &amp;&amp; doubleText.endsWith(<span class=\"string\">\".0\"</span>)) &#123;</span><br><span class=\"line\">            doubleText = doubleText.substring(<span class=\"number\">0</span>, doubleText.length() - <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 调用字符串输出方法 */</span></span><br><span class=\"line\">        write(doubleText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果开启序列化WriteClassName特性，输出Double类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkWriteClassName &amp;&amp; isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">            write(<span class=\"string\">'D'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFloat</span><span class=\"params\">(<span class=\"keyword\">float</span> value, <span class=\"keyword\">boolean</span> checkWriteClassName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果value不合法或者是无穷数，调用writeNull */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Float.isNaN(value) <span class=\"comment\">//</span></span><br><span class=\"line\">            || Float.isInfinite(value)) &#123;</span><br><span class=\"line\">        writeNull();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 将高精度float转换为字符串 */</span></span><br><span class=\"line\">        String floatText= Float.toString(value);</span><br><span class=\"line\">        <span class=\"comment\">/** 启动WriteNullNumberAsZero特性，会将结尾.0去除 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.WriteNullNumberAsZero) &amp;&amp; floatText.endsWith(<span class=\"string\">\".0\"</span>)) &#123;</span><br><span class=\"line\">            floatText = floatText.substring(<span class=\"number\">0</span>, floatText.length() - <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        write(floatText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果开启序列化WriteClassName特性，输出float类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkWriteClassName &amp;&amp; isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">            write(<span class=\"string\">'F'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化浮点类型的基本思路是先转换为字符串，然后在输出到输出流中。</p>\n<h3 id=\"序列化枚举类型\"><a href=\"#序列化枚举类型\" class=\"headerlink\" title=\"序列化枚举类型\"></a>序列化枚举类型</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeEnum</span><span class=\"params\">(Enum&lt;?&gt; value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果枚举value为空，调用writeNull输出 */</span></span><br><span class=\"line\">        writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    String strVal = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果开启序列化输出枚举名字作为属性值 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writeEnumUsingName &amp;&amp; !writeEnumUsingToString) &#123;</span><br><span class=\"line\">        strVal = value.name();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (writeEnumUsingToString) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 采用枚举默认toString方法作为属性值 */</span></span><br><span class=\"line\">        strVal = value.toString();;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strVal != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果开启引号特性，输出json包含引号的字符串 */</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> quote = isEnabled(SerializerFeature.UseSingleQuotes) ? <span class=\"string\">'\\''</span> : <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">        write(quote);</span><br><span class=\"line\">        write(strVal);</span><br><span class=\"line\">        write(quote);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出枚举所在的索引号 */</span></span><br><span class=\"line\">        writeInt(value.ordinal());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化单字符\"><a href=\"#序列化单字符\" class=\"headerlink\" title=\"序列化单字符\"></a>序列化单字符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 强制流输出并刷新缓冲区 */</span></span><br><span class=\"line\">            flush();</span><br><span class=\"line\">            newcount = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 存储单字符到buffer并更新计数 */</span></span><br><span class=\"line\">    buf[count] = (<span class=\"keyword\">char</span>) c;</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化Null\"><a href=\"#序列化Null\" class=\"headerlink\" title=\"序列化Null\"></a>序列化Null</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeNull</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 调用输出字符串null */</span></span><br><span class=\"line\">    write(<span class=\"string\">\"null\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化Boolean\"><a href=\"#序列化Boolean\" class=\"headerlink\" title=\"序列化Boolean\"></a>序列化Boolean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">boolean</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出true字符串 */</span></span><br><span class=\"line\">        write(<span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出false字符串 */</span></span><br><span class=\"line\">        write(<span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"序列化（二）","subtitle":"序列化字节和字符串解析，主要讲解SerializeWriter成员函数","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:04:14.000Z","_content":"\n## SerializeWriter成员函数\n\n### 序列化16进制字节数组\n\n```java\n    public void writeHex(byte[] bytes) {\n        /** 计算总共字符长度, 乘以2 代表一个字符要占用2字节, 3代表要添加 x 和 前后添加' */\n        int newcount = count + bytes.length * 2 + 3;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                char[] chars = new char[bytes.length + 3];\n                int pos = 0;\n                chars[pos++] = 'x';\n                chars[pos++] = '\\'';\n\n                for (int i = 0; i < bytes.length; ++i) {\n                    byte b = bytes[i];\n\n                    int a = b & 0xFF;\n                    /** 取字节的高四位 1111 0000*/\n                    int b0 = a >> 4;\n                    /** 取字节的低四位 0000 1111*/\n                    int b1 = a & 0xf;\n\n                    /** 索引低索引存储字节高位\n                     *  如果4位表示的数字是 0~9, 转换为ascii的 0~9\n                     *  如果4位表示的不是数字, 转换为16进制ascii码字符\n                     */\n                    chars[pos++] = (char) (b0 + (b0 < 10 ? 48 : 55));\n                    chars[pos++] = (char) (b1 + (b1 < 10 ? 48 : 55));\n                }\n                chars[pos++] = '\\'';\n                try {\n                    writer.write(chars);\n                } catch (IOException ex) {\n                    throw new JSONException(\"writeBytes error.\", ex);\n                }\n                return;\n            }\n            /** buffer容量不够并且输出器为空，触发扩容 */\n            expandCapacity(newcount);\n        }\n\n        buf[count++] = 'x';\n        buf[count++] = '\\'';\n\n        for (int i = 0; i < bytes.length; ++i) {\n            byte b = bytes[i];\n\n            int a = b & 0xFF;\n            /** 取字节的高四位 */\n            int b0 = a >> 4;\n            /** 取字节的低四位 */\n            int b1 = a & 0xf;\n\n            /** 索引低索引存储字节高位\n             *  如果4位表示的数字是 0~9, 转换为ascii的 0~9\n             *  如果4位表示的不是数字, 转换为16进制ascii码字符\n             */\n            buf[count++] = (char) (b0 + (b0 < 10 ? 48 : 55));\n            buf[count++] = (char) (b1 + (b1 < 10 ? 48 : 55));\n        }\n        buf[count++] = '\\'';\n    }\n```\n\n`writeHex` 这个序列化方法主要对16进制的自己转换为占用2个ascii码字符，添加单引号和x前缀。\n\n### 序列化byte字节数组\n\n```java\n   public void writeByteArray(byte[] bytes) {\n        if (isEnabled(SerializerFeature.WriteClassName.mask)) {\n            /** 如果开启序列化特性WriteClassName，直接写16进制字符 */\n            writeHex(bytes);\n            return;\n        }\n\n        int bytesLen = bytes.length;\n        final char quote = useSingleQuotes ? '\\'' : '\"';\n        if (bytesLen == 0) {\n            String emptyString = useSingleQuotes ? \"''\" : \"\\\"\\\"\";\n            /** 如果字节数组长度为0，输出空白字符 */\n            write(emptyString);\n            return;\n        }\n\n        final char[] CA = IOUtils.CA;\n\n        /** 验证长度是24bit位整数倍 */\n        int eLen = (bytesLen / 3) * 3;\n        /** base64 编码字符长度\n         *\n         *  base64 :\n         *  第一步，将每三个字节作为一组，一共是24个二进制位。\n         *  第二步，将这24个二进制位分为四组，每个组有6个二进制位。\n         *  第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。\n         *  第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。\n         *\n         *  ref: http://www.ruanyifeng.com/blog/2008/06/base64.html\n         */\n        int charsLen = ((bytesLen - 1) / 3 + 1) << 2;\n        // char[] chars = new char[charsLen];\n        int offset = count;\n        int newcount = count + charsLen + 2;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                write(quote);\n\n                for (int s = 0; s < eLen;) {\n                    /** 三个字节为一组, 扩展为四个字节 */\n                    int i = (bytes[s++] & 0xff) << 16 | (bytes[s++] & 0xff) << 8 | (bytes[s++] & 0xff);\n\n                    write(CA[(i >>> 18) & 0x3f]);\n                    write(CA[(i >>> 12) & 0x3f]);\n                    write(CA[(i >>> 6) & 0x3f]);\n                    /** 填充00 */\n                    write(CA[i & 0x3f]);\n                }\n\n                /** 对齐并编码剩余不足3个字节为一组的数据 */\n                // Pad and encode last bits if source isn't even 24 bits.\n                int left = bytesLen - eLen; // 0 - 2.\n                if (left > 0) {\n\n                    /**\n                     * a) 1个字节的情况：\n                     * 将这1字节8位二进制，每6位分成2组，最后一组除了前面加00，后面加上0000，\n                     * 这样得到 两位的Base64编码， 在末尾补上2个\"=\"号\n                     *\n                     * b) 2个字节的情况：\n                     * 将这2字节的一共16个二进制位，每6位分成3组，最后一组除了前面加00，后面也要加00，\n                     * 这样得到 3位的Base64编码， 在末尾补上\"=\"号\n                     *\n                     *\n                     * 如果只有1个字节，按照前面规则a)\n                     * 第1组是6位，第2组后面4个0， 因此应该左移 10 = 6 + 4\n                     *\n                     * 如果只有2个字节，按照前面规则b)\n                     * 第1个字节左移 10 位 加上 第2个字节左移 2 位补0即可\n                     */\n                    int i = ((bytes[eLen] & 0xff) << 10) | (left == 2 ? ((bytes[bytesLen - 1] & 0xff) << 2) : 0);\n\n                    /** 扩展为四个字节 */\n                    write(CA[i >> 12]);\n                    write(CA[(i >>> 6) & 0x3f]);\n                    write(left == 2 ? CA[i & 0x3f] : '=');\n                    write('=');\n                }\n\n                write(quote);\n                return;\n            }\n            expandCapacity(newcount);\n        }\n        count = newcount;\n        buf[offset++] = quote;\n\n        // Encode even 24-bits\n        for (int s = 0, d = offset; s < eLen;) {\n            /** 三个字节为一组, 扩展为四个字节 */\n            int i = (bytes[s++] & 0xff) << 16 | (bytes[s++] & 0xff) << 8 | (bytes[s++] & 0xff);\n\n            // Encode the int into four chars\n            buf[d++] = CA[(i >>> 18) & 0x3f];\n            buf[d++] = CA[(i >>> 12) & 0x3f];\n            buf[d++] = CA[(i >>> 6) & 0x3f];\n            /** 填充00 */\n            buf[d++] = CA[i & 0x3f];\n        }\n\n        /** 对齐并编码剩余不足3个字节为一组的数据 */\n        int left = bytesLen - eLen; // 0 - 2.\n        if (left > 0) {\n            // Prepare the int\n            int i = ((bytes[eLen] & 0xff) << 10) | (left == 2 ? ((bytes[bytesLen - 1] & 0xff) << 2) : 0);\n\n            /** 扩展为四个字节 */\n            buf[newcount - 5] = CA[i >> 12];\n            buf[newcount - 4] = CA[(i >>> 6) & 0x3f];\n            buf[newcount - 3] = left == 2 ? CA[i & 0x3f] : '=';\n            buf[newcount - 2] = '=';\n        }\n        buf[newcount - 1] = quote;\n    }\n```\n\n`writeByteArray`序列化字节数组实际上就是做了base64编码转换，代码添加了详尽的注释帮助理解。\n\n### 序列化字符串\n\n```java\n    public void write(String str, int off, int len) {\n        /** 计算总共字符串长度 */\n        int newcount = count + len;\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer == null) {\n                expandCapacity(newcount);\n            } else {\n                /**\n                 * 如果字符串str超过缓冲区大小, 进行循环拷贝\n                 */\n                do {\n                    /** 计算当前buffer剩余容纳字符数 */\n                    int rest = buf.length - count;\n                    /** 将字符串str[off, off + rest) 拷贝到buf[count, ...]中*/\n                    str.getChars(off, off + rest, buf, count);\n                    count = buf.length;\n                    /** 强制刷新输出流，会重置count = 0 */\n                    flush();\n                    /** 计算剩余需要拷贝的字符数量 */\n                    len -= rest;\n                    /** 剩余要拷贝字符在str中偏移量(索引) */\n                    off += rest;\n                } while (len > buf.length);\n                newcount = len;\n            }\n        }\n        /** 存储空间充足，直接将str[off, off + len) 拷贝到buf[count, ...]中*/\n        str.getChars(off, off + len, buf, count);\n        count = newcount;\n    }\n```\n\n序列化字符串`write(string)`,最终都会转化为上面形式`write(string, 0, string.length)`。\n\n### 序列化字符数组\n\n```java\n    public void write(char c[], int off, int len) {\n        if (off < 0 //\n            || off > c.length //\n            || len < 0 //\n            || off + len > c.length //\n            || off + len < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n\n        /** 计算总共字符串长度 */\n        int newcount = count + len;\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer == null) {\n                expandCapacity(newcount);\n            } else {\n                /**\n                 * 如果字符数组c超过缓冲区大小, 进行循环拷贝\n                 */\n                do {\n                    /** 计算当前buffer剩余容纳字符数 */\n                    int rest = buf.length - count;\n                    /** c[off, off + rest) 拷贝到buf[count, ...]中*/\n                    System.arraycopy(c, off, buf, count, rest);\n                    count = buf.length;\n                    /** 强制刷新输出流，会重置count = 0 */\n                    flush();\n                    /** 计算剩余需要拷贝的字符数量 */\n                    len -= rest;\n                    /** 剩余要拷贝字符在c中偏移量(索引) */\n                    off += rest;\n                } while (len > buf.length);\n                newcount = len;\n            }\n        }\n        System.arraycopy(c, off, buf, count, len);\n        count = newcount;\n    }\n```\n\n### 序列化列表字符串\n\n```java\n    public void write(List<String> list) {\n        if (list.isEmpty()) {\n            /** 空字符列表，输出[]字符串 */\n            write(\"[]\");\n            return;\n        }\n\n        int offset = count;\n        final int initOffset = offset;\n        for (int i = 0, list_size = list.size(); i < list_size; ++i) {\n            /** 循环获取列表中包含的字符串 */\n            String text = list.get(i);\n\n            boolean hasSpecial = false;\n            if (text == null) {\n                /** list包含特殊的null值 */\n                hasSpecial = true;\n            } else {\n                for (int j = 0, len = text.length(); j < len; ++j) {\n                    char ch = text.charAt(j);\n                    /** 包含指定特殊字符 */\n                    if (hasSpecial = (ch < ' ' //\n                                      || ch > '~' //\n                                      || ch == '\"' //\n                                      || ch == '\\\\')) {\n                        break;\n                    }\n                }\n            }\n\n            if (hasSpecial) {\n                count = initOffset;\n                write('[');\n                for (int j = 0; j < list.size(); ++j) {\n                    text = list.get(j);\n                    /** 每个字符用,隔开输出 */\n                    if (j != 0) {\n                        write(',');\n                    }\n\n                    if (text == null) {\n                        /** 字符串为空，直接输出null字符串 */\n                        write(\"null\");\n                    } else {\n                        /** 使用双引号输出，并且处理特殊字符, 下文有分析 */\n                        writeStringWithDoubleQuote(text, (char) 0);\n                    }\n                }\n                write(']');\n                return;\n            }\n\n            /** 计算新的字符占用空间，额外3个字符用于存储 \",\" */\n            int newcount = offset + text.length() + 3;\n            if (i == list.size() - 1) {\n                newcount++;\n            }\n            /** 如果当前存储空间不够*/\n            if (newcount > buf.length) {\n                count = offset;\n                /** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n                expandCapacity(newcount);\n            }\n\n            if (i == 0) {\n                buf[offset++] = '[';\n            } else {\n                buf[offset++] = ',';\n            }\n            buf[offset++] = '\"';\n            /** 拷贝text字符串到buffer数组中 */\n            text.getChars(0, text.length(), buf, offset);\n            offset += text.length();\n            buf[offset++] = '\"';\n        }\n        /** 最终构造列表形式 [\"element\", \"element\", ...] */\n        buf[offset++] = ']';\n        count = offset;\n    }\n```\n\n序列化字符串会转化成`[“element”, \"element\", ...]`格式。如果列表字符串中包含特殊字符，调用特化版本`writeStringWithDoubleQuote(text, (char) 0)`。\n\n### 序列化包含特殊字符\b字符串\n\n```java\n    public void writeStringWithDoubleQuote(String text, final char seperator) {\n        if (text == null) {\n            /** 如果字符换为空，输出null字符串 */\n            writeNull();\n            if (seperator != 0) {\n                /** 如果分隔符不为空白字符' '，输出分隔符 */\n                write(seperator);\n            }\n            return;\n        }\n\n        int len = text.length();\n        int newcount = count + len + 2;\n        if (seperator != 0) {\n            newcount++;\n        }\n\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer != null) {\n                /** 写双引号字符 */\n                write('\"');\n\n                for (int i = 0; i < text.length(); ++i) {\n                    /** 循环提取字符串中字符 */\n                    char ch = text.charAt(i);\n\n                    if (isEnabled(SerializerFeature.BrowserSecure)) {\n                       if (ch == '(' || ch == ')' || ch == '<' || ch == '>') {\n                            /** ascii转换成native编码 */\n                            write('\\\\');\n                            write('u');\n                            write(IOUtils.DIGITS[(ch >>> 12) & 15]);\n                            write(IOUtils.DIGITS[(ch >>> 8) & 15]);\n                            write(IOUtils.DIGITS[(ch >>> 4) & 15]);\n                            write(IOUtils.DIGITS[ch & 15]);\n                            continue;\n                        }\n                    }\n\n                    if (isEnabled(SerializerFeature.BrowserCompatible)) {\n                        if (ch == '\\b'      //  退格\n                            || ch == '\\f'   //  分页\n                            || ch == '\\n'   //  换行\n                            || ch == '\\r'   //  回车\n                            || ch == '\\t'   //  tab\n                            || ch == '\"'    //  双引号\n                            || ch == '/'    //  左反斜杠\n                            || ch == '\\\\') {//  单引号\n                            /** 输出转义字符 + 字符ascii码 */\n                            write('\\\\'); //  右反斜杠\n                            write(replaceChars[(int) ch]);\n                            continue;\n                        }\n\n                        if (ch < 32) {\n                            /** ascii转换成native编码 */\n                            write('\\\\');\n                            write('u');\n                            write('0');\n                            write('0');\n                            write(IOUtils.ASCII_CHARS[ch * 2]);\n                            write(IOUtils.ASCII_CHARS[ch * 2 + 1]);\n                            continue;\n                        }\n\n                        if (ch >= 127) {\n                            /** ascii转换成native编码 */\n                            write('\\\\');\n                            write('u');\n                            write(IOUtils.DIGITS[(ch >>> 12) & 15]);\n                            write(IOUtils.DIGITS[(ch >>> 8) & 15]);\n                            write(IOUtils.DIGITS[(ch >>> 4) & 15]);\n                            write(IOUtils.DIGITS[ch & 15]);\n                            continue;\n                        }\n                    } else {\n                        /** ascii转换成native编码 */\n                        if (ch < IOUtils.specicalFlags_doubleQuotes.length\n                            && IOUtils.specicalFlags_doubleQuotes[ch] != 0 //\n                            || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\n                            write('\\\\');\n                            if (IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\n                                write('u');\n                                write(IOUtils.DIGITS[ch >>> 12 & 15]);\n                                write(IOUtils.DIGITS[ch >>> 8 & 15]);\n                                write(IOUtils.DIGITS[ch >>> 4 & 15]);\n                                write(IOUtils.DIGITS[ch & 15]);\n                            } else {\n                                write(IOUtils.replaceChars[ch]);\n                            }\n                            continue;\n                        }\n                    }\n\n                    /** 非特殊字符，直接输出 */\n                    write(ch);\n                }\n\n                /** 字符串结束 */\n                write('\"');\n                if (seperator != 0) {\n                    write(seperator);\n                }\n                return;\n            }\n            /** buffer容量不够并且输出器为空，触发扩容 */\n            expandCapacity(newcount);\n        }\n\n        int start = count + 1;\n        int end = start + len;\n\n        buf[count] = '\\\"';\n        /** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */\n        text.getChars(0, len, buf, start);\n\n        count = newcount;\n\n        if (isEnabled(SerializerFeature.BrowserCompatible)) {\n            int lastSpecialIndex = -1;\n\n            for (int i = start; i < end; ++i) {\n                /** 循环提取字符串中字符 */\n                char ch = buf[i];\n\n                if (ch == '\"' //\n                    || ch == '/' //\n                    || ch == '\\\\') {\n                    /** 记录指定字符最后出现的位置 */\n                    lastSpecialIndex = i;\n                    newcount += 1;\n                    continue;\n                }\n\n                if (ch == '\\b' //\n                    || ch == '\\f' //\n                    || ch == '\\n' //\n                    || ch == '\\r' //\n                    || ch == '\\t') {\n                    /** 记录指定字符最后出现的位置 */\n                    lastSpecialIndex = i;\n                    newcount += 1;\n                    continue;\n                }\n\n                if (ch < 32) {\n                    lastSpecialIndex = i;\n                    newcount += 5;\n                    continue;\n                }\n\n                if (ch >= 127) {\n                    lastSpecialIndex = i;\n                    newcount += 5;\n                    continue;\n                }\n            }\n\n            /** 如果存储空间不足，触发到(1.5倍buffer大小+1) */\n            if (newcount > buf.length) {\n                expandCapacity(newcount);\n            }\n            count = newcount;\n\n            /** 逆向从指定特殊字符开始遍历 */\n            for (int i = lastSpecialIndex; i >= start; --i) {\n                char ch = buf[i];\n\n                if (ch == '\\b' //\n                    || ch == '\\f'//\n                    || ch == '\\n' //\n                    || ch == '\\r' //\n                    || ch == '\\t') {\n                    /** 将字符后移一位，插入转译字符\\ */\n                    System.arraycopy(buf, i + 1, buf, i + 2, end - i - 1);\n                    buf[i] = '\\\\';\n                    /** 将特殊字符转换成普通单字符 */\n                    buf[i + 1] = replaceChars[(int) ch];\n                    end += 1;\n                    continue;\n                }\n\n                if (ch == '\"' //\n                    || ch == '/' //\n                    || ch == '\\\\') {\n                    /** 和上面处理一致，不需要单独替换成普通字符 */\n                    System.arraycopy(buf, i + 1, buf, i + 2, end - i - 1);\n                    buf[i] = '\\\\';\n                    buf[i + 1] = ch;\n                    end += 1;\n                    continue;\n                }\n\n                if (ch < 32) {\n                    System.arraycopy(buf, i + 1, buf, i + 6, end - i - 1);\n                    /** ascii转换成native编码 */\n                    buf[i] = '\\\\';\n                    buf[i + 1] = 'u';\n                    buf[i + 2] = '0';\n                    buf[i + 3] = '0';\n                    buf[i + 4] = IOUtils.ASCII_CHARS[ch * 2];\n                    buf[i + 5] = IOUtils.ASCII_CHARS[ch * 2 + 1];\n                    end += 5;\n                    continue;\n                }\n\n                if (ch >= 127) {\n                    System.arraycopy(buf, i + 1, buf, i + 6, end - i - 1);\n                    /** ascii转换成native编码 */\n                    buf[i] = '\\\\';\n                    buf[i + 1] = 'u';\n                    buf[i + 2] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                    buf[i + 3] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                    buf[i + 4] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                    buf[i + 5] = IOUtils.DIGITS[ch & 15];\n                    end += 5;\n                }\n            }\n\n            /** 追加引用符号 */\n            if (seperator != 0) {\n                buf[count - 2] = '\\\"';\n                buf[count - 1] = seperator;\n            } else {\n                buf[count - 1] = '\\\"';\n            }\n\n            return;\n        }\n\n        int specialCount = 0;\n        int lastSpecialIndex = -1;\n        int firstSpecialIndex = -1;\n        char lastSpecial = '\\0';\n\n        for (int i = start; i < end; ++i) {\n            char ch = buf[i];\n\n            if (ch >= ']') { //   93\n                /** 特殊字符参考：http://www.mokuge.com/tool/asciito16/ */\n                if (ch >= 0x7F // 127\n                        && (ch == '\\u2028' //\n                        || ch == '\\u2029'  //\n                        || ch < 0xA0)) {   // 160 [空格]\n                    if (firstSpecialIndex == -1) {\n                        firstSpecialIndex = i;\n                    }\n\n                    specialCount++;\n                    lastSpecialIndex = i;\n                    lastSpecial = ch;\n                    newcount += 4;\n                }\n                continue;\n            }\n\n            boolean special = (ch < 64 && (sepcialBits & (1L << ch)) != 0) || ch == '\\\\';\n            if (special) {\n                specialCount++;\n                lastSpecialIndex = i;\n                lastSpecial = ch;\n\n                if (ch == '('\n                        || ch == ')'\n                        || ch == '<'\n                        || ch == '>'\n                        || (ch < IOUtils.specicalFlags_doubleQuotes.length //\n                    && IOUtils.specicalFlags_doubleQuotes[ch] == 4) //\n                ) {\n                    newcount += 4;\n                }\n\n                if (firstSpecialIndex == -1) {\n                    firstSpecialIndex = i;\n                }\n            }\n        }\n\n        if (specialCount > 0) {\n            newcount += specialCount;\n            /** 包含特殊字符并且buffer空间不够，触发扩容 */\n            if (newcount > buf.length) {\n                expandCapacity(newcount);\n            }\n            count = newcount;\n\n            /** 将特殊字符转换成native编码，目的是节省存储空间*/\n            if (specialCount == 1) {\n                // 行分隔符\n                if (lastSpecial == '\\u2028') {\n                    int srcPos = lastSpecialIndex + 1;\n                    int destPos = lastSpecialIndex + 6;\n                    int LengthOfCopy = end - lastSpecialIndex - 1;\n                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\n                    buf[lastSpecialIndex] = '\\\\';\n                    buf[++lastSpecialIndex] = 'u';\n                    buf[++lastSpecialIndex] = '2';\n                    buf[++lastSpecialIndex] = '0';\n                    buf[++lastSpecialIndex] = '2';\n                    buf[++lastSpecialIndex] = '8';\n                }\n                // 段落分隔符\n                else if (lastSpecial == '\\u2029') {\n                    int srcPos = lastSpecialIndex + 1;\n                    int destPos = lastSpecialIndex + 6;\n                    int LengthOfCopy = end - lastSpecialIndex - 1;\n                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\n                    buf[lastSpecialIndex] = '\\\\';\n                    buf[++lastSpecialIndex] = 'u';\n                    buf[++lastSpecialIndex] = '2';\n                    buf[++lastSpecialIndex] = '0';\n                    buf[++lastSpecialIndex] = '2';\n                    buf[++lastSpecialIndex] = '9';\n                } else if (lastSpecial == '(' || lastSpecial == ')' || lastSpecial == '<' || lastSpecial == '>') {\n                    int srcPos = lastSpecialIndex + 1;\n                    int destPos = lastSpecialIndex + 6;\n                    int LengthOfCopy = end - lastSpecialIndex - 1;\n                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\n                    buf[lastSpecialIndex] = '\\\\';\n                    buf[++lastSpecialIndex] = 'u';\n\n                    final char ch = lastSpecial;\n                    buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                    buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                    buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                    buf[++lastSpecialIndex] = IOUtils.DIGITS[ch & 15];\n                } else {\n                    final char ch = lastSpecial;\n                    if (ch < IOUtils.specicalFlags_doubleQuotes.length //\n                        && IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\n                        int srcPos = lastSpecialIndex + 1;\n                        int destPos = lastSpecialIndex + 6;\n                        int LengthOfCopy = end - lastSpecialIndex - 1;\n                        System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\n\n                        int bufIndex = lastSpecialIndex;\n                        buf[bufIndex++] = '\\\\';\n                        buf[bufIndex++] = 'u';\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\n                    } else {\n                        int srcPos = lastSpecialIndex + 1;\n                        int destPos = lastSpecialIndex + 2;\n                        int LengthOfCopy = end - lastSpecialIndex - 1;\n                        System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\n                        buf[lastSpecialIndex] = '\\\\';\n                        buf[++lastSpecialIndex] = replaceChars[(int) ch];\n                    }\n                }\n            } else if (specialCount > 1) {\n                int textIndex = firstSpecialIndex - start;\n                int bufIndex = firstSpecialIndex;\n                for (int i = textIndex; i < text.length(); ++i) {\n                    char ch = text.charAt(i);\n\n                    /** 将特殊字符转换成native编码，目的是节省存储空间*/ \n                    if (browserSecure && (ch == '('\n                            || ch == ')'\n                            || ch == '<'\n                            || ch == '>')) {\n                        buf[bufIndex++] = '\\\\';\n                        buf[bufIndex++] = 'u';\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\n                        end += 5;\n                    } else if (ch < IOUtils.specicalFlags_doubleQuotes.length //\n                        && IOUtils.specicalFlags_doubleQuotes[ch] != 0 //\n                        || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\n                        buf[bufIndex++] = '\\\\';\n                        if (IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\n                            buf[bufIndex++] = 'u';\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\n                            end += 5;\n                        } else {\n                            buf[bufIndex++] = replaceChars[(int) ch];\n                            end++;\n                        }\n                    } else {\n                        // 行分隔符 、段落分隔符\n                        if (ch == '\\u2028' || ch == '\\u2029') {\n                            buf[bufIndex++] = '\\\\';\n                            buf[bufIndex++] = 'u';\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\n                            end += 5;\n                        } else {\n                            buf[bufIndex++] = ch;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (seperator != 0) {\n            buf[count - 2] = '\\\"';\n            buf[count - 1] = seperator;\n        } else {\n            buf[count - 1] = '\\\"';\n        }\n    }\n```\n\nwriteStringWithDoubleQuote方法实现实在是太长了，这个方法主要做了以下几件事情：\n\n1. \b\b如果开启序列化BrowserCompatible特性，执行ascii转换成native编码，节省空间。\n2. 如果输出器writer不为空，会自动触发\bbuffer扩容`(原有容量1.5倍+1)`。\n\n\b另外一个针对特殊字符的字符串序列化\b方法writeStringWithDoubleQuote(char[] text, final char seperator)，因为和writeStringWithDoubleQuote(String text, final char seperator)版本极其类似，所以不再冗余分析。\n\n序列化字符串的方法包括添加单引号的版本，详细请参考 writeStringWithSingleQuote ：\n\n```java\n    protected void writeStringWithSingleQuote(String text) {\n        if (text == null) {\n            int newcount = count + 4;\n            if (newcount > buf.length) {\n                expandCapacity(newcount);\n            }\n            /** 如果字符串为null，输出\"null\"字符串 */\n            \"null\".getChars(0, 4, buf, count);\n            count = newcount;\n            return;\n        }\n\n        int len = text.length();\n        int newcount = count + len + 2;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                /** 使用单引号输出字符串值 */\n                write('\\'');\n                for (int i = 0; i < text.length(); ++i) {\n                    char ch = text.charAt(i);\n                    if (ch <= 13 || ch == '\\\\' || ch == '\\'' //\n                        || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\n                        /** 如果包含特殊字符 或者 单字符'\\' ''' ，添加转译并且替换为普通字符*/\n                        write('\\\\');\n                        write(replaceChars[(int) ch]);\n                    } else {\n                        write(ch);\n                    }\n                }\n                write('\\'');\n                return;\n            }\n            /** buffer容量不够并且输出器为空，触发扩容 */\n            expandCapacity(newcount);\n        }\n\n        int start = count + 1;\n        int end = start + len;\n\n        buf[count] = '\\'';\n        /** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */\n        text.getChars(0, len, buf, start);\n        count = newcount;\n\n        int specialCount = 0;\n        int lastSpecialIndex = -1;\n        char lastSpecial = '\\0';\n        for (int i = start; i < end; ++i) {\n            char ch = buf[i];\n            if (ch <= 13 || ch == '\\\\' || ch == '\\'' //\n                || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\n                /** 记录特殊字符个数和最后一个特殊字符索引 */\n                specialCount++;\n                lastSpecialIndex = i;\n                lastSpecial = ch;\n            }\n        }\n\n        newcount += specialCount;\n        if (newcount > buf.length) {\n            expandCapacity(newcount);\n        }\n        count = newcount;\n\n        if (specialCount == 1) {\n            /** 将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符*/\n            System.arraycopy(buf, lastSpecialIndex + 1, buf, lastSpecialIndex + 2, end - lastSpecialIndex - 1);\n            buf[lastSpecialIndex] = '\\\\';\n            buf[++lastSpecialIndex] = replaceChars[(int) lastSpecial];\n        } else if (specialCount > 1) {\n            System.arraycopy(buf, lastSpecialIndex + 1, buf, lastSpecialIndex + 2, end - lastSpecialIndex - 1);\n            buf[lastSpecialIndex] = '\\\\';\n            buf[++lastSpecialIndex] = replaceChars[(int) lastSpecial];\n            end++;\n            for (int i = lastSpecialIndex - 2; i >= start; --i) {\n                char ch = buf[i];\n\n                if (ch <= 13 || ch == '\\\\' || ch == '\\'' //\n                    || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\n                    /** 将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符*/\n                    System.arraycopy(buf, i + 1, buf, i + 2, end - i - 1);\n                    buf[i] = '\\\\';\n                    buf[i + 1] = replaceChars[(int) ch];\n                    end++;\n                }\n            }\n        }\n\n        /** 字符串结尾添加单引号引用 */\n        buf[count - 1] = '\\'';\n    }\n```\n\nwriteStringWithSingleQuote这个方法主要做了以下几件事情：\n\n1. \b\b针对特殊字符，添加转译字符并且替换特殊字符为普通字符\n2. 如果输出器writer不为空，会自动触发\bbuffer扩容`(原有容量1.5倍+1)`。\n\n\b另外一个针对特殊字符的字符串序列化\b方法`writeStringWithSingleQuote(char[])`，因为和`writeStringWithSingleQuote(String)`版本极其类似，所以不再冗余分析。\n","source":"_posts/Fastjson源码解析-序列化(二)-序列化字节和字符串解析.md","raw":"---\ntitle: 序列化（二）\nsubtitle:  序列化字节和字符串解析，主要讲解SerializeWriter成员函数\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n- Fastjson源码解析\ncategories:\n- Fastjson源码解析\ndate: 2018-09-30 23:04:14\n---\n\n## SerializeWriter成员函数\n\n### 序列化16进制字节数组\n\n```java\n    public void writeHex(byte[] bytes) {\n        /** 计算总共字符长度, 乘以2 代表一个字符要占用2字节, 3代表要添加 x 和 前后添加' */\n        int newcount = count + bytes.length * 2 + 3;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                char[] chars = new char[bytes.length + 3];\n                int pos = 0;\n                chars[pos++] = 'x';\n                chars[pos++] = '\\'';\n\n                for (int i = 0; i < bytes.length; ++i) {\n                    byte b = bytes[i];\n\n                    int a = b & 0xFF;\n                    /** 取字节的高四位 1111 0000*/\n                    int b0 = a >> 4;\n                    /** 取字节的低四位 0000 1111*/\n                    int b1 = a & 0xf;\n\n                    /** 索引低索引存储字节高位\n                     *  如果4位表示的数字是 0~9, 转换为ascii的 0~9\n                     *  如果4位表示的不是数字, 转换为16进制ascii码字符\n                     */\n                    chars[pos++] = (char) (b0 + (b0 < 10 ? 48 : 55));\n                    chars[pos++] = (char) (b1 + (b1 < 10 ? 48 : 55));\n                }\n                chars[pos++] = '\\'';\n                try {\n                    writer.write(chars);\n                } catch (IOException ex) {\n                    throw new JSONException(\"writeBytes error.\", ex);\n                }\n                return;\n            }\n            /** buffer容量不够并且输出器为空，触发扩容 */\n            expandCapacity(newcount);\n        }\n\n        buf[count++] = 'x';\n        buf[count++] = '\\'';\n\n        for (int i = 0; i < bytes.length; ++i) {\n            byte b = bytes[i];\n\n            int a = b & 0xFF;\n            /** 取字节的高四位 */\n            int b0 = a >> 4;\n            /** 取字节的低四位 */\n            int b1 = a & 0xf;\n\n            /** 索引低索引存储字节高位\n             *  如果4位表示的数字是 0~9, 转换为ascii的 0~9\n             *  如果4位表示的不是数字, 转换为16进制ascii码字符\n             */\n            buf[count++] = (char) (b0 + (b0 < 10 ? 48 : 55));\n            buf[count++] = (char) (b1 + (b1 < 10 ? 48 : 55));\n        }\n        buf[count++] = '\\'';\n    }\n```\n\n`writeHex` 这个序列化方法主要对16进制的自己转换为占用2个ascii码字符，添加单引号和x前缀。\n\n### 序列化byte字节数组\n\n```java\n   public void writeByteArray(byte[] bytes) {\n        if (isEnabled(SerializerFeature.WriteClassName.mask)) {\n            /** 如果开启序列化特性WriteClassName，直接写16进制字符 */\n            writeHex(bytes);\n            return;\n        }\n\n        int bytesLen = bytes.length;\n        final char quote = useSingleQuotes ? '\\'' : '\"';\n        if (bytesLen == 0) {\n            String emptyString = useSingleQuotes ? \"''\" : \"\\\"\\\"\";\n            /** 如果字节数组长度为0，输出空白字符 */\n            write(emptyString);\n            return;\n        }\n\n        final char[] CA = IOUtils.CA;\n\n        /** 验证长度是24bit位整数倍 */\n        int eLen = (bytesLen / 3) * 3;\n        /** base64 编码字符长度\n         *\n         *  base64 :\n         *  第一步，将每三个字节作为一组，一共是24个二进制位。\n         *  第二步，将这24个二进制位分为四组，每个组有6个二进制位。\n         *  第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。\n         *  第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。\n         *\n         *  ref: http://www.ruanyifeng.com/blog/2008/06/base64.html\n         */\n        int charsLen = ((bytesLen - 1) / 3 + 1) << 2;\n        // char[] chars = new char[charsLen];\n        int offset = count;\n        int newcount = count + charsLen + 2;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                write(quote);\n\n                for (int s = 0; s < eLen;) {\n                    /** 三个字节为一组, 扩展为四个字节 */\n                    int i = (bytes[s++] & 0xff) << 16 | (bytes[s++] & 0xff) << 8 | (bytes[s++] & 0xff);\n\n                    write(CA[(i >>> 18) & 0x3f]);\n                    write(CA[(i >>> 12) & 0x3f]);\n                    write(CA[(i >>> 6) & 0x3f]);\n                    /** 填充00 */\n                    write(CA[i & 0x3f]);\n                }\n\n                /** 对齐并编码剩余不足3个字节为一组的数据 */\n                // Pad and encode last bits if source isn't even 24 bits.\n                int left = bytesLen - eLen; // 0 - 2.\n                if (left > 0) {\n\n                    /**\n                     * a) 1个字节的情况：\n                     * 将这1字节8位二进制，每6位分成2组，最后一组除了前面加00，后面加上0000，\n                     * 这样得到 两位的Base64编码， 在末尾补上2个\"=\"号\n                     *\n                     * b) 2个字节的情况：\n                     * 将这2字节的一共16个二进制位，每6位分成3组，最后一组除了前面加00，后面也要加00，\n                     * 这样得到 3位的Base64编码， 在末尾补上\"=\"号\n                     *\n                     *\n                     * 如果只有1个字节，按照前面规则a)\n                     * 第1组是6位，第2组后面4个0， 因此应该左移 10 = 6 + 4\n                     *\n                     * 如果只有2个字节，按照前面规则b)\n                     * 第1个字节左移 10 位 加上 第2个字节左移 2 位补0即可\n                     */\n                    int i = ((bytes[eLen] & 0xff) << 10) | (left == 2 ? ((bytes[bytesLen - 1] & 0xff) << 2) : 0);\n\n                    /** 扩展为四个字节 */\n                    write(CA[i >> 12]);\n                    write(CA[(i >>> 6) & 0x3f]);\n                    write(left == 2 ? CA[i & 0x3f] : '=');\n                    write('=');\n                }\n\n                write(quote);\n                return;\n            }\n            expandCapacity(newcount);\n        }\n        count = newcount;\n        buf[offset++] = quote;\n\n        // Encode even 24-bits\n        for (int s = 0, d = offset; s < eLen;) {\n            /** 三个字节为一组, 扩展为四个字节 */\n            int i = (bytes[s++] & 0xff) << 16 | (bytes[s++] & 0xff) << 8 | (bytes[s++] & 0xff);\n\n            // Encode the int into four chars\n            buf[d++] = CA[(i >>> 18) & 0x3f];\n            buf[d++] = CA[(i >>> 12) & 0x3f];\n            buf[d++] = CA[(i >>> 6) & 0x3f];\n            /** 填充00 */\n            buf[d++] = CA[i & 0x3f];\n        }\n\n        /** 对齐并编码剩余不足3个字节为一组的数据 */\n        int left = bytesLen - eLen; // 0 - 2.\n        if (left > 0) {\n            // Prepare the int\n            int i = ((bytes[eLen] & 0xff) << 10) | (left == 2 ? ((bytes[bytesLen - 1] & 0xff) << 2) : 0);\n\n            /** 扩展为四个字节 */\n            buf[newcount - 5] = CA[i >> 12];\n            buf[newcount - 4] = CA[(i >>> 6) & 0x3f];\n            buf[newcount - 3] = left == 2 ? CA[i & 0x3f] : '=';\n            buf[newcount - 2] = '=';\n        }\n        buf[newcount - 1] = quote;\n    }\n```\n\n`writeByteArray`序列化字节数组实际上就是做了base64编码转换，代码添加了详尽的注释帮助理解。\n\n### 序列化字符串\n\n```java\n    public void write(String str, int off, int len) {\n        /** 计算总共字符串长度 */\n        int newcount = count + len;\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer == null) {\n                expandCapacity(newcount);\n            } else {\n                /**\n                 * 如果字符串str超过缓冲区大小, 进行循环拷贝\n                 */\n                do {\n                    /** 计算当前buffer剩余容纳字符数 */\n                    int rest = buf.length - count;\n                    /** 将字符串str[off, off + rest) 拷贝到buf[count, ...]中*/\n                    str.getChars(off, off + rest, buf, count);\n                    count = buf.length;\n                    /** 强制刷新输出流，会重置count = 0 */\n                    flush();\n                    /** 计算剩余需要拷贝的字符数量 */\n                    len -= rest;\n                    /** 剩余要拷贝字符在str中偏移量(索引) */\n                    off += rest;\n                } while (len > buf.length);\n                newcount = len;\n            }\n        }\n        /** 存储空间充足，直接将str[off, off + len) 拷贝到buf[count, ...]中*/\n        str.getChars(off, off + len, buf, count);\n        count = newcount;\n    }\n```\n\n序列化字符串`write(string)`,最终都会转化为上面形式`write(string, 0, string.length)`。\n\n### 序列化字符数组\n\n```java\n    public void write(char c[], int off, int len) {\n        if (off < 0 //\n            || off > c.length //\n            || len < 0 //\n            || off + len > c.length //\n            || off + len < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return;\n        }\n\n        /** 计算总共字符串长度 */\n        int newcount = count + len;\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer == null) {\n                expandCapacity(newcount);\n            } else {\n                /**\n                 * 如果字符数组c超过缓冲区大小, 进行循环拷贝\n                 */\n                do {\n                    /** 计算当前buffer剩余容纳字符数 */\n                    int rest = buf.length - count;\n                    /** c[off, off + rest) 拷贝到buf[count, ...]中*/\n                    System.arraycopy(c, off, buf, count, rest);\n                    count = buf.length;\n                    /** 强制刷新输出流，会重置count = 0 */\n                    flush();\n                    /** 计算剩余需要拷贝的字符数量 */\n                    len -= rest;\n                    /** 剩余要拷贝字符在c中偏移量(索引) */\n                    off += rest;\n                } while (len > buf.length);\n                newcount = len;\n            }\n        }\n        System.arraycopy(c, off, buf, count, len);\n        count = newcount;\n    }\n```\n\n### 序列化列表字符串\n\n```java\n    public void write(List<String> list) {\n        if (list.isEmpty()) {\n            /** 空字符列表，输出[]字符串 */\n            write(\"[]\");\n            return;\n        }\n\n        int offset = count;\n        final int initOffset = offset;\n        for (int i = 0, list_size = list.size(); i < list_size; ++i) {\n            /** 循环获取列表中包含的字符串 */\n            String text = list.get(i);\n\n            boolean hasSpecial = false;\n            if (text == null) {\n                /** list包含特殊的null值 */\n                hasSpecial = true;\n            } else {\n                for (int j = 0, len = text.length(); j < len; ++j) {\n                    char ch = text.charAt(j);\n                    /** 包含指定特殊字符 */\n                    if (hasSpecial = (ch < ' ' //\n                                      || ch > '~' //\n                                      || ch == '\"' //\n                                      || ch == '\\\\')) {\n                        break;\n                    }\n                }\n            }\n\n            if (hasSpecial) {\n                count = initOffset;\n                write('[');\n                for (int j = 0; j < list.size(); ++j) {\n                    text = list.get(j);\n                    /** 每个字符用,隔开输出 */\n                    if (j != 0) {\n                        write(',');\n                    }\n\n                    if (text == null) {\n                        /** 字符串为空，直接输出null字符串 */\n                        write(\"null\");\n                    } else {\n                        /** 使用双引号输出，并且处理特殊字符, 下文有分析 */\n                        writeStringWithDoubleQuote(text, (char) 0);\n                    }\n                }\n                write(']');\n                return;\n            }\n\n            /** 计算新的字符占用空间，额外3个字符用于存储 \",\" */\n            int newcount = offset + text.length() + 3;\n            if (i == list.size() - 1) {\n                newcount++;\n            }\n            /** 如果当前存储空间不够*/\n            if (newcount > buf.length) {\n                count = offset;\n                /** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/\n                expandCapacity(newcount);\n            }\n\n            if (i == 0) {\n                buf[offset++] = '[';\n            } else {\n                buf[offset++] = ',';\n            }\n            buf[offset++] = '\"';\n            /** 拷贝text字符串到buffer数组中 */\n            text.getChars(0, text.length(), buf, offset);\n            offset += text.length();\n            buf[offset++] = '\"';\n        }\n        /** 最终构造列表形式 [\"element\", \"element\", ...] */\n        buf[offset++] = ']';\n        count = offset;\n    }\n```\n\n序列化字符串会转化成`[“element”, \"element\", ...]`格式。如果列表字符串中包含特殊字符，调用特化版本`writeStringWithDoubleQuote(text, (char) 0)`。\n\n### 序列化包含特殊字符\b字符串\n\n```java\n    public void writeStringWithDoubleQuote(String text, final char seperator) {\n        if (text == null) {\n            /** 如果字符换为空，输出null字符串 */\n            writeNull();\n            if (seperator != 0) {\n                /** 如果分隔符不为空白字符' '，输出分隔符 */\n                write(seperator);\n            }\n            return;\n        }\n\n        int len = text.length();\n        int newcount = count + len + 2;\n        if (seperator != 0) {\n            newcount++;\n        }\n\n        /** 如果当前存储空间不够 */\n        if (newcount > buf.length) {\n            if (writer != null) {\n                /** 写双引号字符 */\n                write('\"');\n\n                for (int i = 0; i < text.length(); ++i) {\n                    /** 循环提取字符串中字符 */\n                    char ch = text.charAt(i);\n\n                    if (isEnabled(SerializerFeature.BrowserSecure)) {\n                       if (ch == '(' || ch == ')' || ch == '<' || ch == '>') {\n                            /** ascii转换成native编码 */\n                            write('\\\\');\n                            write('u');\n                            write(IOUtils.DIGITS[(ch >>> 12) & 15]);\n                            write(IOUtils.DIGITS[(ch >>> 8) & 15]);\n                            write(IOUtils.DIGITS[(ch >>> 4) & 15]);\n                            write(IOUtils.DIGITS[ch & 15]);\n                            continue;\n                        }\n                    }\n\n                    if (isEnabled(SerializerFeature.BrowserCompatible)) {\n                        if (ch == '\\b'      //  退格\n                            || ch == '\\f'   //  分页\n                            || ch == '\\n'   //  换行\n                            || ch == '\\r'   //  回车\n                            || ch == '\\t'   //  tab\n                            || ch == '\"'    //  双引号\n                            || ch == '/'    //  左反斜杠\n                            || ch == '\\\\') {//  单引号\n                            /** 输出转义字符 + 字符ascii码 */\n                            write('\\\\'); //  右反斜杠\n                            write(replaceChars[(int) ch]);\n                            continue;\n                        }\n\n                        if (ch < 32) {\n                            /** ascii转换成native编码 */\n                            write('\\\\');\n                            write('u');\n                            write('0');\n                            write('0');\n                            write(IOUtils.ASCII_CHARS[ch * 2]);\n                            write(IOUtils.ASCII_CHARS[ch * 2 + 1]);\n                            continue;\n                        }\n\n                        if (ch >= 127) {\n                            /** ascii转换成native编码 */\n                            write('\\\\');\n                            write('u');\n                            write(IOUtils.DIGITS[(ch >>> 12) & 15]);\n                            write(IOUtils.DIGITS[(ch >>> 8) & 15]);\n                            write(IOUtils.DIGITS[(ch >>> 4) & 15]);\n                            write(IOUtils.DIGITS[ch & 15]);\n                            continue;\n                        }\n                    } else {\n                        /** ascii转换成native编码 */\n                        if (ch < IOUtils.specicalFlags_doubleQuotes.length\n                            && IOUtils.specicalFlags_doubleQuotes[ch] != 0 //\n                            || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\n                            write('\\\\');\n                            if (IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\n                                write('u');\n                                write(IOUtils.DIGITS[ch >>> 12 & 15]);\n                                write(IOUtils.DIGITS[ch >>> 8 & 15]);\n                                write(IOUtils.DIGITS[ch >>> 4 & 15]);\n                                write(IOUtils.DIGITS[ch & 15]);\n                            } else {\n                                write(IOUtils.replaceChars[ch]);\n                            }\n                            continue;\n                        }\n                    }\n\n                    /** 非特殊字符，直接输出 */\n                    write(ch);\n                }\n\n                /** 字符串结束 */\n                write('\"');\n                if (seperator != 0) {\n                    write(seperator);\n                }\n                return;\n            }\n            /** buffer容量不够并且输出器为空，触发扩容 */\n            expandCapacity(newcount);\n        }\n\n        int start = count + 1;\n        int end = start + len;\n\n        buf[count] = '\\\"';\n        /** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */\n        text.getChars(0, len, buf, start);\n\n        count = newcount;\n\n        if (isEnabled(SerializerFeature.BrowserCompatible)) {\n            int lastSpecialIndex = -1;\n\n            for (int i = start; i < end; ++i) {\n                /** 循环提取字符串中字符 */\n                char ch = buf[i];\n\n                if (ch == '\"' //\n                    || ch == '/' //\n                    || ch == '\\\\') {\n                    /** 记录指定字符最后出现的位置 */\n                    lastSpecialIndex = i;\n                    newcount += 1;\n                    continue;\n                }\n\n                if (ch == '\\b' //\n                    || ch == '\\f' //\n                    || ch == '\\n' //\n                    || ch == '\\r' //\n                    || ch == '\\t') {\n                    /** 记录指定字符最后出现的位置 */\n                    lastSpecialIndex = i;\n                    newcount += 1;\n                    continue;\n                }\n\n                if (ch < 32) {\n                    lastSpecialIndex = i;\n                    newcount += 5;\n                    continue;\n                }\n\n                if (ch >= 127) {\n                    lastSpecialIndex = i;\n                    newcount += 5;\n                    continue;\n                }\n            }\n\n            /** 如果存储空间不足，触发到(1.5倍buffer大小+1) */\n            if (newcount > buf.length) {\n                expandCapacity(newcount);\n            }\n            count = newcount;\n\n            /** 逆向从指定特殊字符开始遍历 */\n            for (int i = lastSpecialIndex; i >= start; --i) {\n                char ch = buf[i];\n\n                if (ch == '\\b' //\n                    || ch == '\\f'//\n                    || ch == '\\n' //\n                    || ch == '\\r' //\n                    || ch == '\\t') {\n                    /** 将字符后移一位，插入转译字符\\ */\n                    System.arraycopy(buf, i + 1, buf, i + 2, end - i - 1);\n                    buf[i] = '\\\\';\n                    /** 将特殊字符转换成普通单字符 */\n                    buf[i + 1] = replaceChars[(int) ch];\n                    end += 1;\n                    continue;\n                }\n\n                if (ch == '\"' //\n                    || ch == '/' //\n                    || ch == '\\\\') {\n                    /** 和上面处理一致，不需要单独替换成普通字符 */\n                    System.arraycopy(buf, i + 1, buf, i + 2, end - i - 1);\n                    buf[i] = '\\\\';\n                    buf[i + 1] = ch;\n                    end += 1;\n                    continue;\n                }\n\n                if (ch < 32) {\n                    System.arraycopy(buf, i + 1, buf, i + 6, end - i - 1);\n                    /** ascii转换成native编码 */\n                    buf[i] = '\\\\';\n                    buf[i + 1] = 'u';\n                    buf[i + 2] = '0';\n                    buf[i + 3] = '0';\n                    buf[i + 4] = IOUtils.ASCII_CHARS[ch * 2];\n                    buf[i + 5] = IOUtils.ASCII_CHARS[ch * 2 + 1];\n                    end += 5;\n                    continue;\n                }\n\n                if (ch >= 127) {\n                    System.arraycopy(buf, i + 1, buf, i + 6, end - i - 1);\n                    /** ascii转换成native编码 */\n                    buf[i] = '\\\\';\n                    buf[i + 1] = 'u';\n                    buf[i + 2] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                    buf[i + 3] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                    buf[i + 4] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                    buf[i + 5] = IOUtils.DIGITS[ch & 15];\n                    end += 5;\n                }\n            }\n\n            /** 追加引用符号 */\n            if (seperator != 0) {\n                buf[count - 2] = '\\\"';\n                buf[count - 1] = seperator;\n            } else {\n                buf[count - 1] = '\\\"';\n            }\n\n            return;\n        }\n\n        int specialCount = 0;\n        int lastSpecialIndex = -1;\n        int firstSpecialIndex = -1;\n        char lastSpecial = '\\0';\n\n        for (int i = start; i < end; ++i) {\n            char ch = buf[i];\n\n            if (ch >= ']') { //   93\n                /** 特殊字符参考：http://www.mokuge.com/tool/asciito16/ */\n                if (ch >= 0x7F // 127\n                        && (ch == '\\u2028' //\n                        || ch == '\\u2029'  //\n                        || ch < 0xA0)) {   // 160 [空格]\n                    if (firstSpecialIndex == -1) {\n                        firstSpecialIndex = i;\n                    }\n\n                    specialCount++;\n                    lastSpecialIndex = i;\n                    lastSpecial = ch;\n                    newcount += 4;\n                }\n                continue;\n            }\n\n            boolean special = (ch < 64 && (sepcialBits & (1L << ch)) != 0) || ch == '\\\\';\n            if (special) {\n                specialCount++;\n                lastSpecialIndex = i;\n                lastSpecial = ch;\n\n                if (ch == '('\n                        || ch == ')'\n                        || ch == '<'\n                        || ch == '>'\n                        || (ch < IOUtils.specicalFlags_doubleQuotes.length //\n                    && IOUtils.specicalFlags_doubleQuotes[ch] == 4) //\n                ) {\n                    newcount += 4;\n                }\n\n                if (firstSpecialIndex == -1) {\n                    firstSpecialIndex = i;\n                }\n            }\n        }\n\n        if (specialCount > 0) {\n            newcount += specialCount;\n            /** 包含特殊字符并且buffer空间不够，触发扩容 */\n            if (newcount > buf.length) {\n                expandCapacity(newcount);\n            }\n            count = newcount;\n\n            /** 将特殊字符转换成native编码，目的是节省存储空间*/\n            if (specialCount == 1) {\n                // 行分隔符\n                if (lastSpecial == '\\u2028') {\n                    int srcPos = lastSpecialIndex + 1;\n                    int destPos = lastSpecialIndex + 6;\n                    int LengthOfCopy = end - lastSpecialIndex - 1;\n                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\n                    buf[lastSpecialIndex] = '\\\\';\n                    buf[++lastSpecialIndex] = 'u';\n                    buf[++lastSpecialIndex] = '2';\n                    buf[++lastSpecialIndex] = '0';\n                    buf[++lastSpecialIndex] = '2';\n                    buf[++lastSpecialIndex] = '8';\n                }\n                // 段落分隔符\n                else if (lastSpecial == '\\u2029') {\n                    int srcPos = lastSpecialIndex + 1;\n                    int destPos = lastSpecialIndex + 6;\n                    int LengthOfCopy = end - lastSpecialIndex - 1;\n                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\n                    buf[lastSpecialIndex] = '\\\\';\n                    buf[++lastSpecialIndex] = 'u';\n                    buf[++lastSpecialIndex] = '2';\n                    buf[++lastSpecialIndex] = '0';\n                    buf[++lastSpecialIndex] = '2';\n                    buf[++lastSpecialIndex] = '9';\n                } else if (lastSpecial == '(' || lastSpecial == ')' || lastSpecial == '<' || lastSpecial == '>') {\n                    int srcPos = lastSpecialIndex + 1;\n                    int destPos = lastSpecialIndex + 6;\n                    int LengthOfCopy = end - lastSpecialIndex - 1;\n                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\n                    buf[lastSpecialIndex] = '\\\\';\n                    buf[++lastSpecialIndex] = 'u';\n\n                    final char ch = lastSpecial;\n                    buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                    buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                    buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                    buf[++lastSpecialIndex] = IOUtils.DIGITS[ch & 15];\n                } else {\n                    final char ch = lastSpecial;\n                    if (ch < IOUtils.specicalFlags_doubleQuotes.length //\n                        && IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\n                        int srcPos = lastSpecialIndex + 1;\n                        int destPos = lastSpecialIndex + 6;\n                        int LengthOfCopy = end - lastSpecialIndex - 1;\n                        System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\n\n                        int bufIndex = lastSpecialIndex;\n                        buf[bufIndex++] = '\\\\';\n                        buf[bufIndex++] = 'u';\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\n                    } else {\n                        int srcPos = lastSpecialIndex + 1;\n                        int destPos = lastSpecialIndex + 2;\n                        int LengthOfCopy = end - lastSpecialIndex - 1;\n                        System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);\n                        buf[lastSpecialIndex] = '\\\\';\n                        buf[++lastSpecialIndex] = replaceChars[(int) ch];\n                    }\n                }\n            } else if (specialCount > 1) {\n                int textIndex = firstSpecialIndex - start;\n                int bufIndex = firstSpecialIndex;\n                for (int i = textIndex; i < text.length(); ++i) {\n                    char ch = text.charAt(i);\n\n                    /** 将特殊字符转换成native编码，目的是节省存储空间*/ \n                    if (browserSecure && (ch == '('\n                            || ch == ')'\n                            || ch == '<'\n                            || ch == '>')) {\n                        buf[bufIndex++] = '\\\\';\n                        buf[bufIndex++] = 'u';\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                        buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\n                        end += 5;\n                    } else if (ch < IOUtils.specicalFlags_doubleQuotes.length //\n                        && IOUtils.specicalFlags_doubleQuotes[ch] != 0 //\n                        || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\n                        buf[bufIndex++] = '\\\\';\n                        if (IOUtils.specicalFlags_doubleQuotes[ch] == 4) {\n                            buf[bufIndex++] = 'u';\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\n                            end += 5;\n                        } else {\n                            buf[bufIndex++] = replaceChars[(int) ch];\n                            end++;\n                        }\n                    } else {\n                        // 行分隔符 、段落分隔符\n                        if (ch == '\\u2028' || ch == '\\u2029') {\n                            buf[bufIndex++] = '\\\\';\n                            buf[bufIndex++] = 'u';\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 12) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 8) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[(ch >>> 4) & 15];\n                            buf[bufIndex++] = IOUtils.DIGITS[ch & 15];\n                            end += 5;\n                        } else {\n                            buf[bufIndex++] = ch;\n                        }\n                    }\n                }\n            }\n        }\n\n        if (seperator != 0) {\n            buf[count - 2] = '\\\"';\n            buf[count - 1] = seperator;\n        } else {\n            buf[count - 1] = '\\\"';\n        }\n    }\n```\n\nwriteStringWithDoubleQuote方法实现实在是太长了，这个方法主要做了以下几件事情：\n\n1. \b\b如果开启序列化BrowserCompatible特性，执行ascii转换成native编码，节省空间。\n2. 如果输出器writer不为空，会自动触发\bbuffer扩容`(原有容量1.5倍+1)`。\n\n\b另外一个针对特殊字符的字符串序列化\b方法writeStringWithDoubleQuote(char[] text, final char seperator)，因为和writeStringWithDoubleQuote(String text, final char seperator)版本极其类似，所以不再冗余分析。\n\n序列化字符串的方法包括添加单引号的版本，详细请参考 writeStringWithSingleQuote ：\n\n```java\n    protected void writeStringWithSingleQuote(String text) {\n        if (text == null) {\n            int newcount = count + 4;\n            if (newcount > buf.length) {\n                expandCapacity(newcount);\n            }\n            /** 如果字符串为null，输出\"null\"字符串 */\n            \"null\".getChars(0, 4, buf, count);\n            count = newcount;\n            return;\n        }\n\n        int len = text.length();\n        int newcount = count + len + 2;\n        if (newcount > buf.length) {\n            if (writer != null) {\n                /** 使用单引号输出字符串值 */\n                write('\\'');\n                for (int i = 0; i < text.length(); ++i) {\n                    char ch = text.charAt(i);\n                    if (ch <= 13 || ch == '\\\\' || ch == '\\'' //\n                        || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\n                        /** 如果包含特殊字符 或者 单字符'\\' ''' ，添加转译并且替换为普通字符*/\n                        write('\\\\');\n                        write(replaceChars[(int) ch]);\n                    } else {\n                        write(ch);\n                    }\n                }\n                write('\\'');\n                return;\n            }\n            /** buffer容量不够并且输出器为空，触发扩容 */\n            expandCapacity(newcount);\n        }\n\n        int start = count + 1;\n        int end = start + len;\n\n        buf[count] = '\\'';\n        /** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */\n        text.getChars(0, len, buf, start);\n        count = newcount;\n\n        int specialCount = 0;\n        int lastSpecialIndex = -1;\n        char lastSpecial = '\\0';\n        for (int i = start; i < end; ++i) {\n            char ch = buf[i];\n            if (ch <= 13 || ch == '\\\\' || ch == '\\'' //\n                || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\n                /** 记录特殊字符个数和最后一个特殊字符索引 */\n                specialCount++;\n                lastSpecialIndex = i;\n                lastSpecial = ch;\n            }\n        }\n\n        newcount += specialCount;\n        if (newcount > buf.length) {\n            expandCapacity(newcount);\n        }\n        count = newcount;\n\n        if (specialCount == 1) {\n            /** 将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符*/\n            System.arraycopy(buf, lastSpecialIndex + 1, buf, lastSpecialIndex + 2, end - lastSpecialIndex - 1);\n            buf[lastSpecialIndex] = '\\\\';\n            buf[++lastSpecialIndex] = replaceChars[(int) lastSpecial];\n        } else if (specialCount > 1) {\n            System.arraycopy(buf, lastSpecialIndex + 1, buf, lastSpecialIndex + 2, end - lastSpecialIndex - 1);\n            buf[lastSpecialIndex] = '\\\\';\n            buf[++lastSpecialIndex] = replaceChars[(int) lastSpecial];\n            end++;\n            for (int i = lastSpecialIndex - 2; i >= start; --i) {\n                char ch = buf[i];\n\n                if (ch <= 13 || ch == '\\\\' || ch == '\\'' //\n                    || (ch == '/' && isEnabled(SerializerFeature.WriteSlashAsSpecial))) {\n                    /** 将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符*/\n                    System.arraycopy(buf, i + 1, buf, i + 2, end - i - 1);\n                    buf[i] = '\\\\';\n                    buf[i + 1] = replaceChars[(int) ch];\n                    end++;\n                }\n            }\n        }\n\n        /** 字符串结尾添加单引号引用 */\n        buf[count - 1] = '\\'';\n    }\n```\n\nwriteStringWithSingleQuote这个方法主要做了以下几件事情：\n\n1. \b\b针对特殊字符，添加转译字符并且替换特殊字符为普通字符\n2. 如果输出器writer不为空，会自动触发\bbuffer扩容`(原有容量1.5倍+1)`。\n\n\b另外一个针对特殊字符的字符串序列化\b方法`writeStringWithSingleQuote(char[])`，因为和`writeStringWithSingleQuote(String)`版本极其类似，所以不再冗余分析。\n","slug":"Fastjson源码解析-序列化(二)-序列化字节和字符串解析","published":1,"updated":"2018-10-12T02:24:36.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4et00009xat8334nfbs3","content":"<h2 id=\"SerializeWriter成员函数\"><a href=\"#SerializeWriter成员函数\" class=\"headerlink\" title=\"SerializeWriter成员函数\"></a>SerializeWriter成员函数</h2><h3 id=\"序列化16进制字节数组\"><a href=\"#序列化16进制字节数组\" class=\"headerlink\" title=\"序列化16进制字节数组\"></a>序列化16进制字节数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeHex</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 计算总共字符长度, 乘以2 代表一个字符要占用2字节, 3代表要添加 x 和 前后添加' */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + bytes.length * <span class=\"number\">2</span> + <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[bytes.length + <span class=\"number\">3</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">            chars[pos++] = <span class=\"string\">'x'</span>;</span><br><span class=\"line\">            chars[pos++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">byte</span> b = bytes[i];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> a = b &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">                <span class=\"comment\">/** 取字节的高四位 1111 0000*/</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> b0 = a &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"comment\">/** 取字节的低四位 0000 1111*/</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> b1 = a &amp; <span class=\"number\">0xf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 索引低索引存储字节高位</span></span><br><span class=\"line\"><span class=\"comment\">                 *  如果4位表示的数字是 0~9, 转换为ascii的 0~9</span></span><br><span class=\"line\"><span class=\"comment\">                 *  如果4位表示的不是数字, 转换为16进制ascii码字符</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                chars[pos++] = (<span class=\"keyword\">char</span>) (b0 + (b0 &lt; <span class=\"number\">10</span> ? <span class=\"number\">48</span> : <span class=\"number\">55</span>));</span><br><span class=\"line\">                chars[pos++] = (<span class=\"keyword\">char</span>) (b1 + (b1 &lt; <span class=\"number\">10</span> ? <span class=\"number\">48</span> : <span class=\"number\">55</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            chars[pos++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                writer.write(chars);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"writeBytes error.\"</span>, ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** buffer容量不够并且输出器为空，触发扩容 */</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[count++] = <span class=\"string\">'x'</span>;</span><br><span class=\"line\">    buf[count++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span> b = bytes[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = b &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** 取字节的高四位 */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> b0 = a &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** 取字节的低四位 */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> b1 = a &amp; <span class=\"number\">0xf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 索引低索引存储字节高位</span></span><br><span class=\"line\"><span class=\"comment\">         *  如果4位表示的数字是 0~9, 转换为ascii的 0~9</span></span><br><span class=\"line\"><span class=\"comment\">         *  如果4位表示的不是数字, 转换为16进制ascii码字符</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        buf[count++] = (<span class=\"keyword\">char</span>) (b0 + (b0 &lt; <span class=\"number\">10</span> ? <span class=\"number\">48</span> : <span class=\"number\">55</span>));</span><br><span class=\"line\">        buf[count++] = (<span class=\"keyword\">char</span>) (b1 + (b1 &lt; <span class=\"number\">10</span> ? <span class=\"number\">48</span> : <span class=\"number\">55</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buf[count++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>writeHex</code> 这个序列化方法主要对16进制的自己转换为占用2个ascii码字符，添加单引号和x前缀。</p>\n<h3 id=\"序列化byte字节数组\"><a href=\"#序列化byte字节数组\" class=\"headerlink\" title=\"序列化byte字节数组\"></a>序列化byte字节数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeByteArray</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.WriteClassName.mask)) &#123;</span><br><span class=\"line\">         <span class=\"comment\">/** 如果开启序列化特性WriteClassName，直接写16进制字符 */</span></span><br><span class=\"line\">         writeHex(bytes);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">int</span> bytesLen = bytes.length;</span><br><span class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> quote = useSingleQuotes ? <span class=\"string\">'\\''</span> : <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (bytesLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         String emptyString = useSingleQuotes ? <span class=\"string\">\"''\"</span> : <span class=\"string\">\"\\\"\\\"\"</span>;</span><br><span class=\"line\">         <span class=\"comment\">/** 如果字节数组长度为0，输出空白字符 */</span></span><br><span class=\"line\">         write(emptyString);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] CA = IOUtils.CA;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/** 验证长度是24bit位整数倍 */</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> eLen = (bytesLen / <span class=\"number\">3</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\">     <span class=\"comment\">/** base64 编码字符长度</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      *  base64 :</span></span><br><span class=\"line\"><span class=\"comment\">      *  第一步，将每三个字节作为一组，一共是24个二进制位。</span></span><br><span class=\"line\"><span class=\"comment\">      *  第二步，将这24个二进制位分为四组，每个组有6个二进制位。</span></span><br><span class=\"line\"><span class=\"comment\">      *  第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。</span></span><br><span class=\"line\"><span class=\"comment\">      *  第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      *  ref: http://www.ruanyifeng.com/blog/2008/06/base64.html</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> charsLen = ((bytesLen - <span class=\"number\">1</span>) / <span class=\"number\">3</span> + <span class=\"number\">1</span>) &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\">     <span class=\"comment\">// char[] chars = new char[charsLen];</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> offset = count;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> newcount = count + charsLen + <span class=\"number\">2</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             write(quote);</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; eLen;) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">/** 三个字节为一组, 扩展为四个字节 */</span></span><br><span class=\"line\">                 <span class=\"keyword\">int</span> i = (bytes[s++] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">16</span> | (bytes[s++] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">8</span> | (bytes[s++] &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 write(CA[(i &gt;&gt;&gt; <span class=\"number\">18</span>) &amp; <span class=\"number\">0x3f</span>]);</span><br><span class=\"line\">                 write(CA[(i &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">0x3f</span>]);</span><br><span class=\"line\">                 write(CA[(i &gt;&gt;&gt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0x3f</span>]);</span><br><span class=\"line\">                 <span class=\"comment\">/** 填充00 */</span></span><br><span class=\"line\">                 write(CA[i &amp; <span class=\"number\">0x3f</span>]);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"comment\">/** 对齐并编码剩余不足3个字节为一组的数据 */</span></span><br><span class=\"line\">             <span class=\"comment\">// Pad and encode last bits if source isn't even 24 bits.</span></span><br><span class=\"line\">             <span class=\"keyword\">int</span> left = bytesLen - eLen; <span class=\"comment\">// 0 - 2.</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                  * a) 1个字节的情况：</span></span><br><span class=\"line\"><span class=\"comment\">                  * 将这1字节8位二进制，每6位分成2组，最后一组除了前面加00，后面加上0000，</span></span><br><span class=\"line\"><span class=\"comment\">                  * 这样得到 两位的Base64编码， 在末尾补上2个\"=\"号</span></span><br><span class=\"line\"><span class=\"comment\">                  *</span></span><br><span class=\"line\"><span class=\"comment\">                  * b) 2个字节的情况：</span></span><br><span class=\"line\"><span class=\"comment\">                  * 将这2字节的一共16个二进制位，每6位分成3组，最后一组除了前面加00，后面也要加00，</span></span><br><span class=\"line\"><span class=\"comment\">                  * 这样得到 3位的Base64编码， 在末尾补上\"=\"号</span></span><br><span class=\"line\"><span class=\"comment\">                  *</span></span><br><span class=\"line\"><span class=\"comment\">                  *</span></span><br><span class=\"line\"><span class=\"comment\">                  * 如果只有1个字节，按照前面规则a)</span></span><br><span class=\"line\"><span class=\"comment\">                  * 第1组是6位，第2组后面4个0， 因此应该左移 10 = 6 + 4</span></span><br><span class=\"line\"><span class=\"comment\">                  *</span></span><br><span class=\"line\"><span class=\"comment\">                  * 如果只有2个字节，按照前面规则b)</span></span><br><span class=\"line\"><span class=\"comment\">                  * 第1个字节左移 10 位 加上 第2个字节左移 2 位补0即可</span></span><br><span class=\"line\"><span class=\"comment\">                  */</span></span><br><span class=\"line\">                 <span class=\"keyword\">int</span> i = ((bytes[eLen] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">10</span>) | (left == <span class=\"number\">2</span> ? ((bytes[bytesLen - <span class=\"number\">1</span>] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">2</span>) : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"comment\">/** 扩展为四个字节 */</span></span><br><span class=\"line\">                 write(CA[i &gt;&gt; <span class=\"number\">12</span>]);</span><br><span class=\"line\">                 write(CA[(i &gt;&gt;&gt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0x3f</span>]);</span><br><span class=\"line\">                 write(left == <span class=\"number\">2</span> ? CA[i &amp; <span class=\"number\">0x3f</span>] : <span class=\"string\">'='</span>);</span><br><span class=\"line\">                 write(<span class=\"string\">'='</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">             write(quote);</span><br><span class=\"line\">             <span class=\"keyword\">return</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         expandCapacity(newcount);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     count = newcount;</span><br><span class=\"line\">     buf[offset++] = quote;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// Encode even 24-bits</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>, d = offset; s &lt; eLen;) &#123;</span><br><span class=\"line\">         <span class=\"comment\">/** 三个字节为一组, 扩展为四个字节 */</span></span><br><span class=\"line\">         <span class=\"keyword\">int</span> i = (bytes[s++] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">16</span> | (bytes[s++] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">8</span> | (bytes[s++] &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Encode the int into four chars</span></span><br><span class=\"line\">         buf[d++] = CA[(i &gt;&gt;&gt; <span class=\"number\">18</span>) &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">         buf[d++] = CA[(i &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">         buf[d++] = CA[(i &gt;&gt;&gt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">         <span class=\"comment\">/** 填充00 */</span></span><br><span class=\"line\">         buf[d++] = CA[i &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/** 对齐并编码剩余不足3个字节为一组的数据 */</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> left = bytesLen - eLen; <span class=\"comment\">// 0 - 2.</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Prepare the int</span></span><br><span class=\"line\">         <span class=\"keyword\">int</span> i = ((bytes[eLen] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">10</span>) | (left == <span class=\"number\">2</span> ? ((bytes[bytesLen - <span class=\"number\">1</span>] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">2</span>) : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">/** 扩展为四个字节 */</span></span><br><span class=\"line\">         buf[newcount - <span class=\"number\">5</span>] = CA[i &gt;&gt; <span class=\"number\">12</span>];</span><br><span class=\"line\">         buf[newcount - <span class=\"number\">4</span>] = CA[(i &gt;&gt;&gt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">         buf[newcount - <span class=\"number\">3</span>] = left == <span class=\"number\">2</span> ? CA[i &amp; <span class=\"number\">0x3f</span>] : <span class=\"string\">'='</span>;</span><br><span class=\"line\">         buf[newcount - <span class=\"number\">2</span>] = <span class=\"string\">'='</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     buf[newcount - <span class=\"number\">1</span>] = quote;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><code>writeByteArray</code>序列化字节数组实际上就是做了base64编码转换，代码添加了详尽的注释帮助理解。</p>\n<h3 id=\"序列化字符串\"><a href=\"#序列化字符串\" class=\"headerlink\" title=\"序列化字符串\"></a>序列化字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String str, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 计算总共字符串长度 */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + len;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果字符串str超过缓冲区大小, 进行循环拷贝</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 计算当前buffer剩余容纳字符数 */</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> rest = buf.length - count;</span><br><span class=\"line\">                <span class=\"comment\">/** 将字符串str[off, off + rest) 拷贝到buf[count, ...]中*/</span></span><br><span class=\"line\">                str.getChars(off, off + rest, buf, count);</span><br><span class=\"line\">                count = buf.length;</span><br><span class=\"line\">                <span class=\"comment\">/** 强制刷新输出流，会重置count = 0 */</span></span><br><span class=\"line\">                flush();</span><br><span class=\"line\">                <span class=\"comment\">/** 计算剩余需要拷贝的字符数量 */</span></span><br><span class=\"line\">                len -= rest;</span><br><span class=\"line\">                <span class=\"comment\">/** 剩余要拷贝字符在str中偏移量(索引) */</span></span><br><span class=\"line\">                off += rest;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (len &gt; buf.length);</span><br><span class=\"line\">            newcount = len;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 存储空间充足，直接将str[off, off + len) 拷贝到buf[count, ...]中*/</span></span><br><span class=\"line\">    str.getChars(off, off + len, buf, count);</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化字符串<code>write(string)</code>,最终都会转化为上面形式<code>write(string, 0, string.length)</code>。</p>\n<h3 id=\"序列化字符数组\"><a href=\"#序列化字符数组\" class=\"headerlink\" title=\"序列化字符数组\"></a>序列化字符数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">char</span> c[], <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (off &lt; <span class=\"number\">0</span> <span class=\"comment\">//</span></span><br><span class=\"line\">        || off &gt; c.length <span class=\"comment\">//</span></span><br><span class=\"line\">        || len &lt; <span class=\"number\">0</span> <span class=\"comment\">//</span></span><br><span class=\"line\">        || off + len &gt; c.length <span class=\"comment\">//</span></span><br><span class=\"line\">        || off + len &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 计算总共字符串长度 */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + len;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果字符数组c超过缓冲区大小, 进行循环拷贝</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 计算当前buffer剩余容纳字符数 */</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> rest = buf.length - count;</span><br><span class=\"line\">                <span class=\"comment\">/** c[off, off + rest) 拷贝到buf[count, ...]中*/</span></span><br><span class=\"line\">                System.arraycopy(c, off, buf, count, rest);</span><br><span class=\"line\">                count = buf.length;</span><br><span class=\"line\">                <span class=\"comment\">/** 强制刷新输出流，会重置count = 0 */</span></span><br><span class=\"line\">                flush();</span><br><span class=\"line\">                <span class=\"comment\">/** 计算剩余需要拷贝的字符数量 */</span></span><br><span class=\"line\">                len -= rest;</span><br><span class=\"line\">                <span class=\"comment\">/** 剩余要拷贝字符在c中偏移量(索引) */</span></span><br><span class=\"line\">                off += rest;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (len &gt; buf.length);</span><br><span class=\"line\">            newcount = len;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.arraycopy(c, off, buf, count, len);</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化列表字符串\"><a href=\"#序列化列表字符串\" class=\"headerlink\" title=\"序列化列表字符串\"></a>序列化列表字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 空字符列表，输出[]字符串 */</span></span><br><span class=\"line\">        write(<span class=\"string\">\"[]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = count;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> initOffset = offset;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, list_size = list.size(); i &lt; list_size; ++i) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 循环获取列表中包含的字符串 */</span></span><br><span class=\"line\">        String text = list.get(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> hasSpecial = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (text == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** list包含特殊的null值 */</span></span><br><span class=\"line\">            hasSpecial = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>, len = text.length(); j &lt; len; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(j);</span><br><span class=\"line\">                <span class=\"comment\">/** 包含指定特殊字符 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hasSpecial = (ch &lt; <span class=\"string\">' '</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                                  || ch &gt; <span class=\"string\">'~'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                                  || ch == <span class=\"string\">'\"'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                                  || ch == <span class=\"string\">'\\\\'</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasSpecial) &#123;</span><br><span class=\"line\">            count = initOffset;</span><br><span class=\"line\">            write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; list.size(); ++j) &#123;</span><br><span class=\"line\">                text = list.get(j);</span><br><span class=\"line\">                <span class=\"comment\">/** 每个字符用,隔开输出 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    write(<span class=\"string\">','</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (text == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 字符串为空，直接输出null字符串 */</span></span><br><span class=\"line\">                    write(<span class=\"string\">\"null\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 使用双引号输出，并且处理特殊字符, 下文有分析 */</span></span><br><span class=\"line\">                    writeStringWithDoubleQuote(text, (<span class=\"keyword\">char</span>) <span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 计算新的字符占用空间，额外3个字符用于存储 \",\" */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> newcount = offset + text.length() + <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == list.size() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            newcount++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果当前存储空间不够*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">            count = offset;</span><br><span class=\"line\">            <span class=\"comment\">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            buf[offset++] = <span class=\"string\">'['</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            buf[offset++] = <span class=\"string\">','</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        buf[offset++] = <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** 拷贝text字符串到buffer数组中 */</span></span><br><span class=\"line\">        text.getChars(<span class=\"number\">0</span>, text.length(), buf, offset);</span><br><span class=\"line\">        offset += text.length();</span><br><span class=\"line\">        buf[offset++] = <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 最终构造列表形式 [\"element\", \"element\", ...] */</span></span><br><span class=\"line\">    buf[offset++] = <span class=\"string\">']'</span>;</span><br><span class=\"line\">    count = offset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化字符串会转化成<code>[“element”, &quot;element&quot;, ...]</code>格式。如果列表字符串中包含特殊字符，调用特化版本<code>writeStringWithDoubleQuote(text, (char) 0)</code>。</p>\n<h3 id=\"序列化包含特殊字符字符串\"><a href=\"#序列化包含特殊字符字符串\" class=\"headerlink\" title=\"序列化包含特殊字符\b字符串\"></a>序列化包含特殊字符\b字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeStringWithDoubleQuote</span><span class=\"params\">(String text, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> seperator)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (text == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果字符换为空，输出null字符串 */</span></span><br><span class=\"line\">        writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (seperator != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果分隔符不为空白字符' '，输出分隔符 */</span></span><br><span class=\"line\">            write(seperator);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = text.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + len + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (seperator != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        newcount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 写双引号字符 */</span></span><br><span class=\"line\">            write(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; text.length(); ++i) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 循环提取字符串中字符 */</span></span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.BrowserSecure)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (ch == <span class=\"string\">'('</span> || ch == <span class=\"string\">')'</span> || ch == <span class=\"string\">'&lt;'</span> || ch == <span class=\"string\">'&gt;'</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                        write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                        write(<span class=\"string\">'u'</span>);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.BrowserCompatible)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\b'</span>      <span class=\"comment\">//  退格</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\\f'</span>   <span class=\"comment\">//  分页</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\\n'</span>   <span class=\"comment\">//  换行</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\\r'</span>   <span class=\"comment\">//  回车</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\\t'</span>   <span class=\"comment\">//  tab</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\"'</span>    <span class=\"comment\">//  双引号</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'/'</span>    <span class=\"comment\">//  左反斜杠</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\\\\'</span>) &#123;<span class=\"comment\">//  单引号</span></span><br><span class=\"line\">                        <span class=\"comment\">/** 输出转义字符 + 字符ascii码 */</span></span><br><span class=\"line\">                        write(<span class=\"string\">'\\\\'</span>); <span class=\"comment\">//  右反斜杠</span></span><br><span class=\"line\">                        write(replaceChars[(<span class=\"keyword\">int</span>) ch]);</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch &lt; <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                        write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                        write(<span class=\"string\">'u'</span>);</span><br><span class=\"line\">                        write(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">                        write(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">                        write(IOUtils.ASCII_CHARS[ch * <span class=\"number\">2</span>]);</span><br><span class=\"line\">                        write(IOUtils.ASCII_CHARS[ch * <span class=\"number\">2</span> + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch &gt;= <span class=\"number\">127</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                        write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                        write(<span class=\"string\">'u'</span>);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch &lt; IOUtils.specicalFlags_doubleQuotes.length</span><br><span class=\"line\">                        &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] != <span class=\"number\">0</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                        || (ch == <span class=\"string\">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class=\"line\">                        write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (IOUtils.specicalFlags_doubleQuotes[ch] == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                            write(<span class=\"string\">'u'</span>);</span><br><span class=\"line\">                            write(IOUtils.DIGITS[ch &gt;&gt;&gt; <span class=\"number\">12</span> &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                            write(IOUtils.DIGITS[ch &gt;&gt;&gt; <span class=\"number\">8</span> &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                            write(IOUtils.DIGITS[ch &gt;&gt;&gt; <span class=\"number\">4</span> &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                            write(IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            write(IOUtils.replaceChars[ch]);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 非特殊字符，直接输出 */</span></span><br><span class=\"line\">                write(ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 字符串结束 */</span></span><br><span class=\"line\">            write(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (seperator != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                write(seperator);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** buffer容量不够并且输出器为空，触发扩容 */</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = count + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = start + len;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[count] = <span class=\"string\">'\\\"'</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */</span></span><br><span class=\"line\">    text.getChars(<span class=\"number\">0</span>, len, buf, start);</span><br><span class=\"line\"></span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.BrowserCompatible)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lastSpecialIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 循环提取字符串中字符 */</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\"'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'/'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\\\'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 记录指定字符最后出现的位置 */</span></span><br><span class=\"line\">                lastSpecialIndex = i;</span><br><span class=\"line\">                newcount += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\b'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\f'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\n'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\r'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\t'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 记录指定字符最后出现的位置 */</span></span><br><span class=\"line\">                lastSpecialIndex = i;</span><br><span class=\"line\">                newcount += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &lt; <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">                lastSpecialIndex = i;</span><br><span class=\"line\">                newcount += <span class=\"number\">5</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &gt;= <span class=\"number\">127</span>) &#123;</span><br><span class=\"line\">                lastSpecialIndex = i;</span><br><span class=\"line\">                newcount += <span class=\"number\">5</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果存储空间不足，触发到(1.5倍buffer大小+1) */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 逆向从指定特殊字符开始遍历 */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lastSpecialIndex; i &gt;= start; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\b'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\f'</span><span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\n'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\r'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\t'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 将字符后移一位，插入转译字符\\ */</span></span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">2</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                <span class=\"comment\">/** 将特殊字符转换成普通单字符 */</span></span><br><span class=\"line\">                buf[i + <span class=\"number\">1</span>] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                end += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\"'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'/'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\\\'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 和上面处理一致，不需要单独替换成普通字符 */</span></span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">2</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">1</span>] = ch;</span><br><span class=\"line\">                end += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &lt; <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">6</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">1</span>] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">2</span>] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">3</span>] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">4</span>] = IOUtils.ASCII_CHARS[ch * <span class=\"number\">2</span>];</span><br><span class=\"line\">                buf[i + <span class=\"number\">5</span>] = IOUtils.ASCII_CHARS[ch * <span class=\"number\">2</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">                end += <span class=\"number\">5</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &gt;= <span class=\"number\">127</span>) &#123;</span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">6</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">1</span>] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">2</span>] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[i + <span class=\"number\">3</span>] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[i + <span class=\"number\">4</span>] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[i + <span class=\"number\">5</span>] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                end += <span class=\"number\">5</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 追加引用符号 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (seperator != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            buf[count - <span class=\"number\">2</span>] = <span class=\"string\">'\\\"'</span>;</span><br><span class=\"line\">            buf[count - <span class=\"number\">1</span>] = seperator;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            buf[count - <span class=\"number\">1</span>] = <span class=\"string\">'\\\"'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> specialCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lastSpecialIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> firstSpecialIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> lastSpecial = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">']'</span>) &#123; <span class=\"comment\">//   93</span></span><br><span class=\"line\">            <span class=\"comment\">/** 特殊字符参考：http://www.mokuge.com/tool/asciito16/ */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &gt;= <span class=\"number\">0x7F</span> <span class=\"comment\">// 127</span></span><br><span class=\"line\">                    &amp;&amp; (ch == <span class=\"string\">'\\u2028'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                    || ch == <span class=\"string\">'\\u2029'</span>  <span class=\"comment\">//</span></span><br><span class=\"line\">                    || ch &lt; <span class=\"number\">0xA0</span>)) &#123;   <span class=\"comment\">// 160 [空格]</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (firstSpecialIndex == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    firstSpecialIndex = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                specialCount++;</span><br><span class=\"line\">                lastSpecialIndex = i;</span><br><span class=\"line\">                lastSpecial = ch;</span><br><span class=\"line\">                newcount += <span class=\"number\">4</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> special = (ch &lt; <span class=\"number\">64</span> &amp;&amp; (sepcialBits &amp; (<span class=\"number\">1L</span> &lt;&lt; ch)) != <span class=\"number\">0</span>) || ch == <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (special) &#123;</span><br><span class=\"line\">            specialCount++;</span><br><span class=\"line\">            lastSpecialIndex = i;</span><br><span class=\"line\">            lastSpecial = ch;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'('</span></span><br><span class=\"line\">                    || ch == <span class=\"string\">')'</span></span><br><span class=\"line\">                    || ch == <span class=\"string\">'&lt;'</span></span><br><span class=\"line\">                    || ch == <span class=\"string\">'&gt;'</span></span><br><span class=\"line\">                    || (ch &lt; IOUtils.specicalFlags_doubleQuotes.length <span class=\"comment\">//</span></span><br><span class=\"line\">                &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] == <span class=\"number\">4</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                newcount += <span class=\"number\">4</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstSpecialIndex == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                firstSpecialIndex = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (specialCount &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        newcount += specialCount;</span><br><span class=\"line\">        <span class=\"comment\">/** 包含特殊字符并且buffer空间不够，触发扩容 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 将特殊字符转换成native编码，目的是节省存储空间*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (specialCount == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 行分隔符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastSpecial == <span class=\"string\">'\\u2028'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> srcPos = lastSpecialIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> destPos = lastSpecialIndex + <span class=\"number\">6</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> LengthOfCopy = end - lastSpecialIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class=\"line\">                buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'2'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'2'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'8'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 段落分隔符</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lastSpecial == <span class=\"string\">'\\u2029'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> srcPos = lastSpecialIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> destPos = lastSpecialIndex + <span class=\"number\">6</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> LengthOfCopy = end - lastSpecialIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class=\"line\">                buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'2'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'2'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'9'</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lastSpecial == <span class=\"string\">'('</span> || lastSpecial == <span class=\"string\">')'</span> || lastSpecial == <span class=\"string\">'&lt;'</span> || lastSpecial == <span class=\"string\">'&gt;'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> srcPos = lastSpecialIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> destPos = lastSpecialIndex + <span class=\"number\">6</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> LengthOfCopy = end - lastSpecialIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class=\"line\">                buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> ch = lastSpecial;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[++lastSpecialIndex] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> ch = lastSpecial;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &lt; IOUtils.specicalFlags_doubleQuotes.length <span class=\"comment\">//</span></span><br><span class=\"line\">                    &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> srcPos = lastSpecialIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> destPos = lastSpecialIndex + <span class=\"number\">6</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> LengthOfCopy = end - lastSpecialIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> bufIndex = lastSpecialIndex;</span><br><span class=\"line\">                    buf[bufIndex++] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                    buf[bufIndex++] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> srcPos = lastSpecialIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> destPos = lastSpecialIndex + <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> LengthOfCopy = end - lastSpecialIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class=\"line\">                    buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                    buf[++lastSpecialIndex] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (specialCount &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> textIndex = firstSpecialIndex - start;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> bufIndex = firstSpecialIndex;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = textIndex; i &lt; text.length(); ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 将特殊字符转换成native编码，目的是节省存储空间*/</span> </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (browserSecure &amp;&amp; (ch == <span class=\"string\">'('</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">')'</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'&lt;'</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'&gt;'</span>)) &#123;</span><br><span class=\"line\">                    buf[bufIndex++] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                    buf[bufIndex++] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    end += <span class=\"number\">5</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch &lt; IOUtils.specicalFlags_doubleQuotes.length <span class=\"comment\">//</span></span><br><span class=\"line\">                    &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] != <span class=\"number\">0</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                    || (ch == <span class=\"string\">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class=\"line\">                    buf[bufIndex++] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (IOUtils.specicalFlags_doubleQuotes[ch] == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                        buf[bufIndex++] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        end += <span class=\"number\">5</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        buf[bufIndex++] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                        end++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 行分隔符 、段落分隔符</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\u2028'</span> || ch == <span class=\"string\">'\\u2029'</span>) &#123;</span><br><span class=\"line\">                        buf[bufIndex++] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                        buf[bufIndex++] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        end += <span class=\"number\">5</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        buf[bufIndex++] = ch;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (seperator != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        buf[count - <span class=\"number\">2</span>] = <span class=\"string\">'\\\"'</span>;</span><br><span class=\"line\">        buf[count - <span class=\"number\">1</span>] = seperator;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        buf[count - <span class=\"number\">1</span>] = <span class=\"string\">'\\\"'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>writeStringWithDoubleQuote方法实现实在是太长了，这个方法主要做了以下几件事情：</p>\n<ol>\n<li>\b\b如果开启序列化BrowserCompatible特性，执行ascii转换成native编码，节省空间。</li>\n<li>如果输出器writer不为空，会自动触发\bbuffer扩容<code>(原有容量1.5倍+1)</code>。</li>\n</ol>\n<p>\b另外一个针对特殊字符的字符串序列化\b方法writeStringWithDoubleQuote(char[] text, final char seperator)，因为和writeStringWithDoubleQuote(String text, final char seperator)版本极其类似，所以不再冗余分析。</p>\n<p>序列化字符串的方法包括添加单引号的版本，详细请参考 writeStringWithSingleQuote ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">writeStringWithSingleQuote</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (text == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newcount = count + <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果字符串为null，输出\"null\"字符串 */</span></span><br><span class=\"line\">        <span class=\"string\">\"null\"</span>.getChars(<span class=\"number\">0</span>, <span class=\"number\">4</span>, buf, count);</span><br><span class=\"line\">        count = newcount;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = text.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + len + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用单引号输出字符串值 */</span></span><br><span class=\"line\">            write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; text.length(); ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &lt;= <span class=\"number\">13</span> || ch == <span class=\"string\">'\\\\'</span> || ch == <span class=\"string\">'\\''</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                    || (ch == <span class=\"string\">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果包含特殊字符 或者 单字符'\\' ''' ，添加转译并且替换为普通字符*/</span></span><br><span class=\"line\">                    write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                    write(replaceChars[(<span class=\"keyword\">int</span>) ch]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    write(ch);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** buffer容量不够并且输出器为空，触发扩容 */</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = count + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = start + len;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[count] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */</span></span><br><span class=\"line\">    text.getChars(<span class=\"number\">0</span>, len, buf, start);</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> specialCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lastSpecialIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> lastSpecial = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &lt;= <span class=\"number\">13</span> || ch == <span class=\"string\">'\\\\'</span> || ch == <span class=\"string\">'\\''</span> <span class=\"comment\">//</span></span><br><span class=\"line\">            || (ch == <span class=\"string\">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 记录特殊字符个数和最后一个特殊字符索引 */</span></span><br><span class=\"line\">            specialCount++;</span><br><span class=\"line\">            lastSpecialIndex = i;</span><br><span class=\"line\">            lastSpecial = ch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    newcount += specialCount;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (specialCount == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符*/</span></span><br><span class=\"line\">        System.arraycopy(buf, lastSpecialIndex + <span class=\"number\">1</span>, buf, lastSpecialIndex + <span class=\"number\">2</span>, end - lastSpecialIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">        buf[++lastSpecialIndex] = replaceChars[(<span class=\"keyword\">int</span>) lastSpecial];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (specialCount &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        System.arraycopy(buf, lastSpecialIndex + <span class=\"number\">1</span>, buf, lastSpecialIndex + <span class=\"number\">2</span>, end - lastSpecialIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">        buf[++lastSpecialIndex] = replaceChars[(<span class=\"keyword\">int</span>) lastSpecial];</span><br><span class=\"line\">        end++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lastSpecialIndex - <span class=\"number\">2</span>; i &gt;= start; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &lt;= <span class=\"number\">13</span> || ch == <span class=\"string\">'\\\\'</span> || ch == <span class=\"string\">'\\''</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || (ch == <span class=\"string\">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符*/</span></span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">2</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">1</span>] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                end++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 字符串结尾添加单引号引用 */</span></span><br><span class=\"line\">    buf[count - <span class=\"number\">1</span>] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>writeStringWithSingleQuote这个方法主要做了以下几件事情：</p>\n<ol>\n<li>\b\b针对特殊字符，添加转译字符并且替换特殊字符为普通字符</li>\n<li>如果输出器writer不为空，会自动触发\bbuffer扩容<code>(原有容量1.5倍+1)</code>。</li>\n</ol>\n<p>\b另外一个针对特殊字符的字符串序列化\b方法<code>writeStringWithSingleQuote(char[])</code>，因为和<code>writeStringWithSingleQuote(String)</code>版本极其类似，所以不再冗余分析。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"SerializeWriter成员函数\"><a href=\"#SerializeWriter成员函数\" class=\"headerlink\" title=\"SerializeWriter成员函数\"></a>SerializeWriter成员函数</h2><h3 id=\"序列化16进制字节数组\"><a href=\"#序列化16进制字节数组\" class=\"headerlink\" title=\"序列化16进制字节数组\"></a>序列化16进制字节数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeHex</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 计算总共字符长度, 乘以2 代表一个字符要占用2字节, 3代表要添加 x 和 前后添加' */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + bytes.length * <span class=\"number\">2</span> + <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] chars = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[bytes.length + <span class=\"number\">3</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">            chars[pos++] = <span class=\"string\">'x'</span>;</span><br><span class=\"line\">            chars[pos++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">byte</span> b = bytes[i];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> a = b &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">                <span class=\"comment\">/** 取字节的高四位 1111 0000*/</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> b0 = a &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">                <span class=\"comment\">/** 取字节的低四位 0000 1111*/</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> b1 = a &amp; <span class=\"number\">0xf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 索引低索引存储字节高位</span></span><br><span class=\"line\"><span class=\"comment\">                 *  如果4位表示的数字是 0~9, 转换为ascii的 0~9</span></span><br><span class=\"line\"><span class=\"comment\">                 *  如果4位表示的不是数字, 转换为16进制ascii码字符</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                chars[pos++] = (<span class=\"keyword\">char</span>) (b0 + (b0 &lt; <span class=\"number\">10</span> ? <span class=\"number\">48</span> : <span class=\"number\">55</span>));</span><br><span class=\"line\">                chars[pos++] = (<span class=\"keyword\">char</span>) (b1 + (b1 &lt; <span class=\"number\">10</span> ? <span class=\"number\">48</span> : <span class=\"number\">55</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            chars[pos++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                writer.write(chars);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"writeBytes error.\"</span>, ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** buffer容量不够并且输出器为空，触发扩容 */</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[count++] = <span class=\"string\">'x'</span>;</span><br><span class=\"line\">    buf[count++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; bytes.length; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span> b = bytes[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> a = b &amp; <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** 取字节的高四位 */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> b0 = a &gt;&gt; <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** 取字节的低四位 */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> b1 = a &amp; <span class=\"number\">0xf</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 索引低索引存储字节高位</span></span><br><span class=\"line\"><span class=\"comment\">         *  如果4位表示的数字是 0~9, 转换为ascii的 0~9</span></span><br><span class=\"line\"><span class=\"comment\">         *  如果4位表示的不是数字, 转换为16进制ascii码字符</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        buf[count++] = (<span class=\"keyword\">char</span>) (b0 + (b0 &lt; <span class=\"number\">10</span> ? <span class=\"number\">48</span> : <span class=\"number\">55</span>));</span><br><span class=\"line\">        buf[count++] = (<span class=\"keyword\">char</span>) (b1 + (b1 &lt; <span class=\"number\">10</span> ? <span class=\"number\">48</span> : <span class=\"number\">55</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buf[count++] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>writeHex</code> 这个序列化方法主要对16进制的自己转换为占用2个ascii码字符，添加单引号和x前缀。</p>\n<h3 id=\"序列化byte字节数组\"><a href=\"#序列化byte字节数组\" class=\"headerlink\" title=\"序列化byte字节数组\"></a>序列化byte字节数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeByteArray</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.WriteClassName.mask)) &#123;</span><br><span class=\"line\">         <span class=\"comment\">/** 如果开启序列化特性WriteClassName，直接写16进制字符 */</span></span><br><span class=\"line\">         writeHex(bytes);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">int</span> bytesLen = bytes.length;</span><br><span class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> quote = useSingleQuotes ? <span class=\"string\">'\\''</span> : <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (bytesLen == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         String emptyString = useSingleQuotes ? <span class=\"string\">\"''\"</span> : <span class=\"string\">\"\\\"\\\"\"</span>;</span><br><span class=\"line\">         <span class=\"comment\">/** 如果字节数组长度为0，输出空白字符 */</span></span><br><span class=\"line\">         write(emptyString);</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">final</span> <span class=\"keyword\">char</span>[] CA = IOUtils.CA;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/** 验证长度是24bit位整数倍 */</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> eLen = (bytesLen / <span class=\"number\">3</span>) * <span class=\"number\">3</span>;</span><br><span class=\"line\">     <span class=\"comment\">/** base64 编码字符长度</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      *  base64 :</span></span><br><span class=\"line\"><span class=\"comment\">      *  第一步，将每三个字节作为一组，一共是24个二进制位。</span></span><br><span class=\"line\"><span class=\"comment\">      *  第二步，将这24个二进制位分为四组，每个组有6个二进制位。</span></span><br><span class=\"line\"><span class=\"comment\">      *  第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。</span></span><br><span class=\"line\"><span class=\"comment\">      *  第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      *  ref: http://www.ruanyifeng.com/blog/2008/06/base64.html</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> charsLen = ((bytesLen - <span class=\"number\">1</span>) / <span class=\"number\">3</span> + <span class=\"number\">1</span>) &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\">     <span class=\"comment\">// char[] chars = new char[charsLen];</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> offset = count;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> newcount = count + charsLen + <span class=\"number\">2</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             write(quote);</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>; s &lt; eLen;) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">/** 三个字节为一组, 扩展为四个字节 */</span></span><br><span class=\"line\">                 <span class=\"keyword\">int</span> i = (bytes[s++] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">16</span> | (bytes[s++] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">8</span> | (bytes[s++] &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 write(CA[(i &gt;&gt;&gt; <span class=\"number\">18</span>) &amp; <span class=\"number\">0x3f</span>]);</span><br><span class=\"line\">                 write(CA[(i &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">0x3f</span>]);</span><br><span class=\"line\">                 write(CA[(i &gt;&gt;&gt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0x3f</span>]);</span><br><span class=\"line\">                 <span class=\"comment\">/** 填充00 */</span></span><br><span class=\"line\">                 write(CA[i &amp; <span class=\"number\">0x3f</span>]);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"comment\">/** 对齐并编码剩余不足3个字节为一组的数据 */</span></span><br><span class=\"line\">             <span class=\"comment\">// Pad and encode last bits if source isn't even 24 bits.</span></span><br><span class=\"line\">             <span class=\"keyword\">int</span> left = bytesLen - eLen; <span class=\"comment\">// 0 - 2.</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                  * a) 1个字节的情况：</span></span><br><span class=\"line\"><span class=\"comment\">                  * 将这1字节8位二进制，每6位分成2组，最后一组除了前面加00，后面加上0000，</span></span><br><span class=\"line\"><span class=\"comment\">                  * 这样得到 两位的Base64编码， 在末尾补上2个\"=\"号</span></span><br><span class=\"line\"><span class=\"comment\">                  *</span></span><br><span class=\"line\"><span class=\"comment\">                  * b) 2个字节的情况：</span></span><br><span class=\"line\"><span class=\"comment\">                  * 将这2字节的一共16个二进制位，每6位分成3组，最后一组除了前面加00，后面也要加00，</span></span><br><span class=\"line\"><span class=\"comment\">                  * 这样得到 3位的Base64编码， 在末尾补上\"=\"号</span></span><br><span class=\"line\"><span class=\"comment\">                  *</span></span><br><span class=\"line\"><span class=\"comment\">                  *</span></span><br><span class=\"line\"><span class=\"comment\">                  * 如果只有1个字节，按照前面规则a)</span></span><br><span class=\"line\"><span class=\"comment\">                  * 第1组是6位，第2组后面4个0， 因此应该左移 10 = 6 + 4</span></span><br><span class=\"line\"><span class=\"comment\">                  *</span></span><br><span class=\"line\"><span class=\"comment\">                  * 如果只有2个字节，按照前面规则b)</span></span><br><span class=\"line\"><span class=\"comment\">                  * 第1个字节左移 10 位 加上 第2个字节左移 2 位补0即可</span></span><br><span class=\"line\"><span class=\"comment\">                  */</span></span><br><span class=\"line\">                 <span class=\"keyword\">int</span> i = ((bytes[eLen] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">10</span>) | (left == <span class=\"number\">2</span> ? ((bytes[bytesLen - <span class=\"number\">1</span>] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">2</span>) : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"comment\">/** 扩展为四个字节 */</span></span><br><span class=\"line\">                 write(CA[i &gt;&gt; <span class=\"number\">12</span>]);</span><br><span class=\"line\">                 write(CA[(i &gt;&gt;&gt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0x3f</span>]);</span><br><span class=\"line\">                 write(left == <span class=\"number\">2</span> ? CA[i &amp; <span class=\"number\">0x3f</span>] : <span class=\"string\">'='</span>);</span><br><span class=\"line\">                 write(<span class=\"string\">'='</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">             write(quote);</span><br><span class=\"line\">             <span class=\"keyword\">return</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         expandCapacity(newcount);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     count = newcount;</span><br><span class=\"line\">     buf[offset++] = quote;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// Encode even 24-bits</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> s = <span class=\"number\">0</span>, d = offset; s &lt; eLen;) &#123;</span><br><span class=\"line\">         <span class=\"comment\">/** 三个字节为一组, 扩展为四个字节 */</span></span><br><span class=\"line\">         <span class=\"keyword\">int</span> i = (bytes[s++] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">16</span> | (bytes[s++] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">8</span> | (bytes[s++] &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">// Encode the int into four chars</span></span><br><span class=\"line\">         buf[d++] = CA[(i &gt;&gt;&gt; <span class=\"number\">18</span>) &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">         buf[d++] = CA[(i &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">         buf[d++] = CA[(i &gt;&gt;&gt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">         <span class=\"comment\">/** 填充00 */</span></span><br><span class=\"line\">         buf[d++] = CA[i &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/** 对齐并编码剩余不足3个字节为一组的数据 */</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> left = bytesLen - eLen; <span class=\"comment\">// 0 - 2.</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// Prepare the int</span></span><br><span class=\"line\">         <span class=\"keyword\">int</span> i = ((bytes[eLen] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">10</span>) | (left == <span class=\"number\">2</span> ? ((bytes[bytesLen - <span class=\"number\">1</span>] &amp; <span class=\"number\">0xff</span>) &lt;&lt; <span class=\"number\">2</span>) : <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">/** 扩展为四个字节 */</span></span><br><span class=\"line\">         buf[newcount - <span class=\"number\">5</span>] = CA[i &gt;&gt; <span class=\"number\">12</span>];</span><br><span class=\"line\">         buf[newcount - <span class=\"number\">4</span>] = CA[(i &gt;&gt;&gt; <span class=\"number\">6</span>) &amp; <span class=\"number\">0x3f</span>];</span><br><span class=\"line\">         buf[newcount - <span class=\"number\">3</span>] = left == <span class=\"number\">2</span> ? CA[i &amp; <span class=\"number\">0x3f</span>] : <span class=\"string\">'='</span>;</span><br><span class=\"line\">         buf[newcount - <span class=\"number\">2</span>] = <span class=\"string\">'='</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     buf[newcount - <span class=\"number\">1</span>] = quote;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><code>writeByteArray</code>序列化字节数组实际上就是做了base64编码转换，代码添加了详尽的注释帮助理解。</p>\n<h3 id=\"序列化字符串\"><a href=\"#序列化字符串\" class=\"headerlink\" title=\"序列化字符串\"></a>序列化字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(String str, <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 计算总共字符串长度 */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + len;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果字符串str超过缓冲区大小, 进行循环拷贝</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 计算当前buffer剩余容纳字符数 */</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> rest = buf.length - count;</span><br><span class=\"line\">                <span class=\"comment\">/** 将字符串str[off, off + rest) 拷贝到buf[count, ...]中*/</span></span><br><span class=\"line\">                str.getChars(off, off + rest, buf, count);</span><br><span class=\"line\">                count = buf.length;</span><br><span class=\"line\">                <span class=\"comment\">/** 强制刷新输出流，会重置count = 0 */</span></span><br><span class=\"line\">                flush();</span><br><span class=\"line\">                <span class=\"comment\">/** 计算剩余需要拷贝的字符数量 */</span></span><br><span class=\"line\">                len -= rest;</span><br><span class=\"line\">                <span class=\"comment\">/** 剩余要拷贝字符在str中偏移量(索引) */</span></span><br><span class=\"line\">                off += rest;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (len &gt; buf.length);</span><br><span class=\"line\">            newcount = len;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 存储空间充足，直接将str[off, off + len) 拷贝到buf[count, ...]中*/</span></span><br><span class=\"line\">    str.getChars(off, off + len, buf, count);</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化字符串<code>write(string)</code>,最终都会转化为上面形式<code>write(string, 0, string.length)</code>。</p>\n<h3 id=\"序列化字符数组\"><a href=\"#序列化字符数组\" class=\"headerlink\" title=\"序列化字符数组\"></a>序列化字符数组</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"keyword\">char</span> c[], <span class=\"keyword\">int</span> off, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (off &lt; <span class=\"number\">0</span> <span class=\"comment\">//</span></span><br><span class=\"line\">        || off &gt; c.length <span class=\"comment\">//</span></span><br><span class=\"line\">        || len &lt; <span class=\"number\">0</span> <span class=\"comment\">//</span></span><br><span class=\"line\">        || off + len &gt; c.length <span class=\"comment\">//</span></span><br><span class=\"line\">        || off + len &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (len == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 计算总共字符串长度 */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + len;</span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 如果字符数组c超过缓冲区大小, 进行循环拷贝</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 计算当前buffer剩余容纳字符数 */</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> rest = buf.length - count;</span><br><span class=\"line\">                <span class=\"comment\">/** c[off, off + rest) 拷贝到buf[count, ...]中*/</span></span><br><span class=\"line\">                System.arraycopy(c, off, buf, count, rest);</span><br><span class=\"line\">                count = buf.length;</span><br><span class=\"line\">                <span class=\"comment\">/** 强制刷新输出流，会重置count = 0 */</span></span><br><span class=\"line\">                flush();</span><br><span class=\"line\">                <span class=\"comment\">/** 计算剩余需要拷贝的字符数量 */</span></span><br><span class=\"line\">                len -= rest;</span><br><span class=\"line\">                <span class=\"comment\">/** 剩余要拷贝字符在c中偏移量(索引) */</span></span><br><span class=\"line\">                off += rest;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (len &gt; buf.length);</span><br><span class=\"line\">            newcount = len;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.arraycopy(c, off, buf, count, len);</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"序列化列表字符串\"><a href=\"#序列化列表字符串\" class=\"headerlink\" title=\"序列化列表字符串\"></a>序列化列表字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 空字符列表，输出[]字符串 */</span></span><br><span class=\"line\">        write(<span class=\"string\">\"[]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = count;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> initOffset = offset;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, list_size = list.size(); i &lt; list_size; ++i) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 循环获取列表中包含的字符串 */</span></span><br><span class=\"line\">        String text = list.get(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> hasSpecial = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (text == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** list包含特殊的null值 */</span></span><br><span class=\"line\">            hasSpecial = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>, len = text.length(); j &lt; len; ++j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(j);</span><br><span class=\"line\">                <span class=\"comment\">/** 包含指定特殊字符 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (hasSpecial = (ch &lt; <span class=\"string\">' '</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                                  || ch &gt; <span class=\"string\">'~'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                                  || ch == <span class=\"string\">'\"'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                                  || ch == <span class=\"string\">'\\\\'</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hasSpecial) &#123;</span><br><span class=\"line\">            count = initOffset;</span><br><span class=\"line\">            write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; list.size(); ++j) &#123;</span><br><span class=\"line\">                text = list.get(j);</span><br><span class=\"line\">                <span class=\"comment\">/** 每个字符用,隔开输出 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    write(<span class=\"string\">','</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (text == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 字符串为空，直接输出null字符串 */</span></span><br><span class=\"line\">                    write(<span class=\"string\">\"null\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 使用双引号输出，并且处理特殊字符, 下文有分析 */</span></span><br><span class=\"line\">                    writeStringWithDoubleQuote(text, (<span class=\"keyword\">char</span>) <span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 计算新的字符占用空间，额外3个字符用于存储 \",\" */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> newcount = offset + text.length() + <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == list.size() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            newcount++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果当前存储空间不够*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">            count = offset;</span><br><span class=\"line\">            <span class=\"comment\">/** 扩容到为原有buf容量1.5倍+1, copy原有buf的字符*/</span></span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            buf[offset++] = <span class=\"string\">'['</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            buf[offset++] = <span class=\"string\">','</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        buf[offset++] = <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** 拷贝text字符串到buffer数组中 */</span></span><br><span class=\"line\">        text.getChars(<span class=\"number\">0</span>, text.length(), buf, offset);</span><br><span class=\"line\">        offset += text.length();</span><br><span class=\"line\">        buf[offset++] = <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 最终构造列表形式 [\"element\", \"element\", ...] */</span></span><br><span class=\"line\">    buf[offset++] = <span class=\"string\">']'</span>;</span><br><span class=\"line\">    count = offset;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>序列化字符串会转化成<code>[“element”, &quot;element&quot;, ...]</code>格式。如果列表字符串中包含特殊字符，调用特化版本<code>writeStringWithDoubleQuote(text, (char) 0)</code>。</p>\n<h3 id=\"序列化包含特殊字符字符串\"><a href=\"#序列化包含特殊字符字符串\" class=\"headerlink\" title=\"序列化包含特殊字符\b字符串\"></a>序列化包含特殊字符\b字符串</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeStringWithDoubleQuote</span><span class=\"params\">(String text, <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> seperator)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (text == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果字符换为空，输出null字符串 */</span></span><br><span class=\"line\">        writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (seperator != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果分隔符不为空白字符' '，输出分隔符 */</span></span><br><span class=\"line\">            write(seperator);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = text.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + len + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (seperator != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        newcount++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果当前存储空间不够 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 写双引号字符 */</span></span><br><span class=\"line\">            write(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; text.length(); ++i) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 循环提取字符串中字符 */</span></span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.BrowserSecure)) &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (ch == <span class=\"string\">'('</span> || ch == <span class=\"string\">')'</span> || ch == <span class=\"string\">'&lt;'</span> || ch == <span class=\"string\">'&gt;'</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                        write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                        write(<span class=\"string\">'u'</span>);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.BrowserCompatible)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\b'</span>      <span class=\"comment\">//  退格</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\\f'</span>   <span class=\"comment\">//  分页</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\\n'</span>   <span class=\"comment\">//  换行</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\\r'</span>   <span class=\"comment\">//  回车</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\\t'</span>   <span class=\"comment\">//  tab</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\"'</span>    <span class=\"comment\">//  双引号</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'/'</span>    <span class=\"comment\">//  左反斜杠</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'\\\\'</span>) &#123;<span class=\"comment\">//  单引号</span></span><br><span class=\"line\">                        <span class=\"comment\">/** 输出转义字符 + 字符ascii码 */</span></span><br><span class=\"line\">                        write(<span class=\"string\">'\\\\'</span>); <span class=\"comment\">//  右反斜杠</span></span><br><span class=\"line\">                        write(replaceChars[(<span class=\"keyword\">int</span>) ch]);</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch &lt; <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                        write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                        write(<span class=\"string\">'u'</span>);</span><br><span class=\"line\">                        write(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">                        write(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">                        write(IOUtils.ASCII_CHARS[ch * <span class=\"number\">2</span>]);</span><br><span class=\"line\">                        write(IOUtils.ASCII_CHARS[ch * <span class=\"number\">2</span> + <span class=\"number\">1</span>]);</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch &gt;= <span class=\"number\">127</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                        write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                        write(<span class=\"string\">'u'</span>);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        write(IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch &lt; IOUtils.specicalFlags_doubleQuotes.length</span><br><span class=\"line\">                        &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] != <span class=\"number\">0</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                        || (ch == <span class=\"string\">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class=\"line\">                        write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (IOUtils.specicalFlags_doubleQuotes[ch] == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                            write(<span class=\"string\">'u'</span>);</span><br><span class=\"line\">                            write(IOUtils.DIGITS[ch &gt;&gt;&gt; <span class=\"number\">12</span> &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                            write(IOUtils.DIGITS[ch &gt;&gt;&gt; <span class=\"number\">8</span> &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                            write(IOUtils.DIGITS[ch &gt;&gt;&gt; <span class=\"number\">4</span> &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                            write(IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>]);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            write(IOUtils.replaceChars[ch]);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 非特殊字符，直接输出 */</span></span><br><span class=\"line\">                write(ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 字符串结束 */</span></span><br><span class=\"line\">            write(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (seperator != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                write(seperator);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** buffer容量不够并且输出器为空，触发扩容 */</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = count + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = start + len;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[count] = <span class=\"string\">'\\\"'</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */</span></span><br><span class=\"line\">    text.getChars(<span class=\"number\">0</span>, len, buf, start);</span><br><span class=\"line\"></span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isEnabled(SerializerFeature.BrowserCompatible)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lastSpecialIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 循环提取字符串中字符 */</span></span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\"'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'/'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\\\'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 记录指定字符最后出现的位置 */</span></span><br><span class=\"line\">                lastSpecialIndex = i;</span><br><span class=\"line\">                newcount += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\b'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\f'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\n'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\r'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\t'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 记录指定字符最后出现的位置 */</span></span><br><span class=\"line\">                lastSpecialIndex = i;</span><br><span class=\"line\">                newcount += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &lt; <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">                lastSpecialIndex = i;</span><br><span class=\"line\">                newcount += <span class=\"number\">5</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &gt;= <span class=\"number\">127</span>) &#123;</span><br><span class=\"line\">                lastSpecialIndex = i;</span><br><span class=\"line\">                newcount += <span class=\"number\">5</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果存储空间不足，触发到(1.5倍buffer大小+1) */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 逆向从指定特殊字符开始遍历 */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lastSpecialIndex; i &gt;= start; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\b'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\f'</span><span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\n'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\r'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\t'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 将字符后移一位，插入转译字符\\ */</span></span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">2</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                <span class=\"comment\">/** 将特殊字符转换成普通单字符 */</span></span><br><span class=\"line\">                buf[i + <span class=\"number\">1</span>] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                end += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\"'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'/'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || ch == <span class=\"string\">'\\\\'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 和上面处理一致，不需要单独替换成普通字符 */</span></span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">2</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">1</span>] = ch;</span><br><span class=\"line\">                end += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &lt; <span class=\"number\">32</span>) &#123;</span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">6</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">1</span>] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">2</span>] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">3</span>] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">4</span>] = IOUtils.ASCII_CHARS[ch * <span class=\"number\">2</span>];</span><br><span class=\"line\">                buf[i + <span class=\"number\">5</span>] = IOUtils.ASCII_CHARS[ch * <span class=\"number\">2</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">                end += <span class=\"number\">5</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &gt;= <span class=\"number\">127</span>) &#123;</span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">6</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"comment\">/** ascii转换成native编码 */</span></span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">1</span>] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">2</span>] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[i + <span class=\"number\">3</span>] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[i + <span class=\"number\">4</span>] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[i + <span class=\"number\">5</span>] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                end += <span class=\"number\">5</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 追加引用符号 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (seperator != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            buf[count - <span class=\"number\">2</span>] = <span class=\"string\">'\\\"'</span>;</span><br><span class=\"line\">            buf[count - <span class=\"number\">1</span>] = seperator;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            buf[count - <span class=\"number\">1</span>] = <span class=\"string\">'\\\"'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> specialCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lastSpecialIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> firstSpecialIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> lastSpecial = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">']'</span>) &#123; <span class=\"comment\">//   93</span></span><br><span class=\"line\">            <span class=\"comment\">/** 特殊字符参考：http://www.mokuge.com/tool/asciito16/ */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &gt;= <span class=\"number\">0x7F</span> <span class=\"comment\">// 127</span></span><br><span class=\"line\">                    &amp;&amp; (ch == <span class=\"string\">'\\u2028'</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                    || ch == <span class=\"string\">'\\u2029'</span>  <span class=\"comment\">//</span></span><br><span class=\"line\">                    || ch &lt; <span class=\"number\">0xA0</span>)) &#123;   <span class=\"comment\">// 160 [空格]</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (firstSpecialIndex == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    firstSpecialIndex = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                specialCount++;</span><br><span class=\"line\">                lastSpecialIndex = i;</span><br><span class=\"line\">                lastSpecial = ch;</span><br><span class=\"line\">                newcount += <span class=\"number\">4</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> special = (ch &lt; <span class=\"number\">64</span> &amp;&amp; (sepcialBits &amp; (<span class=\"number\">1L</span> &lt;&lt; ch)) != <span class=\"number\">0</span>) || ch == <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (special) &#123;</span><br><span class=\"line\">            specialCount++;</span><br><span class=\"line\">            lastSpecialIndex = i;</span><br><span class=\"line\">            lastSpecial = ch;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'('</span></span><br><span class=\"line\">                    || ch == <span class=\"string\">')'</span></span><br><span class=\"line\">                    || ch == <span class=\"string\">'&lt;'</span></span><br><span class=\"line\">                    || ch == <span class=\"string\">'&gt;'</span></span><br><span class=\"line\">                    || (ch &lt; IOUtils.specicalFlags_doubleQuotes.length <span class=\"comment\">//</span></span><br><span class=\"line\">                &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] == <span class=\"number\">4</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                newcount += <span class=\"number\">4</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstSpecialIndex == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                firstSpecialIndex = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (specialCount &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        newcount += specialCount;</span><br><span class=\"line\">        <span class=\"comment\">/** 包含特殊字符并且buffer空间不够，触发扩容 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 将特殊字符转换成native编码，目的是节省存储空间*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (specialCount == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 行分隔符</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lastSpecial == <span class=\"string\">'\\u2028'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> srcPos = lastSpecialIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> destPos = lastSpecialIndex + <span class=\"number\">6</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> LengthOfCopy = end - lastSpecialIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class=\"line\">                buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'2'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'2'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'8'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 段落分隔符</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lastSpecial == <span class=\"string\">'\\u2029'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> srcPos = lastSpecialIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> destPos = lastSpecialIndex + <span class=\"number\">6</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> LengthOfCopy = end - lastSpecialIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class=\"line\">                buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'2'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'2'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'9'</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lastSpecial == <span class=\"string\">'('</span> || lastSpecial == <span class=\"string\">')'</span> || lastSpecial == <span class=\"string\">'&lt;'</span> || lastSpecial == <span class=\"string\">'&gt;'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> srcPos = lastSpecialIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> destPos = lastSpecialIndex + <span class=\"number\">6</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> LengthOfCopy = end - lastSpecialIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class=\"line\">                buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> ch = lastSpecial;</span><br><span class=\"line\">                buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[++lastSpecialIndex] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                buf[++lastSpecialIndex] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> ch = lastSpecial;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &lt; IOUtils.specicalFlags_doubleQuotes.length <span class=\"comment\">//</span></span><br><span class=\"line\">                    &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> srcPos = lastSpecialIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> destPos = lastSpecialIndex + <span class=\"number\">6</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> LengthOfCopy = end - lastSpecialIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> bufIndex = lastSpecialIndex;</span><br><span class=\"line\">                    buf[bufIndex++] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                    buf[bufIndex++] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> srcPos = lastSpecialIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> destPos = lastSpecialIndex + <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> LengthOfCopy = end - lastSpecialIndex - <span class=\"number\">1</span>;</span><br><span class=\"line\">                    System.arraycopy(buf, srcPos, buf, destPos, LengthOfCopy);</span><br><span class=\"line\">                    buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                    buf[++lastSpecialIndex] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (specialCount &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> textIndex = firstSpecialIndex - start;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> bufIndex = firstSpecialIndex;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = textIndex; i &lt; text.length(); ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 将特殊字符转换成native编码，目的是节省存储空间*/</span> </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (browserSecure &amp;&amp; (ch == <span class=\"string\">'('</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">')'</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'&lt;'</span></span><br><span class=\"line\">                        || ch == <span class=\"string\">'&gt;'</span>)) &#123;</span><br><span class=\"line\">                    buf[bufIndex++] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                    buf[bufIndex++] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                    end += <span class=\"number\">5</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch &lt; IOUtils.specicalFlags_doubleQuotes.length <span class=\"comment\">//</span></span><br><span class=\"line\">                    &amp;&amp; IOUtils.specicalFlags_doubleQuotes[ch] != <span class=\"number\">0</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                    || (ch == <span class=\"string\">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class=\"line\">                    buf[bufIndex++] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (IOUtils.specicalFlags_doubleQuotes[ch] == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">                        buf[bufIndex++] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        end += <span class=\"number\">5</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        buf[bufIndex++] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                        end++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 行分隔符 、段落分隔符</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\u2028'</span> || ch == <span class=\"string\">'\\u2029'</span>) &#123;</span><br><span class=\"line\">                        buf[bufIndex++] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                        buf[bufIndex++] = <span class=\"string\">'u'</span>;</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">12</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[(ch &gt;&gt;&gt; <span class=\"number\">4</span>) &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        buf[bufIndex++] = IOUtils.DIGITS[ch &amp; <span class=\"number\">15</span>];</span><br><span class=\"line\">                        end += <span class=\"number\">5</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        buf[bufIndex++] = ch;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (seperator != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        buf[count - <span class=\"number\">2</span>] = <span class=\"string\">'\\\"'</span>;</span><br><span class=\"line\">        buf[count - <span class=\"number\">1</span>] = seperator;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        buf[count - <span class=\"number\">1</span>] = <span class=\"string\">'\\\"'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>writeStringWithDoubleQuote方法实现实在是太长了，这个方法主要做了以下几件事情：</p>\n<ol>\n<li>\b\b如果开启序列化BrowserCompatible特性，执行ascii转换成native编码，节省空间。</li>\n<li>如果输出器writer不为空，会自动触发\bbuffer扩容<code>(原有容量1.5倍+1)</code>。</li>\n</ol>\n<p>\b另外一个针对特殊字符的字符串序列化\b方法writeStringWithDoubleQuote(char[] text, final char seperator)，因为和writeStringWithDoubleQuote(String text, final char seperator)版本极其类似，所以不再冗余分析。</p>\n<p>序列化字符串的方法包括添加单引号的版本，详细请参考 writeStringWithSingleQuote ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">writeStringWithSingleQuote</span><span class=\"params\">(String text)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (text == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> newcount = count + <span class=\"number\">4</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">            expandCapacity(newcount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果字符串为null，输出\"null\"字符串 */</span></span><br><span class=\"line\">        <span class=\"string\">\"null\"</span>.getChars(<span class=\"number\">0</span>, <span class=\"number\">4</span>, buf, count);</span><br><span class=\"line\">        count = newcount;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = text.length();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newcount = count + len + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用单引号输出字符串值 */</span></span><br><span class=\"line\">            write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; text.length(); ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span> ch = text.charAt(i);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &lt;= <span class=\"number\">13</span> || ch == <span class=\"string\">'\\\\'</span> || ch == <span class=\"string\">'\\''</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                    || (ch == <span class=\"string\">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果包含特殊字符 或者 单字符'\\' ''' ，添加转译并且替换为普通字符*/</span></span><br><span class=\"line\">                    write(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                    write(replaceChars[(<span class=\"keyword\">int</span>) ch]);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    write(ch);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            write(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** buffer容量不够并且输出器为空，触发扩容 */</span></span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start = count + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = start + len;</span><br><span class=\"line\"></span><br><span class=\"line\">    buf[count] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** buffer能够容纳字符串，直接拷贝text到buf缓冲数组 */</span></span><br><span class=\"line\">    text.getChars(<span class=\"number\">0</span>, len, buf, start);</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> specialCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lastSpecialIndex = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> lastSpecial = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &lt;= <span class=\"number\">13</span> || ch == <span class=\"string\">'\\\\'</span> || ch == <span class=\"string\">'\\''</span> <span class=\"comment\">//</span></span><br><span class=\"line\">            || (ch == <span class=\"string\">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 记录特殊字符个数和最后一个特殊字符索引 */</span></span><br><span class=\"line\">            specialCount++;</span><br><span class=\"line\">            lastSpecialIndex = i;</span><br><span class=\"line\">            lastSpecial = ch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    newcount += specialCount;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newcount &gt; buf.length) &#123;</span><br><span class=\"line\">        expandCapacity(newcount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    count = newcount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (specialCount == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符*/</span></span><br><span class=\"line\">        System.arraycopy(buf, lastSpecialIndex + <span class=\"number\">1</span>, buf, lastSpecialIndex + <span class=\"number\">2</span>, end - lastSpecialIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">        buf[++lastSpecialIndex] = replaceChars[(<span class=\"keyword\">int</span>) lastSpecial];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (specialCount &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        System.arraycopy(buf, lastSpecialIndex + <span class=\"number\">1</span>, buf, lastSpecialIndex + <span class=\"number\">2</span>, end - lastSpecialIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">        buf[lastSpecialIndex] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">        buf[++lastSpecialIndex] = replaceChars[(<span class=\"keyword\">int</span>) lastSpecial];</span><br><span class=\"line\">        end++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = lastSpecialIndex - <span class=\"number\">2</span>; i &gt;= start; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> ch = buf[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &lt;= <span class=\"number\">13</span> || ch == <span class=\"string\">'\\\\'</span> || ch == <span class=\"string\">'\\''</span> <span class=\"comment\">//</span></span><br><span class=\"line\">                || (ch == <span class=\"string\">'/'</span> &amp;&amp; isEnabled(SerializerFeature.WriteSlashAsSpecial))) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 将字符后移一位，插入转译字符\\ 并替换特殊字符为普通字符*/</span></span><br><span class=\"line\">                System.arraycopy(buf, i + <span class=\"number\">1</span>, buf, i + <span class=\"number\">2</span>, end - i - <span class=\"number\">1</span>);</span><br><span class=\"line\">                buf[i] = <span class=\"string\">'\\\\'</span>;</span><br><span class=\"line\">                buf[i + <span class=\"number\">1</span>] = replaceChars[(<span class=\"keyword\">int</span>) ch];</span><br><span class=\"line\">                end++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 字符串结尾添加单引号引用 */</span></span><br><span class=\"line\">    buf[count - <span class=\"number\">1</span>] = <span class=\"string\">'\\''</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>writeStringWithSingleQuote这个方法主要做了以下几件事情：</p>\n<ol>\n<li>\b\b针对特殊字符，添加转译字符并且替换特殊字符为普通字符</li>\n<li>如果输出器writer不为空，会自动触发\bbuffer扩容<code>(原有容量1.5倍+1)</code>。</li>\n</ol>\n<p>\b另外一个针对特殊字符的字符串序列化\b方法<code>writeStringWithSingleQuote(char[])</code>，因为和<code>writeStringWithSingleQuote(String)</code>版本极其类似，所以不再冗余分析。</p>\n"},{"title":"注册反序列化解析（十一）","subtitle":"fastjson针对常用的类型已经注册了反序列化实现方案，根据源代码注册`com.alibaba.fastjson.parser.ParserConfig#initDeserializers`可以得到列表","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:12:14.000Z","_content":"\n## 反序列化回调接口实现分析\n\n### 内部注册的反序列化\n\nfastjson针对常用的类型已经注册了反序列化实现方案，根据源代码注册`com.alibaba.fastjson.parser.ParserConfig#initDeserializers`可以得到列表：\n\n| 注册的类型 | 反序列化实例 | 是否支持序列化 | 是否支持反序列化 |\n| :--- | :--- | :---: | :---: |\n| SimpleDateFormat | MiscCodec | 是 | 是 |\n| Timestamp | SqlDateDeserializer | - | 是 |\n| Date | SqlDateDeserializer | - | 是 |\n| Time | TimeDeserializer | - | 是 |\n| Date | DateCodec | 是 | 是 |\n| Calendar | CalendarCodec | 是 | 是 |\n| XMLGregorianCalendar | CalendarCodec | 是 | 是 |\n| JSONObject | MapDeserializer | -| 是 |\n| JSONArray | CollectionCodec | 是 | 是 |\n| Map | MapDeserializer | -| 是 |\n| HashMap | MapDeserializer | -| 是 |\n| LinkedHashMap | MapDeserializer | -| 是 |\n| TreeMap | MapDeserializer | -| 是 |\n| ConcurrentMap | MapDeserializer | -| 是 |\n| ConcurrentHashMap | MapDeserializer | -| 是 |\n| Collection | CollectionCodec | 是 | 是 |\n| List | CollectionCodec | 是 | 是 |\n| ArrayList | CollectionCodec | 是 | 是 |\n| Object | JavaObjectDeserializer | - | 是 |\n| String | StringCodec | 是 | 是 |\n| StringBuffer | StringCodec | 是 | 是 |\n| StringBuilder | StringCodec | 是 | 是 |\n| char | CharacterCodec | 是 | 是 |\n| Character | CharacterCodec | 是 | 是 |\n| byte | NumberDeserializer | - | 是 |\n| Byte | NumberDeserializer | - | 是 |\n| short | NumberDeserializer | - | 是 |\n| Short | NumberDeserializer | - | 是 |\n| int | IntegerCodec | 是 | 是 |\n| Integer | IntegerCodec | 是 | 是 |\n| long | LongCodec | 是 | 是 |\n| Long | LongCodec | 是 | 是 |\n| BigInteger | BigIntegerCodec | 是 | 是 |\n| BigDecimal | BigDecimalCodec | 是 | 是 |\n| float | FloatCodec | 是 | 是 |\n| Float | FloatCodec | 是 | 是 |\n| double | NumberDeserializer | 是 | 是 |\n| Double | NumberDeserializer | 是 | 是 |\n| boolean | BooleanCodec | 是 | 是 |\n| Boolean | BooleanCodec | 是 | 是 |\n| Class | MiscCodec | 是 | 是 |\n| char[] | CharArrayCodec | 是 | 是 |\n| AtomicBoolean | BooleanCodec | 是 | 是 |\n| AtomicBoolean | IntegerCodec | 是 | 是 |\n| AtomicLong | LongCodec | 是 | 是 |\n| AtomicReference | ReferenceCodec | 是 | 是 |\n| WeakReference | ReferenceCodec | 是 | 是 |\n| SoftReference | ReferenceCodec | 是 | 是 |\n| UUID | MiscCodec | 是 | 是 |\n| TimeZone | MiscCodec | 是 | 是 |\n| Locale | MiscCodec | 是 | 是 |\n| Currency | MiscCodec | 是 | 是 |\n| InetAddress | MiscCodec | 是 | 是 |\n| Inet4Address | MiscCodec | 是 | 是 |\n| Inet6Address | MiscCodec | 是 | 是 |\n| InetSocketAddress | MiscCodec | 是 | 是 |\n| File | MiscCodec | 是 | 是 |\n| URI | MiscCodec | 是 | 是 |\n| URL | MiscCodec | 是 | 是 |\n| Pattern | MiscCodec | 是 | 是 |\n| Charset | MiscCodec | 是 | 是 |\n| JSONPath | MiscCodec | 是 | 是 |\n| Number | NumberDeserializer | - | 是 |\n| AtomicIntegerArray | AtomicCodec | 是 | 是 |\n| AtomicLongArray | AtomicCodec | 是 | 是 |\n| StackTraceElement | StackTraceElementDeserializer | - | 是 |\n| Serializable | JavaObjectDeserializer | - | 是 |\n| Cloneable | JavaObjectDeserializer | - | 是 |\n| Comparable | JavaObjectDeserializer | - | 是 |\n| Closeable | JavaObjectDeserializer | - | 是 |\n| JSONPObject | JSONPDeserializer | - | 是 |\n\n通过上面表格发现几乎把所有JDK常用的类型都注册了一遍，目的是在运行时能够查找到特定的反序列化实例而不需要使用默认Java的反序列化实例。\n\n我们先从常见的类型开始分析反序列化实现。\n\n### BooleanCodec反序列化\n\n```java\n    public <T> T deserialze(DefaultJSONParser parser, Type clazz, Object fieldName) {\n        final JSONLexer lexer = parser.lexer;\n\n        Boolean boolObj;\n\n        try {\n            /** 遇到true类型的token，预读下一个token */\n            if (lexer.token() == JSONToken.TRUE) {\n                lexer.nextToken(JSONToken.COMMA);\n                boolObj = Boolean.TRUE;\n                /** 遇到false类型的token，预读下一个token */\n            } else if (lexer.token() == JSONToken.FALSE) {\n                lexer.nextToken(JSONToken.COMMA);\n                boolObj = Boolean.FALSE;\n            } else if (lexer.token() == JSONToken.LITERAL_INT) {\n                /** 遇到整数类型的token，预读下一个token */\n                int intValue = lexer.intValue();\n                lexer.nextToken(JSONToken.COMMA);\n\n                /** 1代表true，其他情况false */\n                if (intValue == 1) {\n                    boolObj = Boolean.TRUE;\n                } else {\n                    boolObj = Boolean.FALSE;\n                }\n            } else {\n                Object value = parser.parse();\n\n                if (value == null) {\n                    return null;\n                }\n\n                /** 处理其他情况，比如Y,T代表true */\n                boolObj = TypeUtils.castToBoolean(value);\n            }\n        } catch (Exception ex) {\n            throw new JSONException(\"parseBoolean error, field : \" + fieldName, ex);\n        }\n\n        /** 如果是原子类型 */\n        if (clazz == AtomicBoolean.class) {\n            return (T) new AtomicBoolean(boolObj.booleanValue());\n        }\n\n        return (T) boolObj;\n    }\n```\n\n每次反序列化拿到token是，当前记录的字符`ch`变量实际是token结尾的下一个字符，`boolean`类型字段会触发该接口。\n\n### CharacterCodec反序列化\n\n```java\n    public <T> T deserialze(DefaultJSONParser parser, Type clazz, Object fieldName) {\n        /** 根据token解析类型 */\n        Object value = parser.parse();\n        return value == null\n            ? null\n            /** 转换成char类型，如果是string取字符串第一个char */\n            : (T) TypeUtils.castToChar(value);\n    }\n\n    public Object parse() {\n        return parse(null);\n    }\n```\n\n看着反序列化应该挺简单，但是内部解析值委托给了`DefaultJSONParser#parse(java.lang.Object)`, 会把字符串解析取第一个字符处理：\n\n```java\n    public Object parse(Object fieldName) {\n        final JSONLexer lexer = this.lexer;\n        switch (lexer.token()) {\n            /**\n             *  ...忽略其他类型token，后面遇到会讲解\n             * /\n            case LITERAL_STRING:\n                /** 探测到是字符串类型，解析值 */\n                String stringLiteral = lexer.stringVal();\n                lexer.nextToken(JSONToken.COMMA);\n\n                if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n                    JSONScanner iso8601Lexer = new JSONScanner(stringLiteral);\n                    try {\n                        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n                            return iso8601Lexer.getCalendar().getTime();\n                        }\n                    } finally {\n                        iso8601Lexer.close();\n                    }\n                }\n\n                return stringLiteral;\n            /**\n             *  ...忽略其他类型token，后面遇到会讲解\n             * /\n        }\n    }\n```\n\n### IntegerCodec反序列化\n\n```java\n    public <T> T deserialze(DefaultJSONParser parser, Type clazz, Object fieldName) {\n        final JSONLexer lexer = parser.lexer;\n\n        final int token = lexer.token();\n\n        /** 如果解析到null值，返回null */\n        if (token == JSONToken.NULL) {\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        }\n\n\n        Integer intObj;\n        try {\n            if (token == JSONToken.LITERAL_INT) {\n                /** 整型字面量，预读下一个token */\n                int val = lexer.intValue();\n                lexer.nextToken(JSONToken.COMMA);\n                intObj = Integer.valueOf(val);\n            } else if (token == JSONToken.LITERAL_FLOAT) {\n                /** 浮点数字面量，预读下一个token */\n                BigDecimal decimalValue = lexer.decimalValue();\n                lexer.nextToken(JSONToken.COMMA);\n                intObj = Integer.valueOf(decimalValue.intValue());\n            } else {\n                if (token == JSONToken.LBRACE) {\n\n                    /** 处理历史原因反序列化AtomicInteger成map */\n                    JSONObject jsonObject = new JSONObject(true);\n                    parser.parseObject(jsonObject);\n                    intObj = TypeUtils.castToInt(jsonObject);\n                } else {\n                    /** 处理其他情况 */\n                    Object value = parser.parse();\n                    intObj = TypeUtils.castToInt(value);\n                }\n            }\n        } catch (Exception ex) {\n            throw new JSONException(\"parseInt error, field : \" + fieldName, ex);\n        }\n\n        \n        if (clazz == AtomicInteger.class) {\n            return (T) new AtomicInteger(intObj.intValue());\n        }\n        \n        return (T) intObj;\n    }\n```\n\n针对特殊场景AutomicInteger类型，可以通过单元测试`com.alibaba.json.bvt.parser.AtomicIntegerComptableAndroidTest#test_for_compatible_zero`进行动手实践调试：\n\n```java\n    public void test_for_compatible_zero() throws Exception {\n        String text = \"{\\\"andIncrement\\\":-1,\\\"andDecrement\\\":0}\";\n\n        assertEquals(0, JSON.parseObject(text, AtomicInteger.class).intValue());\n    }\n```\n\n继续对`parseObject(jsonObject)`进行分析：\n\n```java\n    public Object parseObject(final Map object) {\n        return parseObject(object, null);\n    }\n\n\n```\n\n### LongCodec反序列化\n\n因为和整数反序列化极其类似，请参考`IntegerCodec`不进行冗余分析。\n\n### FloatCodec反序列化\n\n```java\n    public static <T> T deserialze(DefaultJSONParser parser) {\n        final JSONLexer lexer = parser.lexer;\n\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n            /** 整型字面量，预读下一个token */\n            String val = lexer.numberString();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) Float.valueOf(Float.parseFloat(val));\n        }\n\n        if (lexer.token() == JSONToken.LITERAL_FLOAT) {\n            /** 浮点数字面量，预读下一个token */\n            float val = lexer.floatValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) Float.valueOf(val);\n        }\n\n        /** 处理其他情况 */\n        Object value = parser.parse();\n\n        if (value == null) {\n            return null;\n        }\n\n        return (T) TypeUtils.castToFloat(value);\n    }\n```\n\n### BigDecimalCodec反序列化\n\n```java\n    public static <T> T deserialze(DefaultJSONParser parser) {\n        final JSONLexer lexer = parser.lexer;\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n            /** 整型字面量，预读下一个token */\n            BigDecimal decimalValue = lexer.decimalValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) decimalValue;\n        }\n\n        if (lexer.token() == JSONToken.LITERAL_FLOAT) {\n            /** 浮点数字面量，预读下一个token */\n            BigDecimal val = lexer.decimalValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) val;\n        }\n\n        Object value = parser.parse();\n        return value == null //\n            ? null //\n            : (T) TypeUtils.castToBigDecimal(value);\n    }\n```\n\n### StringCodec反序列化\n\n```java\n    public <T> T deserialze(DefaultJSONParser parser, Type clazz, Object fieldName) {\n        if (clazz == StringBuffer.class) {\n            /** 将解析的字符序列转换成StringBuffer */\n            final JSONLexer lexer = parser.lexer;\n            if (lexer.token() == JSONToken.LITERAL_STRING) {\n                /** 字符串字面量，预读下一个token */\n                String val = lexer.stringVal();\n                lexer.nextToken(JSONToken.COMMA);\n\n                return (T) new StringBuffer(val);\n            }\n\n            Object value = parser.parse();\n\n            if (value == null) {\n                return null;\n            }\n\n            return (T) new StringBuffer(value.toString());\n        }\n\n        if (clazz == StringBuilder.class) {\n            /** 将解析的字符序列转换成StringBuilder */\n            final JSONLexer lexer = parser.lexer;\n            if (lexer.token() == JSONToken.LITERAL_STRING) {\n                String val = lexer.stringVal();\n                /** 字符串字面量，预读下一个token */\n                lexer.nextToken(JSONToken.COMMA);\n\n                return (T) new StringBuilder(val);\n            }\n\n            Object value = parser.parse();\n\n            if (value == null) {\n                return null;\n            }\n\n            return (T) new StringBuilder(value.toString());\n        }\n\n        return (T) deserialze(parser);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T deserialze(DefaultJSONParser parser) {\n        final JSONLexer lexer = parser.getLexer();\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n            /** 字符串字面量，预读下一个token */\n            String val = lexer.stringVal();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) val;\n        }\n\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n            /** 整型字面量，预读下一个token */\n            String val = lexer.numberString();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) val;\n        }\n\n        Object value = parser.parse();\n\n        if (value == null) {\n            return null;\n        }\n\n        return (T) value.toString();\n    }\n```\n\n### ObjectArrayCodec反序列化\n\n```java\n    public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {\n        final JSONLexer lexer = parser.lexer;\n        int token = lexer.token();\n        if (token == JSONToken.NULL) {\n            /** 解析到Null，预读下一个token */\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        }\n\n        if (token == JSONToken.LITERAL_STRING || token == JSONToken.HEX) {\n            byte[] bytes = lexer.bytesValue();\n            lexer.nextToken(JSONToken.COMMA);\n\n            if (bytes.length == 0 && type != byte[].class) {\n                return null;\n            }\n\n            return (T) bytes;\n        }\n\n        Class componentClass;\n        Type componentType;\n        if (type instanceof GenericArrayType) {\n            GenericArrayType clazz = (GenericArrayType) type;\n            /** 获取泛型数组真实参数类型 */\n            componentType = clazz.getGenericComponentType();\n            if (componentType instanceof TypeVariable) {\n                TypeVariable typeVar = (TypeVariable) componentType;\n                Type objType = parser.getContext().type;\n                if (objType instanceof ParameterizedType) {\n                    /** 获取泛型参数化类型，eg: Collection<String> */\n                    ParameterizedType objParamType = (ParameterizedType) objType;\n                    Type objRawType = objParamType.getRawType();\n                    Type actualType = null;\n                    if (objRawType instanceof Class) {\n                        /** 遍历Class包含的参数化类型，查找与泛型数组类型名字一致的作为真实类型 */\n                        TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();\n                        for (int i = 0; i < objTypeParams.length; ++i) {\n                            if (objTypeParams[i].getName().equals(typeVar.getName())) {\n                                actualType = objParamType.getActualTypeArguments()[i];\n                            }\n                        }\n                    }\n                    if (actualType instanceof Class) {\n                        componentClass = (Class) actualType;\n                    } else {\n                        componentClass = Object.class;\n                    }\n                } else {\n                    // 获取数组类型上界\n                    componentClass = TypeUtils.getClass(typeVar.getBounds()[0]);\n                }\n            } else {\n                componentClass = TypeUtils.getClass(componentType);\n            }\n        } else {\n            /** 非泛型数组，普通对象数组 */\n            Class clazz = (Class) type;\n            componentType = componentClass = clazz.getComponentType();\n        }\n        JSONArray array = new JSONArray();\n        /** 根据token解析数组元素放到array中 */\n        parser.parseArray(componentType, array, fieldName);\n\n        return (T) toObjectArray(parser, componentClass, array);\n    }\n\n```\n\n### JavaBeanDeserializer反序列化\n\n为了节省冗余的分析，我们主要分析最复杂的默认`JavaBeanDeserializer`反序列化实现。\n\n\n```java\n   public JavaBeanDeserializer(ParserConfig config, JavaBeanInfo beanInfo){\n        /** java对象类名称 */\n        this.clazz = beanInfo.clazz;\n        this.beanInfo = beanInfo;\n\n        Map<String, FieldDeserializer> alterNameFieldDeserializers = null;\n        sortedFieldDeserializers = new FieldDeserializer[beanInfo.sortedFields.length];\n        /**\n         *  给已排序的字段创建反序列化实例，如果字段有别名，\n         *  关联别名到反序列化的映射\n         */\n        for (int i = 0, size = beanInfo.sortedFields.length; i < size; ++i) {\n            FieldInfo fieldInfo = beanInfo.sortedFields[i];\n            FieldDeserializer fieldDeserializer = config.createFieldDeserializer(config, beanInfo, fieldInfo);\n\n            sortedFieldDeserializers[i] = fieldDeserializer;\n\n            for (String name : fieldInfo.alternateNames) {\n                if (alterNameFieldDeserializers == null) {\n                    alterNameFieldDeserializers = new HashMap<String, FieldDeserializer>();\n                }\n                alterNameFieldDeserializers.put(name, fieldDeserializer);\n            }\n        }\n        this.alterNameFieldDeserializers = alterNameFieldDeserializers;\n\n        fieldDeserializers = new FieldDeserializer[beanInfo.fields.length];\n        for (int i = 0, size = beanInfo.fields.length; i < size; ++i) {\n            FieldInfo fieldInfo = beanInfo.fields[i];\n            /** 采用二分法在sortedFieldDeserializers中查找已创建的反序列化类型 */\n            FieldDeserializer fieldDeserializer = getFieldDeserializer(fieldInfo.name);\n            fieldDeserializers[i] = fieldDeserializer;\n        }\n    }\n```\n\n构造函数就是简单构造类字段对应的反序列化\b实例而已，接下来看下关键实现：\n\n```java\n    protected <T> T deserialze(DefaultJSONParser parser,\n                               Type type,\n                               Object fieldName,\n                               Object object,\n                               int features,\n                               int[] setFlags) {\n        if (type == JSON.class || type == JSONObject.class) {\n            /** 根据当前token类型判断解析对象 */\n            return (T) parser.parse();\n        }\n\n        final JSONLexerBase lexer = (JSONLexerBase) parser.lexer;\n        final ParserConfig config = parser.getConfig();\n\n        int token = lexer.token();\n        if (token == JSONToken.NULL) {\n            /** 解析null，预读下一个token并返回 */\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        }\n\n        ParseContext context = parser.getContext();\n        if (object != null && context != null) {\n            context = context.parent;\n        }\n        ParseContext childContext = null;\n\n        try {\n            Map<String, Object> fieldValues = null;\n\n            if (token == JSONToken.RBRACE) {\n                lexer.nextToken(JSONToken.COMMA);\n                /** 遇到}认为遇到对象结束，尝试创建实例对象 */\n                if (object == null) {\n                    object = createInstance(parser, type);\n                }\n                return (T) object;\n            }\n\n            if (token == JSONToken.LBRACKET) {\n                final int mask = Feature.SupportArrayToBean.mask;\n                boolean isSupportArrayToBean = (beanInfo.parserFeatures & mask) != 0\n                                               || lexer.isEnabled(Feature.SupportArrayToBean)\n                                               || (features & mask) != 0\n                                               ;\n                if (isSupportArrayToBean) {\n                    /** 将数组值反序列化为对象，根据sortedFieldDeserializers依次写字段值 */\n                    return deserialzeArrayMapping(parser, type, fieldName, object);\n                }\n            }\n\n            if (token != JSONToken.LBRACE && token != JSONToken.COMMA) {\n                if (lexer.isBlankInput()) {\n                    return null;\n                }\n\n                if (token == JSONToken.LITERAL_STRING) {\n                    String strVal = lexer.stringVal();\n                    /** 读到空值字符串，返回null */\n                    if (strVal.length() == 0) {\n                        lexer.nextToken();\n                        return null;\n                    }\n\n                    if (beanInfo.jsonType != null) {\n                        /** 探测是否是枚举类型 */\n                        for (Class<?> seeAlsoClass : beanInfo.jsonType.seeAlso()) {\n                            if (Enum.class.isAssignableFrom(seeAlsoClass)) {\n                                try {\n                                    Enum<?> e = Enum.valueOf((Class<Enum>) seeAlsoClass, strVal);\n                                    return (T) e;\n                                } catch (IllegalArgumentException e) {\n                                    // skip\n                                }\n                            }\n                        }\n                    }\n                } else if (token == JSONToken.LITERAL_ISO8601_DATE) {\n                    Calendar calendar = lexer.getCalendar();\n                }\n\n                if (token == JSONToken.LBRACKET && lexer.getCurrent() == ']') {\n                    /** 包含零元素的数组 */\n                    lexer.next();\n                    lexer.nextToken();\n                    return null;\n                }\n                \n                StringBuffer buf = (new StringBuffer()) //\n                                                        .append(\"syntax error, expect {, actual \") //\n                                                        .append(lexer.tokenName()) //\n                                                        .append(\", pos \") //\n                                                        .append(lexer.pos());\n\n                if (fieldName instanceof String) {\n                    buf //\n                        .append(\", fieldName \") //\n                        .append(fieldName);\n                }\n\n                buf.append(\", fastjson-version \").append(JSON.VERSION);\n                \n                throw new JSONException(buf.toString());\n            }\n\n            if (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) {\n                parser.resolveStatus = DefaultJSONParser.NONE;\n            }\n\n            String typeKey = beanInfo.typeKey;\n            for (int fieldIndex = 0;; fieldIndex++) {\n                String key = null;\n                FieldDeserializer fieldDeser = null;\n                FieldInfo fieldInfo = null;\n                Class<?> fieldClass = null;\n                JSONField feildAnnotation = null;\n                /** 检查是否所有字段都已经处理 */\n                if (fieldIndex < sortedFieldDeserializers.length) {\n                    fieldDeser = sortedFieldDeserializers[fieldIndex];\n                    fieldInfo = fieldDeser.fieldInfo;\n                    fieldClass = fieldInfo.fieldClass;\n                    feildAnnotation = fieldInfo.getAnnotation();\n                }\n\n                boolean matchField = false;\n                boolean valueParsed = false;\n                \n                Object fieldValue = null;\n                if (fieldDeser != null) {\n                    char[] name_chars = fieldInfo.name_chars;\n                    if (fieldClass == int.class || fieldClass == Integer.class) {\n                        /** 扫描整数值 */\n                        fieldValue = lexer.scanFieldInt(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n                    } else if (fieldClass == long.class || fieldClass == Long.class) {\n                        /** 扫描长整型值 */\n                        fieldValue = lexer.scanFieldLong(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n                    } else if (fieldClass == String.class) {\n                        /** 扫描字符串值 */\n                        fieldValue = lexer.scanFieldString(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n                    } else if (fieldClass == java.util.Date.class && fieldInfo.format == null) {\n                        /** 扫描日期值 */\n                        fieldValue = lexer.scanFieldDate(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (fieldClass == BigDecimal.class) {\n                        /** 扫描高精度值 */\n                        fieldValue = lexer.scanFieldDecimal(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (fieldClass == BigInteger.class) {\n                        fieldValue = lexer.scanFieldBigInteger(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (fieldClass == boolean.class || fieldClass == Boolean.class) {\n                        /** 扫描boolean值 */\n                        fieldValue = lexer.scanFieldBoolean(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n                    } else if (fieldClass == float.class || fieldClass == Float.class) {\n                        /** 扫描浮点值 */\n                        fieldValue = lexer.scanFieldFloat(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n                    } else if (fieldClass == double.class || fieldClass == Double.class) {\n                        /** 扫描double值 */\n                        fieldValue = lexer.scanFieldDouble(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n\n                    } else if (fieldClass.isEnum()\n                            && parser.getConfig().getDeserializer(fieldClass) instanceof EnumDeserializer\n                            && (feildAnnotation == null || feildAnnotation.deserializeUsing() == Void.class)\n                            ) {\n                        if (fieldDeser instanceof DefaultFieldDeserializer) {\n                            ObjectDeserializer fieldValueDeserilizer = ((DefaultFieldDeserializer) fieldDeser).fieldValueDeserilizer;\n                            fieldValue = this.scanEnum(lexer, name_chars, fieldValueDeserilizer);\n\n                            if (lexer.matchStat > 0) {\n                                matchField = true;\n                                valueParsed = true;\n                            } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                                continue;\n                            }\n                        }\n                    } else if (fieldClass == int[].class) {\n                        /** 扫描整型数组值 */\n                        fieldValue = lexer.scanFieldIntArray(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (fieldClass == float[].class) {\n                        fieldValue = lexer.scanFieldFloatArray(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (fieldClass == float[][].class) {\n                        /** 扫描浮点数组值 */\n                        fieldValue = lexer.scanFieldFloatArray2(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (lexer.matchField(name_chars)) {\n                        matchField = true;\n                    } else {\n                        continue;\n                    }\n                }\n\n                /** 如果当前字符串的json不匹配当前字段名称 */\n                if (!matchField) {\n                    /** 将当前的字段名称加入符号表 */\n                    key = lexer.scanSymbol(parser.symbolTable);\n\n                    /** 当前是无效的字段标识符，比如是,等符号 */\n                    if (key == null) {\n                        token = lexer.token();\n                        if (token == JSONToken.RBRACE) {\n                            /** 结束花括号, 预读下一个token */\n                            lexer.nextToken(JSONToken.COMMA);\n                            break;\n                        }\n                        if (token == JSONToken.COMMA) {\n                            if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (\"$ref\" == key && context != null) {\n                        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\n                        token = lexer.token();\n                        if (token == JSONToken.LITERAL_STRING) {\n                            String ref = lexer.stringVal();\n                            if (\"@\".equals(ref)) {\n                                object = context.object;\n                            } else if (\"..\".equals(ref)) {\n                                ParseContext parentContext = context.parent;\n                                if (parentContext.object != null) {\n                                    object = parentContext.object;\n                                } else {\n                                    parser.addResolveTask(new ResolveTask(parentContext, ref));\n                                    parser.resolveStatus = DefaultJSONParser.NeedToResolve;\n                                }\n                            } else if (\"$\".equals(ref)) {\n                                ParseContext rootContext = context;\n                                while (rootContext.parent != null) {\n                                    rootContext = rootContext.parent;\n                                }\n\n                                if (rootContext.object != null) {\n                                    object = rootContext.object;\n                                } else {\n                                    parser.addResolveTask(new ResolveTask(rootContext, ref));\n                                    parser.resolveStatus = DefaultJSONParser.NeedToResolve;\n                                }\n                            } else {\n                                Object refObj = parser.resolveReference(ref);\n                                if (refObj != null) {\n                                    object = refObj;\n                                } else {\n                                    parser.addResolveTask(new ResolveTask(context, ref));\n                                    parser.resolveStatus = DefaultJSONParser.NeedToResolve;\n                                }\n                            }\n                        } else {\n                            throw new JSONException(\"illegal ref, \" + JSONToken.name(token));\n                        }\n\n                        lexer.nextToken(JSONToken.RBRACE);\n                        if (lexer.token() != JSONToken.RBRACE) {\n                            throw new JSONException(\"illegal ref\");\n                        }\n                        lexer.nextToken(JSONToken.COMMA);\n\n                        parser.setContext(context, object, fieldName);\n\n                        return (T) object;\n                    }\n\n                    if ((typeKey != null && typeKey.equals(key))\n                            || JSON.DEFAULT_TYPE_KEY == key) {\n                        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\n                        if (lexer.token() == JSONToken.LITERAL_STRING) {\n                            String typeName = lexer.stringVal();\n                            lexer.nextToken(JSONToken.COMMA);\n\n                            /** 忽略字符串中包含@type解析 */\n                            if (typeName.equals(beanInfo.typeName)|| parser.isEnabled(Feature.IgnoreAutoType)) {\n                                if (lexer.token() == JSONToken.RBRACE) {\n                                    lexer.nextToken();\n                                    break;\n                                }\n                                continue;\n                            }\n                            \n\n                            /** 根据枚举seeAlso查找反序列化实例 */\n                            ObjectDeserializer deserializer = getSeeAlso(config, this.beanInfo, typeName);\n                            Class<?> userType = null;\n\n                            if (deserializer == null) {\n                                /** 无法匹配，查找类对应的泛型或者参数化类型关联的反序列化实例 */\n                                Class<?> expectClass = TypeUtils.getClass(type);\n                                userType = config.checkAutoType(typeName, expectClass, lexer.getFeatures());\n                                deserializer = parser.getConfig().getDeserializer(userType);\n                            }\n\n                            Object typedObject = deserializer.deserialze(parser, userType, fieldName);\n                            if (deserializer instanceof JavaBeanDeserializer) {\n                                JavaBeanDeserializer javaBeanDeserializer = (JavaBeanDeserializer) deserializer;\n                                if (typeKey != null) {\n                                    FieldDeserializer typeKeyFieldDeser = javaBeanDeserializer.getFieldDeserializer(typeKey);\n                                    typeKeyFieldDeser.setValue(typedObject, typeName);\n                                }\n                            }\n                            return (T) typedObject;\n                        } else {\n                            throw new JSONException(\"syntax error\");\n                        }\n                    }\n                }\n\n                /** 第一次创建并初始化对象实例 */\n                if (object == null && fieldValues == null) {\n                    object = createInstance(parser, type);\n                    if (object == null) {\n                        fieldValues = new HashMap<String, Object>(this.fieldDeserializers.length);\n                    }\n                    childContext = parser.setContext(context, object, fieldName);\n                    if (setFlags == null) {\n                        setFlags = new int[(this.fieldDeserializers.length / 32) + 1];\n                    }\n                }\n\n                if (matchField) {\n                    if (!valueParsed) {\n                        /** json串当前满足字段名称，并且没有解析过值 ，\n                         *  直接使用当前字段关联的反序列化实例解析\n                         */\n                        fieldDeser.parseField(parser, object, type, fieldValues);\n                    } else {\n                        if (object == null) {\n                            /** 值已经解析过了，存储到map中 */\n                            fieldValues.put(fieldInfo.name, fieldValue);\n                        } else if (fieldValue == null) {\n                            /** 字段值是null，排除int,long,float,double,boolean */\n                            if (fieldClass != int.class\n                                    && fieldClass != long.class\n                                    && fieldClass != float.class\n                                    && fieldClass != double.class\n                                    && fieldClass != boolean.class\n                                    ) {\n                                fieldDeser.setValue(object, fieldValue);\n                            }\n                        } else {\n                            fieldDeser.setValue(object, fieldValue);\n                        }\n\n                        if (setFlags != null) {\n                            int flagIndex = fieldIndex / 32;\n                            int bitIndex = fieldIndex % 32;\n                            setFlags[flagIndex] |= (1 >> bitIndex);\n                        }\n\n                        if (lexer.matchStat == JSONLexer.END) {\n                            break;\n                        }\n                    }\n                } else {\n                    /** 字段名称当前和json串不匹配，通常顺序或者字段增加或者缺少，\n                     *  根据key查找反序列化实例解析\n                     */\n                    boolean match = parseField(parser, key, object, type, fieldValues, setFlags);\n                    if (!match) {\n                        /** 遇到封闭花括号，与读下一个token，跳出循环 */\n                        if (lexer.token() == JSONToken.RBRACE) {\n                            lexer.nextToken();\n                            break;\n                        }\n\n                        continue;\n                    } else if (lexer.token() == JSONToken.COLON) {\n                        throw new JSONException(\"syntax error, unexpect token ':'\");\n                    }\n                }\n\n                if (lexer.token() == JSONToken.COMMA) {\n                    continue;\n                }\n\n                if (lexer.token() == JSONToken.RBRACE) {\n                    lexer.nextToken(JSONToken.COMMA);\n                    break;\n                }\n\n                if (lexer.token() == JSONToken.IDENTIFIER || lexer.token() == JSONToken.ERROR) {\n                    throw new JSONException(\"syntax error, unexpect token \" + JSONToken.name(lexer.token()));\n                }\n            }\n\n            if (object == null) {\n                if (fieldValues == null) {\n                    /** 第一次创建并初始化对象实例 */\n                    object = createInstance(parser, type);\n                    if (childContext == null) {\n                        childContext = parser.setContext(context, object, fieldName);\n                    }\n                    return (T) object;\n                }\n\n                /** 提取构造函数参数名称 */\n                String[] paramNames = beanInfo.creatorConstructorParameters;\n                final Object[] params;\n                if (paramNames != null) {\n                    params = new Object[paramNames.length];\n                    for (int i = 0; i < paramNames.length; i++) {\n                        String paramName = paramNames[i];\n\n                        Object param = fieldValues.remove(paramName);\n                        /** 解析过的字段不包含当前参数名字 */\n                        if (param == null) {\n                            Type fieldType = beanInfo.creatorConstructorParameterTypes[i];\n                            FieldInfo fieldInfo = beanInfo.fields[i];\n                            /** 探测并设置类型默认值 */\n                            if (fieldType == byte.class) {\n                                param = (byte) 0;\n                            } else if (fieldType == short.class) {\n                                param = (short) 0;\n                            } else if (fieldType == int.class) {\n                                param = 0;\n                            } else if (fieldType == long.class) {\n                                param = 0L;\n                            } else if (fieldType == float.class) {\n                                param = 0F;\n                            } else if (fieldType == double.class) {\n                                param = 0D;\n                            } else if (fieldType == boolean.class) {\n                                param = Boolean.FALSE;\n                            } else if (fieldType == String.class\n                                    && (fieldInfo.parserFeatures & Feature.InitStringFieldAsEmpty.mask) != 0) {\n                                param = \"\";\n                            }\n                        }\n                        params[i] = param;\n                    }\n                } else {\n                    /** 根据字段探测并初始化构造函数参数默认值 */\n                    FieldInfo[] fieldInfoList = beanInfo.fields;\n                    int size = fieldInfoList.length;\n                    params = new Object[size];\n                    for (int i = 0; i < size; ++i) {\n                        FieldInfo fieldInfo = fieldInfoList[i];\n                        Object param = fieldValues.get(fieldInfo.name);\n                        if (param == null) {\n                            Type fieldType = fieldInfo.fieldType;\n                            if (fieldType == byte.class) {\n                                param = (byte) 0;\n                            } else if (fieldType == short.class) {\n                                param = (short) 0;\n                            } else if (fieldType == int.class) {\n                                param = 0;\n                            } else if (fieldType == long.class) {\n                                param = 0L;\n                            } else if (fieldType == float.class) {\n                                param = 0F;\n                            } else if (fieldType == double.class) {\n                                param = 0D;\n                            } else if (fieldType == boolean.class) {\n                                param = Boolean.FALSE;\n                            } else if (fieldType == String.class\n                                    && (fieldInfo.parserFeatures & Feature.InitStringFieldAsEmpty.mask) != 0) {\n                                param = \"\";\n                            }\n                        }\n                        params[i] = param;\n                    }\n                }\n\n                if (beanInfo.creatorConstructor != null) {\n                    try {\n                        object = beanInfo.creatorConstructor.newInstance(params);\n                    } catch (Exception e) {\n                        throw new JSONException(\"create instance error, \" + paramNames + \", \"\n                                                + beanInfo.creatorConstructor.toGenericString(), e);\n                    }\n\n                    if (paramNames != null) {\n                        /** 剩余字段查找反序列化器set值 */\n                        for (Map.Entry<String, Object> entry : fieldValues.entrySet()) {\n                            FieldDeserializer fieldDeserializer = getFieldDeserializer(entry.getKey());\n                            if (fieldDeserializer != null) {\n                                fieldDeserializer.setValue(object, entry.getValue());\n                            }\n                        }\n                    }\n                } else if (beanInfo.factoryMethod != null) {\n                    try {\n                        object = beanInfo.factoryMethod.invoke(null, params);\n                    } catch (Exception e) {\n                        throw new JSONException(\"create factory method error, \" + beanInfo.factoryMethod.toString(), e);\n                    }\n                }\n\n                childContext.object = object;\n            }\n\n            /** 检查是否扩展后置方法buildMethod，如果有进行调用 */\n            Method buildMethod = beanInfo.buildMethod;\n            if (buildMethod == null) {\n                return (T) object;\n            }\n            \n            \n            Object builtObj;\n            try {\n                builtObj = buildMethod.invoke(object);\n            } catch (Exception e) {\n                throw new JSONException(\"build object error\", e);\n            }\n            \n            return (T) builtObj;\n        } finally {\n            if (childContext != null) {\n                childContext.object = object;\n            }\n            parser.setContext(context);\n        }\n    }\n```\n\n\n这段代码实在又臭又长，实际做的事情如下：\n\n1. 根据类所有的字段，字段类型进行json串进行匹配，首先检查json串的值是否和当前字段名称相等，如果相等认为匹配成功，会创建实例对象并且把解析字段值set进去。\n2. 如果当前json串顺序和java对象字段不一致怎么办，这个时候我字段又全部遍历完了，fastjson会自动把当前解析的字段名称加入符号表中，然后查找字段\b名称对应的反序列化实例进行set值操作\n3. 当前实现提供了解析对象后buildMethod扩展点，如果提供了会进行回调然后返回\n\n\n值得一提的是构造函数处理：\n\n```java\n    public Object createInstance(DefaultJSONParser parser, Type type) {\n        if (type instanceof Class) {\n            if (clazz.isInterface()) {\n                /** 针对反序列化时接口类型的，通过jdk冬天代理拦截put和get等操作，\n                 *  进行set或者put值的操作值会存储在jsonobject内部的map结构\n                 */\n                Class<?> clazz = (Class<?>) type;\n                ClassLoader loader = Thread.currentThread().getContextClassLoader();\n                final JSONObject obj = new JSONObject();\n                Object proxy = Proxy.newProxyInstance(loader, new Class<?>[] { clazz }, obj);\n                return proxy;\n            }\n        }\n\n        /** 忽略没有默认构造函数和没有创建对象的工厂方法 */\n        if (beanInfo.defaultConstructor == null && beanInfo.factoryMethod == null) {\n            return null;\n        }\n\n        /** 忽略同时存在显示构造函数和创建对象的工厂方法的场景 */\n        if (beanInfo.factoryMethod != null && beanInfo.defaultConstructorParameterSize > 0) {\n            return null;\n        }\n\n        Object object;\n        try {\n            Constructor<?> constructor = beanInfo.defaultConstructor;\n            /** 存在默认无参构造函数 */\n            if (beanInfo.defaultConstructorParameterSize == 0) {\n                if (constructor != null) {\n                    object = constructor.newInstance();\n                } else {\n                    /** 否则使用工厂方法生成对象 */\n                    object = beanInfo.factoryMethod.invoke(null);\n                }\n            } else {\n                ParseContext context = parser.getContext();\n                if (context == null || context.object == null) {\n                    throw new JSONException(\"can't create non-static inner class instance.\");\n                }\n\n                final String typeName;\n                if (type instanceof Class) {\n                    typeName = ((Class<?>) type).getName();\n                } else {\n                    throw new JSONException(\"can't create non-static inner class instance.\");\n                }\n\n                final int lastIndex = typeName.lastIndexOf('$');\n                String parentClassName = typeName.substring(0, lastIndex);\n\n                Object ctxObj = context.object;\n                String parentName = ctxObj.getClass().getName();\n\n                Object param = null;\n                if (!parentName.equals(parentClassName)) {\n                    /** 处理继承过来的类 */\n                    ParseContext parentContext = context.parent;\n                    if (parentContext != null\n                            && parentContext.object != null\n                            && (\"java.util.ArrayList\".equals(parentName)\n                            || \"java.util.List\".equals(parentName)\n                            || \"java.util.Collection\".equals(parentName)\n                            || \"java.util.Map\".equals(parentName)\n                            || \"java.util.HashMap\".equals(parentName))) {\n                        parentName = parentContext.object.getClass().getName();\n                        if (parentName.equals(parentClassName)) {\n                            param = parentContext.object;\n                        }\n                    }\n                } else {\n                    /** 处理非静态内部类场景，\n                     *  编译器会自动修改内部类构造函数，添加外层类实例对象作为参数，\n                     *  ctxObj就是外层实例对象\n                     */\n                    param = ctxObj;\n                }\n\n                if (param == null) {\n                    throw new JSONException(\"can't create non-static inner class instance.\");\n                }\n\n                object = constructor.newInstance(param);\n            }\n        } catch (JSONException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new JSONException(\"create instance error, class \" + clazz.getName(), e);\n        }\n\n        /** 开启InitStringFieldAsEmpty特性，会把字符串字段初始化为空串 */\n        if (parser != null\n                && parser.lexer.isEnabled(Feature.InitStringFieldAsEmpty)) {\n            for (FieldInfo fieldInfo : beanInfo.fields) {\n                if (fieldInfo.fieldClass == String.class) {\n                    try {\n                        fieldInfo.set(object, \"\");\n                    } catch (Exception e) {\n                        throw new JSONException(\"create instance error, class \" + clazz.getName(), e);\n                    }\n                }\n            }\n        }\n\n        return object;\n    }\n```\n\n编译器会为非静态内部类构造函数添加外层的实例对象作为第一个参数，所以在生成实例化对象的时候会从上下文中获取外层对象进行反射创建对象`constructor.newInstance(param)`。\n\n为了更容易理解这段逻辑，提供一下单元测试可以调试：\n\n```java\ncom.alibaba.json.bvt.parser.deser.InnerClassDeser2#test_for_inner_class\n\ncom.alibaba.json.bvt.parser.deser.InnerClassDeser3#test_for_inner_class\n\ncom.alibaba.json.bvt.parser.deser.InnerClassDeser4#test_for_inner_class\n```\n","source":"_posts/Fastjson源码解析-反序列化(二)-内部注册反序列化解析.md","raw":"---\ntitle: 注册反序列化解析（十一）\nsubtitle: fastjson针对常用的类型已经注册了反序列化实现方案，根据源代码注册`com.alibaba.fastjson.parser.ParserConfig#initDeserializers`可以得到列表\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n  - Fastjson源码解析\ncategories:\n  - Fastjson源码解析\ndate: 2018-09-30 23:12:14\n---\n\n## 反序列化回调接口实现分析\n\n### 内部注册的反序列化\n\nfastjson针对常用的类型已经注册了反序列化实现方案，根据源代码注册`com.alibaba.fastjson.parser.ParserConfig#initDeserializers`可以得到列表：\n\n| 注册的类型 | 反序列化实例 | 是否支持序列化 | 是否支持反序列化 |\n| :--- | :--- | :---: | :---: |\n| SimpleDateFormat | MiscCodec | 是 | 是 |\n| Timestamp | SqlDateDeserializer | - | 是 |\n| Date | SqlDateDeserializer | - | 是 |\n| Time | TimeDeserializer | - | 是 |\n| Date | DateCodec | 是 | 是 |\n| Calendar | CalendarCodec | 是 | 是 |\n| XMLGregorianCalendar | CalendarCodec | 是 | 是 |\n| JSONObject | MapDeserializer | -| 是 |\n| JSONArray | CollectionCodec | 是 | 是 |\n| Map | MapDeserializer | -| 是 |\n| HashMap | MapDeserializer | -| 是 |\n| LinkedHashMap | MapDeserializer | -| 是 |\n| TreeMap | MapDeserializer | -| 是 |\n| ConcurrentMap | MapDeserializer | -| 是 |\n| ConcurrentHashMap | MapDeserializer | -| 是 |\n| Collection | CollectionCodec | 是 | 是 |\n| List | CollectionCodec | 是 | 是 |\n| ArrayList | CollectionCodec | 是 | 是 |\n| Object | JavaObjectDeserializer | - | 是 |\n| String | StringCodec | 是 | 是 |\n| StringBuffer | StringCodec | 是 | 是 |\n| StringBuilder | StringCodec | 是 | 是 |\n| char | CharacterCodec | 是 | 是 |\n| Character | CharacterCodec | 是 | 是 |\n| byte | NumberDeserializer | - | 是 |\n| Byte | NumberDeserializer | - | 是 |\n| short | NumberDeserializer | - | 是 |\n| Short | NumberDeserializer | - | 是 |\n| int | IntegerCodec | 是 | 是 |\n| Integer | IntegerCodec | 是 | 是 |\n| long | LongCodec | 是 | 是 |\n| Long | LongCodec | 是 | 是 |\n| BigInteger | BigIntegerCodec | 是 | 是 |\n| BigDecimal | BigDecimalCodec | 是 | 是 |\n| float | FloatCodec | 是 | 是 |\n| Float | FloatCodec | 是 | 是 |\n| double | NumberDeserializer | 是 | 是 |\n| Double | NumberDeserializer | 是 | 是 |\n| boolean | BooleanCodec | 是 | 是 |\n| Boolean | BooleanCodec | 是 | 是 |\n| Class | MiscCodec | 是 | 是 |\n| char[] | CharArrayCodec | 是 | 是 |\n| AtomicBoolean | BooleanCodec | 是 | 是 |\n| AtomicBoolean | IntegerCodec | 是 | 是 |\n| AtomicLong | LongCodec | 是 | 是 |\n| AtomicReference | ReferenceCodec | 是 | 是 |\n| WeakReference | ReferenceCodec | 是 | 是 |\n| SoftReference | ReferenceCodec | 是 | 是 |\n| UUID | MiscCodec | 是 | 是 |\n| TimeZone | MiscCodec | 是 | 是 |\n| Locale | MiscCodec | 是 | 是 |\n| Currency | MiscCodec | 是 | 是 |\n| InetAddress | MiscCodec | 是 | 是 |\n| Inet4Address | MiscCodec | 是 | 是 |\n| Inet6Address | MiscCodec | 是 | 是 |\n| InetSocketAddress | MiscCodec | 是 | 是 |\n| File | MiscCodec | 是 | 是 |\n| URI | MiscCodec | 是 | 是 |\n| URL | MiscCodec | 是 | 是 |\n| Pattern | MiscCodec | 是 | 是 |\n| Charset | MiscCodec | 是 | 是 |\n| JSONPath | MiscCodec | 是 | 是 |\n| Number | NumberDeserializer | - | 是 |\n| AtomicIntegerArray | AtomicCodec | 是 | 是 |\n| AtomicLongArray | AtomicCodec | 是 | 是 |\n| StackTraceElement | StackTraceElementDeserializer | - | 是 |\n| Serializable | JavaObjectDeserializer | - | 是 |\n| Cloneable | JavaObjectDeserializer | - | 是 |\n| Comparable | JavaObjectDeserializer | - | 是 |\n| Closeable | JavaObjectDeserializer | - | 是 |\n| JSONPObject | JSONPDeserializer | - | 是 |\n\n通过上面表格发现几乎把所有JDK常用的类型都注册了一遍，目的是在运行时能够查找到特定的反序列化实例而不需要使用默认Java的反序列化实例。\n\n我们先从常见的类型开始分析反序列化实现。\n\n### BooleanCodec反序列化\n\n```java\n    public <T> T deserialze(DefaultJSONParser parser, Type clazz, Object fieldName) {\n        final JSONLexer lexer = parser.lexer;\n\n        Boolean boolObj;\n\n        try {\n            /** 遇到true类型的token，预读下一个token */\n            if (lexer.token() == JSONToken.TRUE) {\n                lexer.nextToken(JSONToken.COMMA);\n                boolObj = Boolean.TRUE;\n                /** 遇到false类型的token，预读下一个token */\n            } else if (lexer.token() == JSONToken.FALSE) {\n                lexer.nextToken(JSONToken.COMMA);\n                boolObj = Boolean.FALSE;\n            } else if (lexer.token() == JSONToken.LITERAL_INT) {\n                /** 遇到整数类型的token，预读下一个token */\n                int intValue = lexer.intValue();\n                lexer.nextToken(JSONToken.COMMA);\n\n                /** 1代表true，其他情况false */\n                if (intValue == 1) {\n                    boolObj = Boolean.TRUE;\n                } else {\n                    boolObj = Boolean.FALSE;\n                }\n            } else {\n                Object value = parser.parse();\n\n                if (value == null) {\n                    return null;\n                }\n\n                /** 处理其他情况，比如Y,T代表true */\n                boolObj = TypeUtils.castToBoolean(value);\n            }\n        } catch (Exception ex) {\n            throw new JSONException(\"parseBoolean error, field : \" + fieldName, ex);\n        }\n\n        /** 如果是原子类型 */\n        if (clazz == AtomicBoolean.class) {\n            return (T) new AtomicBoolean(boolObj.booleanValue());\n        }\n\n        return (T) boolObj;\n    }\n```\n\n每次反序列化拿到token是，当前记录的字符`ch`变量实际是token结尾的下一个字符，`boolean`类型字段会触发该接口。\n\n### CharacterCodec反序列化\n\n```java\n    public <T> T deserialze(DefaultJSONParser parser, Type clazz, Object fieldName) {\n        /** 根据token解析类型 */\n        Object value = parser.parse();\n        return value == null\n            ? null\n            /** 转换成char类型，如果是string取字符串第一个char */\n            : (T) TypeUtils.castToChar(value);\n    }\n\n    public Object parse() {\n        return parse(null);\n    }\n```\n\n看着反序列化应该挺简单，但是内部解析值委托给了`DefaultJSONParser#parse(java.lang.Object)`, 会把字符串解析取第一个字符处理：\n\n```java\n    public Object parse(Object fieldName) {\n        final JSONLexer lexer = this.lexer;\n        switch (lexer.token()) {\n            /**\n             *  ...忽略其他类型token，后面遇到会讲解\n             * /\n            case LITERAL_STRING:\n                /** 探测到是字符串类型，解析值 */\n                String stringLiteral = lexer.stringVal();\n                lexer.nextToken(JSONToken.COMMA);\n\n                if (lexer.isEnabled(Feature.AllowISO8601DateFormat)) {\n                    JSONScanner iso8601Lexer = new JSONScanner(stringLiteral);\n                    try {\n                        if (iso8601Lexer.scanISO8601DateIfMatch()) {\n                            return iso8601Lexer.getCalendar().getTime();\n                        }\n                    } finally {\n                        iso8601Lexer.close();\n                    }\n                }\n\n                return stringLiteral;\n            /**\n             *  ...忽略其他类型token，后面遇到会讲解\n             * /\n        }\n    }\n```\n\n### IntegerCodec反序列化\n\n```java\n    public <T> T deserialze(DefaultJSONParser parser, Type clazz, Object fieldName) {\n        final JSONLexer lexer = parser.lexer;\n\n        final int token = lexer.token();\n\n        /** 如果解析到null值，返回null */\n        if (token == JSONToken.NULL) {\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        }\n\n\n        Integer intObj;\n        try {\n            if (token == JSONToken.LITERAL_INT) {\n                /** 整型字面量，预读下一个token */\n                int val = lexer.intValue();\n                lexer.nextToken(JSONToken.COMMA);\n                intObj = Integer.valueOf(val);\n            } else if (token == JSONToken.LITERAL_FLOAT) {\n                /** 浮点数字面量，预读下一个token */\n                BigDecimal decimalValue = lexer.decimalValue();\n                lexer.nextToken(JSONToken.COMMA);\n                intObj = Integer.valueOf(decimalValue.intValue());\n            } else {\n                if (token == JSONToken.LBRACE) {\n\n                    /** 处理历史原因反序列化AtomicInteger成map */\n                    JSONObject jsonObject = new JSONObject(true);\n                    parser.parseObject(jsonObject);\n                    intObj = TypeUtils.castToInt(jsonObject);\n                } else {\n                    /** 处理其他情况 */\n                    Object value = parser.parse();\n                    intObj = TypeUtils.castToInt(value);\n                }\n            }\n        } catch (Exception ex) {\n            throw new JSONException(\"parseInt error, field : \" + fieldName, ex);\n        }\n\n        \n        if (clazz == AtomicInteger.class) {\n            return (T) new AtomicInteger(intObj.intValue());\n        }\n        \n        return (T) intObj;\n    }\n```\n\n针对特殊场景AutomicInteger类型，可以通过单元测试`com.alibaba.json.bvt.parser.AtomicIntegerComptableAndroidTest#test_for_compatible_zero`进行动手实践调试：\n\n```java\n    public void test_for_compatible_zero() throws Exception {\n        String text = \"{\\\"andIncrement\\\":-1,\\\"andDecrement\\\":0}\";\n\n        assertEquals(0, JSON.parseObject(text, AtomicInteger.class).intValue());\n    }\n```\n\n继续对`parseObject(jsonObject)`进行分析：\n\n```java\n    public Object parseObject(final Map object) {\n        return parseObject(object, null);\n    }\n\n\n```\n\n### LongCodec反序列化\n\n因为和整数反序列化极其类似，请参考`IntegerCodec`不进行冗余分析。\n\n### FloatCodec反序列化\n\n```java\n    public static <T> T deserialze(DefaultJSONParser parser) {\n        final JSONLexer lexer = parser.lexer;\n\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n            /** 整型字面量，预读下一个token */\n            String val = lexer.numberString();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) Float.valueOf(Float.parseFloat(val));\n        }\n\n        if (lexer.token() == JSONToken.LITERAL_FLOAT) {\n            /** 浮点数字面量，预读下一个token */\n            float val = lexer.floatValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) Float.valueOf(val);\n        }\n\n        /** 处理其他情况 */\n        Object value = parser.parse();\n\n        if (value == null) {\n            return null;\n        }\n\n        return (T) TypeUtils.castToFloat(value);\n    }\n```\n\n### BigDecimalCodec反序列化\n\n```java\n    public static <T> T deserialze(DefaultJSONParser parser) {\n        final JSONLexer lexer = parser.lexer;\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n            /** 整型字面量，预读下一个token */\n            BigDecimal decimalValue = lexer.decimalValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) decimalValue;\n        }\n\n        if (lexer.token() == JSONToken.LITERAL_FLOAT) {\n            /** 浮点数字面量，预读下一个token */\n            BigDecimal val = lexer.decimalValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) val;\n        }\n\n        Object value = parser.parse();\n        return value == null //\n            ? null //\n            : (T) TypeUtils.castToBigDecimal(value);\n    }\n```\n\n### StringCodec反序列化\n\n```java\n    public <T> T deserialze(DefaultJSONParser parser, Type clazz, Object fieldName) {\n        if (clazz == StringBuffer.class) {\n            /** 将解析的字符序列转换成StringBuffer */\n            final JSONLexer lexer = parser.lexer;\n            if (lexer.token() == JSONToken.LITERAL_STRING) {\n                /** 字符串字面量，预读下一个token */\n                String val = lexer.stringVal();\n                lexer.nextToken(JSONToken.COMMA);\n\n                return (T) new StringBuffer(val);\n            }\n\n            Object value = parser.parse();\n\n            if (value == null) {\n                return null;\n            }\n\n            return (T) new StringBuffer(value.toString());\n        }\n\n        if (clazz == StringBuilder.class) {\n            /** 将解析的字符序列转换成StringBuilder */\n            final JSONLexer lexer = parser.lexer;\n            if (lexer.token() == JSONToken.LITERAL_STRING) {\n                String val = lexer.stringVal();\n                /** 字符串字面量，预读下一个token */\n                lexer.nextToken(JSONToken.COMMA);\n\n                return (T) new StringBuilder(val);\n            }\n\n            Object value = parser.parse();\n\n            if (value == null) {\n                return null;\n            }\n\n            return (T) new StringBuilder(value.toString());\n        }\n\n        return (T) deserialze(parser);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T deserialze(DefaultJSONParser parser) {\n        final JSONLexer lexer = parser.getLexer();\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n            /** 字符串字面量，预读下一个token */\n            String val = lexer.stringVal();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) val;\n        }\n\n        if (lexer.token() == JSONToken.LITERAL_INT) {\n            /** 整型字面量，预读下一个token */\n            String val = lexer.numberString();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) val;\n        }\n\n        Object value = parser.parse();\n\n        if (value == null) {\n            return null;\n        }\n\n        return (T) value.toString();\n    }\n```\n\n### ObjectArrayCodec反序列化\n\n```java\n    public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {\n        final JSONLexer lexer = parser.lexer;\n        int token = lexer.token();\n        if (token == JSONToken.NULL) {\n            /** 解析到Null，预读下一个token */\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        }\n\n        if (token == JSONToken.LITERAL_STRING || token == JSONToken.HEX) {\n            byte[] bytes = lexer.bytesValue();\n            lexer.nextToken(JSONToken.COMMA);\n\n            if (bytes.length == 0 && type != byte[].class) {\n                return null;\n            }\n\n            return (T) bytes;\n        }\n\n        Class componentClass;\n        Type componentType;\n        if (type instanceof GenericArrayType) {\n            GenericArrayType clazz = (GenericArrayType) type;\n            /** 获取泛型数组真实参数类型 */\n            componentType = clazz.getGenericComponentType();\n            if (componentType instanceof TypeVariable) {\n                TypeVariable typeVar = (TypeVariable) componentType;\n                Type objType = parser.getContext().type;\n                if (objType instanceof ParameterizedType) {\n                    /** 获取泛型参数化类型，eg: Collection<String> */\n                    ParameterizedType objParamType = (ParameterizedType) objType;\n                    Type objRawType = objParamType.getRawType();\n                    Type actualType = null;\n                    if (objRawType instanceof Class) {\n                        /** 遍历Class包含的参数化类型，查找与泛型数组类型名字一致的作为真实类型 */\n                        TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();\n                        for (int i = 0; i < objTypeParams.length; ++i) {\n                            if (objTypeParams[i].getName().equals(typeVar.getName())) {\n                                actualType = objParamType.getActualTypeArguments()[i];\n                            }\n                        }\n                    }\n                    if (actualType instanceof Class) {\n                        componentClass = (Class) actualType;\n                    } else {\n                        componentClass = Object.class;\n                    }\n                } else {\n                    // 获取数组类型上界\n                    componentClass = TypeUtils.getClass(typeVar.getBounds()[0]);\n                }\n            } else {\n                componentClass = TypeUtils.getClass(componentType);\n            }\n        } else {\n            /** 非泛型数组，普通对象数组 */\n            Class clazz = (Class) type;\n            componentType = componentClass = clazz.getComponentType();\n        }\n        JSONArray array = new JSONArray();\n        /** 根据token解析数组元素放到array中 */\n        parser.parseArray(componentType, array, fieldName);\n\n        return (T) toObjectArray(parser, componentClass, array);\n    }\n\n```\n\n### JavaBeanDeserializer反序列化\n\n为了节省冗余的分析，我们主要分析最复杂的默认`JavaBeanDeserializer`反序列化实现。\n\n\n```java\n   public JavaBeanDeserializer(ParserConfig config, JavaBeanInfo beanInfo){\n        /** java对象类名称 */\n        this.clazz = beanInfo.clazz;\n        this.beanInfo = beanInfo;\n\n        Map<String, FieldDeserializer> alterNameFieldDeserializers = null;\n        sortedFieldDeserializers = new FieldDeserializer[beanInfo.sortedFields.length];\n        /**\n         *  给已排序的字段创建反序列化实例，如果字段有别名，\n         *  关联别名到反序列化的映射\n         */\n        for (int i = 0, size = beanInfo.sortedFields.length; i < size; ++i) {\n            FieldInfo fieldInfo = beanInfo.sortedFields[i];\n            FieldDeserializer fieldDeserializer = config.createFieldDeserializer(config, beanInfo, fieldInfo);\n\n            sortedFieldDeserializers[i] = fieldDeserializer;\n\n            for (String name : fieldInfo.alternateNames) {\n                if (alterNameFieldDeserializers == null) {\n                    alterNameFieldDeserializers = new HashMap<String, FieldDeserializer>();\n                }\n                alterNameFieldDeserializers.put(name, fieldDeserializer);\n            }\n        }\n        this.alterNameFieldDeserializers = alterNameFieldDeserializers;\n\n        fieldDeserializers = new FieldDeserializer[beanInfo.fields.length];\n        for (int i = 0, size = beanInfo.fields.length; i < size; ++i) {\n            FieldInfo fieldInfo = beanInfo.fields[i];\n            /** 采用二分法在sortedFieldDeserializers中查找已创建的反序列化类型 */\n            FieldDeserializer fieldDeserializer = getFieldDeserializer(fieldInfo.name);\n            fieldDeserializers[i] = fieldDeserializer;\n        }\n    }\n```\n\n构造函数就是简单构造类字段对应的反序列化\b实例而已，接下来看下关键实现：\n\n```java\n    protected <T> T deserialze(DefaultJSONParser parser,\n                               Type type,\n                               Object fieldName,\n                               Object object,\n                               int features,\n                               int[] setFlags) {\n        if (type == JSON.class || type == JSONObject.class) {\n            /** 根据当前token类型判断解析对象 */\n            return (T) parser.parse();\n        }\n\n        final JSONLexerBase lexer = (JSONLexerBase) parser.lexer;\n        final ParserConfig config = parser.getConfig();\n\n        int token = lexer.token();\n        if (token == JSONToken.NULL) {\n            /** 解析null，预读下一个token并返回 */\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        }\n\n        ParseContext context = parser.getContext();\n        if (object != null && context != null) {\n            context = context.parent;\n        }\n        ParseContext childContext = null;\n\n        try {\n            Map<String, Object> fieldValues = null;\n\n            if (token == JSONToken.RBRACE) {\n                lexer.nextToken(JSONToken.COMMA);\n                /** 遇到}认为遇到对象结束，尝试创建实例对象 */\n                if (object == null) {\n                    object = createInstance(parser, type);\n                }\n                return (T) object;\n            }\n\n            if (token == JSONToken.LBRACKET) {\n                final int mask = Feature.SupportArrayToBean.mask;\n                boolean isSupportArrayToBean = (beanInfo.parserFeatures & mask) != 0\n                                               || lexer.isEnabled(Feature.SupportArrayToBean)\n                                               || (features & mask) != 0\n                                               ;\n                if (isSupportArrayToBean) {\n                    /** 将数组值反序列化为对象，根据sortedFieldDeserializers依次写字段值 */\n                    return deserialzeArrayMapping(parser, type, fieldName, object);\n                }\n            }\n\n            if (token != JSONToken.LBRACE && token != JSONToken.COMMA) {\n                if (lexer.isBlankInput()) {\n                    return null;\n                }\n\n                if (token == JSONToken.LITERAL_STRING) {\n                    String strVal = lexer.stringVal();\n                    /** 读到空值字符串，返回null */\n                    if (strVal.length() == 0) {\n                        lexer.nextToken();\n                        return null;\n                    }\n\n                    if (beanInfo.jsonType != null) {\n                        /** 探测是否是枚举类型 */\n                        for (Class<?> seeAlsoClass : beanInfo.jsonType.seeAlso()) {\n                            if (Enum.class.isAssignableFrom(seeAlsoClass)) {\n                                try {\n                                    Enum<?> e = Enum.valueOf((Class<Enum>) seeAlsoClass, strVal);\n                                    return (T) e;\n                                } catch (IllegalArgumentException e) {\n                                    // skip\n                                }\n                            }\n                        }\n                    }\n                } else if (token == JSONToken.LITERAL_ISO8601_DATE) {\n                    Calendar calendar = lexer.getCalendar();\n                }\n\n                if (token == JSONToken.LBRACKET && lexer.getCurrent() == ']') {\n                    /** 包含零元素的数组 */\n                    lexer.next();\n                    lexer.nextToken();\n                    return null;\n                }\n                \n                StringBuffer buf = (new StringBuffer()) //\n                                                        .append(\"syntax error, expect {, actual \") //\n                                                        .append(lexer.tokenName()) //\n                                                        .append(\", pos \") //\n                                                        .append(lexer.pos());\n\n                if (fieldName instanceof String) {\n                    buf //\n                        .append(\", fieldName \") //\n                        .append(fieldName);\n                }\n\n                buf.append(\", fastjson-version \").append(JSON.VERSION);\n                \n                throw new JSONException(buf.toString());\n            }\n\n            if (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) {\n                parser.resolveStatus = DefaultJSONParser.NONE;\n            }\n\n            String typeKey = beanInfo.typeKey;\n            for (int fieldIndex = 0;; fieldIndex++) {\n                String key = null;\n                FieldDeserializer fieldDeser = null;\n                FieldInfo fieldInfo = null;\n                Class<?> fieldClass = null;\n                JSONField feildAnnotation = null;\n                /** 检查是否所有字段都已经处理 */\n                if (fieldIndex < sortedFieldDeserializers.length) {\n                    fieldDeser = sortedFieldDeserializers[fieldIndex];\n                    fieldInfo = fieldDeser.fieldInfo;\n                    fieldClass = fieldInfo.fieldClass;\n                    feildAnnotation = fieldInfo.getAnnotation();\n                }\n\n                boolean matchField = false;\n                boolean valueParsed = false;\n                \n                Object fieldValue = null;\n                if (fieldDeser != null) {\n                    char[] name_chars = fieldInfo.name_chars;\n                    if (fieldClass == int.class || fieldClass == Integer.class) {\n                        /** 扫描整数值 */\n                        fieldValue = lexer.scanFieldInt(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n                    } else if (fieldClass == long.class || fieldClass == Long.class) {\n                        /** 扫描长整型值 */\n                        fieldValue = lexer.scanFieldLong(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n                    } else if (fieldClass == String.class) {\n                        /** 扫描字符串值 */\n                        fieldValue = lexer.scanFieldString(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n                    } else if (fieldClass == java.util.Date.class && fieldInfo.format == null) {\n                        /** 扫描日期值 */\n                        fieldValue = lexer.scanFieldDate(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (fieldClass == BigDecimal.class) {\n                        /** 扫描高精度值 */\n                        fieldValue = lexer.scanFieldDecimal(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (fieldClass == BigInteger.class) {\n                        fieldValue = lexer.scanFieldBigInteger(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (fieldClass == boolean.class || fieldClass == Boolean.class) {\n                        /** 扫描boolean值 */\n                        fieldValue = lexer.scanFieldBoolean(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n                    } else if (fieldClass == float.class || fieldClass == Float.class) {\n                        /** 扫描浮点值 */\n                        fieldValue = lexer.scanFieldFloat(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n                    } else if (fieldClass == double.class || fieldClass == Double.class) {\n                        /** 扫描double值 */\n                        fieldValue = lexer.scanFieldDouble(name_chars);\n                        \n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;  \n                        }\n\n                    } else if (fieldClass.isEnum()\n                            && parser.getConfig().getDeserializer(fieldClass) instanceof EnumDeserializer\n                            && (feildAnnotation == null || feildAnnotation.deserializeUsing() == Void.class)\n                            ) {\n                        if (fieldDeser instanceof DefaultFieldDeserializer) {\n                            ObjectDeserializer fieldValueDeserilizer = ((DefaultFieldDeserializer) fieldDeser).fieldValueDeserilizer;\n                            fieldValue = this.scanEnum(lexer, name_chars, fieldValueDeserilizer);\n\n                            if (lexer.matchStat > 0) {\n                                matchField = true;\n                                valueParsed = true;\n                            } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                                continue;\n                            }\n                        }\n                    } else if (fieldClass == int[].class) {\n                        /** 扫描整型数组值 */\n                        fieldValue = lexer.scanFieldIntArray(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (fieldClass == float[].class) {\n                        fieldValue = lexer.scanFieldFloatArray(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (fieldClass == float[][].class) {\n                        /** 扫描浮点数组值 */\n                        fieldValue = lexer.scanFieldFloatArray2(name_chars);\n\n                        if (lexer.matchStat > 0) {\n                            matchField = true;\n                            valueParsed = true;\n                        } else if (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) {\n                            continue;\n                        }\n                    } else if (lexer.matchField(name_chars)) {\n                        matchField = true;\n                    } else {\n                        continue;\n                    }\n                }\n\n                /** 如果当前字符串的json不匹配当前字段名称 */\n                if (!matchField) {\n                    /** 将当前的字段名称加入符号表 */\n                    key = lexer.scanSymbol(parser.symbolTable);\n\n                    /** 当前是无效的字段标识符，比如是,等符号 */\n                    if (key == null) {\n                        token = lexer.token();\n                        if (token == JSONToken.RBRACE) {\n                            /** 结束花括号, 预读下一个token */\n                            lexer.nextToken(JSONToken.COMMA);\n                            break;\n                        }\n                        if (token == JSONToken.COMMA) {\n                            if (lexer.isEnabled(Feature.AllowArbitraryCommas)) {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (\"$ref\" == key && context != null) {\n                        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\n                        token = lexer.token();\n                        if (token == JSONToken.LITERAL_STRING) {\n                            String ref = lexer.stringVal();\n                            if (\"@\".equals(ref)) {\n                                object = context.object;\n                            } else if (\"..\".equals(ref)) {\n                                ParseContext parentContext = context.parent;\n                                if (parentContext.object != null) {\n                                    object = parentContext.object;\n                                } else {\n                                    parser.addResolveTask(new ResolveTask(parentContext, ref));\n                                    parser.resolveStatus = DefaultJSONParser.NeedToResolve;\n                                }\n                            } else if (\"$\".equals(ref)) {\n                                ParseContext rootContext = context;\n                                while (rootContext.parent != null) {\n                                    rootContext = rootContext.parent;\n                                }\n\n                                if (rootContext.object != null) {\n                                    object = rootContext.object;\n                                } else {\n                                    parser.addResolveTask(new ResolveTask(rootContext, ref));\n                                    parser.resolveStatus = DefaultJSONParser.NeedToResolve;\n                                }\n                            } else {\n                                Object refObj = parser.resolveReference(ref);\n                                if (refObj != null) {\n                                    object = refObj;\n                                } else {\n                                    parser.addResolveTask(new ResolveTask(context, ref));\n                                    parser.resolveStatus = DefaultJSONParser.NeedToResolve;\n                                }\n                            }\n                        } else {\n                            throw new JSONException(\"illegal ref, \" + JSONToken.name(token));\n                        }\n\n                        lexer.nextToken(JSONToken.RBRACE);\n                        if (lexer.token() != JSONToken.RBRACE) {\n                            throw new JSONException(\"illegal ref\");\n                        }\n                        lexer.nextToken(JSONToken.COMMA);\n\n                        parser.setContext(context, object, fieldName);\n\n                        return (T) object;\n                    }\n\n                    if ((typeKey != null && typeKey.equals(key))\n                            || JSON.DEFAULT_TYPE_KEY == key) {\n                        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);\n                        if (lexer.token() == JSONToken.LITERAL_STRING) {\n                            String typeName = lexer.stringVal();\n                            lexer.nextToken(JSONToken.COMMA);\n\n                            /** 忽略字符串中包含@type解析 */\n                            if (typeName.equals(beanInfo.typeName)|| parser.isEnabled(Feature.IgnoreAutoType)) {\n                                if (lexer.token() == JSONToken.RBRACE) {\n                                    lexer.nextToken();\n                                    break;\n                                }\n                                continue;\n                            }\n                            \n\n                            /** 根据枚举seeAlso查找反序列化实例 */\n                            ObjectDeserializer deserializer = getSeeAlso(config, this.beanInfo, typeName);\n                            Class<?> userType = null;\n\n                            if (deserializer == null) {\n                                /** 无法匹配，查找类对应的泛型或者参数化类型关联的反序列化实例 */\n                                Class<?> expectClass = TypeUtils.getClass(type);\n                                userType = config.checkAutoType(typeName, expectClass, lexer.getFeatures());\n                                deserializer = parser.getConfig().getDeserializer(userType);\n                            }\n\n                            Object typedObject = deserializer.deserialze(parser, userType, fieldName);\n                            if (deserializer instanceof JavaBeanDeserializer) {\n                                JavaBeanDeserializer javaBeanDeserializer = (JavaBeanDeserializer) deserializer;\n                                if (typeKey != null) {\n                                    FieldDeserializer typeKeyFieldDeser = javaBeanDeserializer.getFieldDeserializer(typeKey);\n                                    typeKeyFieldDeser.setValue(typedObject, typeName);\n                                }\n                            }\n                            return (T) typedObject;\n                        } else {\n                            throw new JSONException(\"syntax error\");\n                        }\n                    }\n                }\n\n                /** 第一次创建并初始化对象实例 */\n                if (object == null && fieldValues == null) {\n                    object = createInstance(parser, type);\n                    if (object == null) {\n                        fieldValues = new HashMap<String, Object>(this.fieldDeserializers.length);\n                    }\n                    childContext = parser.setContext(context, object, fieldName);\n                    if (setFlags == null) {\n                        setFlags = new int[(this.fieldDeserializers.length / 32) + 1];\n                    }\n                }\n\n                if (matchField) {\n                    if (!valueParsed) {\n                        /** json串当前满足字段名称，并且没有解析过值 ，\n                         *  直接使用当前字段关联的反序列化实例解析\n                         */\n                        fieldDeser.parseField(parser, object, type, fieldValues);\n                    } else {\n                        if (object == null) {\n                            /** 值已经解析过了，存储到map中 */\n                            fieldValues.put(fieldInfo.name, fieldValue);\n                        } else if (fieldValue == null) {\n                            /** 字段值是null，排除int,long,float,double,boolean */\n                            if (fieldClass != int.class\n                                    && fieldClass != long.class\n                                    && fieldClass != float.class\n                                    && fieldClass != double.class\n                                    && fieldClass != boolean.class\n                                    ) {\n                                fieldDeser.setValue(object, fieldValue);\n                            }\n                        } else {\n                            fieldDeser.setValue(object, fieldValue);\n                        }\n\n                        if (setFlags != null) {\n                            int flagIndex = fieldIndex / 32;\n                            int bitIndex = fieldIndex % 32;\n                            setFlags[flagIndex] |= (1 >> bitIndex);\n                        }\n\n                        if (lexer.matchStat == JSONLexer.END) {\n                            break;\n                        }\n                    }\n                } else {\n                    /** 字段名称当前和json串不匹配，通常顺序或者字段增加或者缺少，\n                     *  根据key查找反序列化实例解析\n                     */\n                    boolean match = parseField(parser, key, object, type, fieldValues, setFlags);\n                    if (!match) {\n                        /** 遇到封闭花括号，与读下一个token，跳出循环 */\n                        if (lexer.token() == JSONToken.RBRACE) {\n                            lexer.nextToken();\n                            break;\n                        }\n\n                        continue;\n                    } else if (lexer.token() == JSONToken.COLON) {\n                        throw new JSONException(\"syntax error, unexpect token ':'\");\n                    }\n                }\n\n                if (lexer.token() == JSONToken.COMMA) {\n                    continue;\n                }\n\n                if (lexer.token() == JSONToken.RBRACE) {\n                    lexer.nextToken(JSONToken.COMMA);\n                    break;\n                }\n\n                if (lexer.token() == JSONToken.IDENTIFIER || lexer.token() == JSONToken.ERROR) {\n                    throw new JSONException(\"syntax error, unexpect token \" + JSONToken.name(lexer.token()));\n                }\n            }\n\n            if (object == null) {\n                if (fieldValues == null) {\n                    /** 第一次创建并初始化对象实例 */\n                    object = createInstance(parser, type);\n                    if (childContext == null) {\n                        childContext = parser.setContext(context, object, fieldName);\n                    }\n                    return (T) object;\n                }\n\n                /** 提取构造函数参数名称 */\n                String[] paramNames = beanInfo.creatorConstructorParameters;\n                final Object[] params;\n                if (paramNames != null) {\n                    params = new Object[paramNames.length];\n                    for (int i = 0; i < paramNames.length; i++) {\n                        String paramName = paramNames[i];\n\n                        Object param = fieldValues.remove(paramName);\n                        /** 解析过的字段不包含当前参数名字 */\n                        if (param == null) {\n                            Type fieldType = beanInfo.creatorConstructorParameterTypes[i];\n                            FieldInfo fieldInfo = beanInfo.fields[i];\n                            /** 探测并设置类型默认值 */\n                            if (fieldType == byte.class) {\n                                param = (byte) 0;\n                            } else if (fieldType == short.class) {\n                                param = (short) 0;\n                            } else if (fieldType == int.class) {\n                                param = 0;\n                            } else if (fieldType == long.class) {\n                                param = 0L;\n                            } else if (fieldType == float.class) {\n                                param = 0F;\n                            } else if (fieldType == double.class) {\n                                param = 0D;\n                            } else if (fieldType == boolean.class) {\n                                param = Boolean.FALSE;\n                            } else if (fieldType == String.class\n                                    && (fieldInfo.parserFeatures & Feature.InitStringFieldAsEmpty.mask) != 0) {\n                                param = \"\";\n                            }\n                        }\n                        params[i] = param;\n                    }\n                } else {\n                    /** 根据字段探测并初始化构造函数参数默认值 */\n                    FieldInfo[] fieldInfoList = beanInfo.fields;\n                    int size = fieldInfoList.length;\n                    params = new Object[size];\n                    for (int i = 0; i < size; ++i) {\n                        FieldInfo fieldInfo = fieldInfoList[i];\n                        Object param = fieldValues.get(fieldInfo.name);\n                        if (param == null) {\n                            Type fieldType = fieldInfo.fieldType;\n                            if (fieldType == byte.class) {\n                                param = (byte) 0;\n                            } else if (fieldType == short.class) {\n                                param = (short) 0;\n                            } else if (fieldType == int.class) {\n                                param = 0;\n                            } else if (fieldType == long.class) {\n                                param = 0L;\n                            } else if (fieldType == float.class) {\n                                param = 0F;\n                            } else if (fieldType == double.class) {\n                                param = 0D;\n                            } else if (fieldType == boolean.class) {\n                                param = Boolean.FALSE;\n                            } else if (fieldType == String.class\n                                    && (fieldInfo.parserFeatures & Feature.InitStringFieldAsEmpty.mask) != 0) {\n                                param = \"\";\n                            }\n                        }\n                        params[i] = param;\n                    }\n                }\n\n                if (beanInfo.creatorConstructor != null) {\n                    try {\n                        object = beanInfo.creatorConstructor.newInstance(params);\n                    } catch (Exception e) {\n                        throw new JSONException(\"create instance error, \" + paramNames + \", \"\n                                                + beanInfo.creatorConstructor.toGenericString(), e);\n                    }\n\n                    if (paramNames != null) {\n                        /** 剩余字段查找反序列化器set值 */\n                        for (Map.Entry<String, Object> entry : fieldValues.entrySet()) {\n                            FieldDeserializer fieldDeserializer = getFieldDeserializer(entry.getKey());\n                            if (fieldDeserializer != null) {\n                                fieldDeserializer.setValue(object, entry.getValue());\n                            }\n                        }\n                    }\n                } else if (beanInfo.factoryMethod != null) {\n                    try {\n                        object = beanInfo.factoryMethod.invoke(null, params);\n                    } catch (Exception e) {\n                        throw new JSONException(\"create factory method error, \" + beanInfo.factoryMethod.toString(), e);\n                    }\n                }\n\n                childContext.object = object;\n            }\n\n            /** 检查是否扩展后置方法buildMethod，如果有进行调用 */\n            Method buildMethod = beanInfo.buildMethod;\n            if (buildMethod == null) {\n                return (T) object;\n            }\n            \n            \n            Object builtObj;\n            try {\n                builtObj = buildMethod.invoke(object);\n            } catch (Exception e) {\n                throw new JSONException(\"build object error\", e);\n            }\n            \n            return (T) builtObj;\n        } finally {\n            if (childContext != null) {\n                childContext.object = object;\n            }\n            parser.setContext(context);\n        }\n    }\n```\n\n\n这段代码实在又臭又长，实际做的事情如下：\n\n1. 根据类所有的字段，字段类型进行json串进行匹配，首先检查json串的值是否和当前字段名称相等，如果相等认为匹配成功，会创建实例对象并且把解析字段值set进去。\n2. 如果当前json串顺序和java对象字段不一致怎么办，这个时候我字段又全部遍历完了，fastjson会自动把当前解析的字段名称加入符号表中，然后查找字段\b名称对应的反序列化实例进行set值操作\n3. 当前实现提供了解析对象后buildMethod扩展点，如果提供了会进行回调然后返回\n\n\n值得一提的是构造函数处理：\n\n```java\n    public Object createInstance(DefaultJSONParser parser, Type type) {\n        if (type instanceof Class) {\n            if (clazz.isInterface()) {\n                /** 针对反序列化时接口类型的，通过jdk冬天代理拦截put和get等操作，\n                 *  进行set或者put值的操作值会存储在jsonobject内部的map结构\n                 */\n                Class<?> clazz = (Class<?>) type;\n                ClassLoader loader = Thread.currentThread().getContextClassLoader();\n                final JSONObject obj = new JSONObject();\n                Object proxy = Proxy.newProxyInstance(loader, new Class<?>[] { clazz }, obj);\n                return proxy;\n            }\n        }\n\n        /** 忽略没有默认构造函数和没有创建对象的工厂方法 */\n        if (beanInfo.defaultConstructor == null && beanInfo.factoryMethod == null) {\n            return null;\n        }\n\n        /** 忽略同时存在显示构造函数和创建对象的工厂方法的场景 */\n        if (beanInfo.factoryMethod != null && beanInfo.defaultConstructorParameterSize > 0) {\n            return null;\n        }\n\n        Object object;\n        try {\n            Constructor<?> constructor = beanInfo.defaultConstructor;\n            /** 存在默认无参构造函数 */\n            if (beanInfo.defaultConstructorParameterSize == 0) {\n                if (constructor != null) {\n                    object = constructor.newInstance();\n                } else {\n                    /** 否则使用工厂方法生成对象 */\n                    object = beanInfo.factoryMethod.invoke(null);\n                }\n            } else {\n                ParseContext context = parser.getContext();\n                if (context == null || context.object == null) {\n                    throw new JSONException(\"can't create non-static inner class instance.\");\n                }\n\n                final String typeName;\n                if (type instanceof Class) {\n                    typeName = ((Class<?>) type).getName();\n                } else {\n                    throw new JSONException(\"can't create non-static inner class instance.\");\n                }\n\n                final int lastIndex = typeName.lastIndexOf('$');\n                String parentClassName = typeName.substring(0, lastIndex);\n\n                Object ctxObj = context.object;\n                String parentName = ctxObj.getClass().getName();\n\n                Object param = null;\n                if (!parentName.equals(parentClassName)) {\n                    /** 处理继承过来的类 */\n                    ParseContext parentContext = context.parent;\n                    if (parentContext != null\n                            && parentContext.object != null\n                            && (\"java.util.ArrayList\".equals(parentName)\n                            || \"java.util.List\".equals(parentName)\n                            || \"java.util.Collection\".equals(parentName)\n                            || \"java.util.Map\".equals(parentName)\n                            || \"java.util.HashMap\".equals(parentName))) {\n                        parentName = parentContext.object.getClass().getName();\n                        if (parentName.equals(parentClassName)) {\n                            param = parentContext.object;\n                        }\n                    }\n                } else {\n                    /** 处理非静态内部类场景，\n                     *  编译器会自动修改内部类构造函数，添加外层类实例对象作为参数，\n                     *  ctxObj就是外层实例对象\n                     */\n                    param = ctxObj;\n                }\n\n                if (param == null) {\n                    throw new JSONException(\"can't create non-static inner class instance.\");\n                }\n\n                object = constructor.newInstance(param);\n            }\n        } catch (JSONException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new JSONException(\"create instance error, class \" + clazz.getName(), e);\n        }\n\n        /** 开启InitStringFieldAsEmpty特性，会把字符串字段初始化为空串 */\n        if (parser != null\n                && parser.lexer.isEnabled(Feature.InitStringFieldAsEmpty)) {\n            for (FieldInfo fieldInfo : beanInfo.fields) {\n                if (fieldInfo.fieldClass == String.class) {\n                    try {\n                        fieldInfo.set(object, \"\");\n                    } catch (Exception e) {\n                        throw new JSONException(\"create instance error, class \" + clazz.getName(), e);\n                    }\n                }\n            }\n        }\n\n        return object;\n    }\n```\n\n编译器会为非静态内部类构造函数添加外层的实例对象作为第一个参数，所以在生成实例化对象的时候会从上下文中获取外层对象进行反射创建对象`constructor.newInstance(param)`。\n\n为了更容易理解这段逻辑，提供一下单元测试可以调试：\n\n```java\ncom.alibaba.json.bvt.parser.deser.InnerClassDeser2#test_for_inner_class\n\ncom.alibaba.json.bvt.parser.deser.InnerClassDeser3#test_for_inner_class\n\ncom.alibaba.json.bvt.parser.deser.InnerClassDeser4#test_for_inner_class\n```\n","slug":"Fastjson源码解析-反序列化(二)-内部注册反序列化解析","published":1,"updated":"2018-10-12T01:59:07.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4et2000bxat8hnfn04yi","content":"<h2 id=\"反序列化回调接口实现分析\"><a href=\"#反序列化回调接口实现分析\" class=\"headerlink\" title=\"反序列化回调接口实现分析\"></a>反序列化回调接口实现分析</h2><h3 id=\"内部注册的反序列化\"><a href=\"#内部注册的反序列化\" class=\"headerlink\" title=\"内部注册的反序列化\"></a>内部注册的反序列化</h3><p>fastjson针对常用的类型已经注册了反序列化实现方案，根据源代码注册<code>com.alibaba.fastjson.parser.ParserConfig#initDeserializers</code>可以得到列表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">注册的类型</th>\n<th style=\"text-align:left\">反序列化实例</th>\n<th style=\"text-align:center\">是否支持序列化</th>\n<th style=\"text-align:center\">是否支持反序列化</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SimpleDateFormat</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Timestamp</td>\n<td style=\"text-align:left\">SqlDateDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Date</td>\n<td style=\"text-align:left\">SqlDateDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Time</td>\n<td style=\"text-align:left\">TimeDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Date</td>\n<td style=\"text-align:left\">DateCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Calendar</td>\n<td style=\"text-align:left\">CalendarCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XMLGregorianCalendar</td>\n<td style=\"text-align:left\">CalendarCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JSONObject</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JSONArray</td>\n<td style=\"text-align:left\">CollectionCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Map</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HashMap</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedHashMap</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TreeMap</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ConcurrentMap</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ConcurrentHashMap</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Collection</td>\n<td style=\"text-align:left\">CollectionCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">List</td>\n<td style=\"text-align:left\">CollectionCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ArrayList</td>\n<td style=\"text-align:left\">CollectionCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object</td>\n<td style=\"text-align:left\">JavaObjectDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">StringCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StringBuffer</td>\n<td style=\"text-align:left\">StringCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StringBuilder</td>\n<td style=\"text-align:left\">StringCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">CharacterCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Character</td>\n<td style=\"text-align:left\">CharacterCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">byte</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Byte</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Short</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Integer</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">LongCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Long</td>\n<td style=\"text-align:left\">LongCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BigInteger</td>\n<td style=\"text-align:left\">BigIntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BigDecimal</td>\n<td style=\"text-align:left\">BigDecimalCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">FloatCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Float</td>\n<td style=\"text-align:left\">FloatCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Double</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">BooleanCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">BooleanCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Class</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">char[]</td>\n<td style=\"text-align:left\">CharArrayCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicBoolean</td>\n<td style=\"text-align:left\">BooleanCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicBoolean</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicLong</td>\n<td style=\"text-align:left\">LongCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">WeakReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SoftReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UUID</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TimeZone</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Locale</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Currency</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InetAddress</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inet4Address</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inet6Address</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InetSocketAddress</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">File</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URI</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URL</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pattern</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Charset</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JSONPath</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicIntegerArray</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicLongArray</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StackTraceElement</td>\n<td style=\"text-align:left\">StackTraceElementDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Serializable</td>\n<td style=\"text-align:left\">JavaObjectDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cloneable</td>\n<td style=\"text-align:left\">JavaObjectDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Comparable</td>\n<td style=\"text-align:left\">JavaObjectDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Closeable</td>\n<td style=\"text-align:left\">JavaObjectDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JSONPObject</td>\n<td style=\"text-align:left\">JSONPDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<p>通过上面表格发现几乎把所有JDK常用的类型都注册了一遍，目的是在运行时能够查找到特定的反序列化实例而不需要使用默认Java的反序列化实例。</p>\n<p>我们先从常见的类型开始分析反序列化实现。</p>\n<h3 id=\"BooleanCodec反序列化\"><a href=\"#BooleanCodec反序列化\" class=\"headerlink\" title=\"BooleanCodec反序列化\"></a>BooleanCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\"></span><br><span class=\"line\">    Boolean boolObj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 遇到true类型的token，预读下一个token */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lexer.token() == JSONToken.TRUE) &#123;</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">            boolObj = Boolean.TRUE;</span><br><span class=\"line\">            <span class=\"comment\">/** 遇到false类型的token，预读下一个token */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.token() == JSONToken.FALSE) &#123;</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">            boolObj = Boolean.FALSE;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 遇到整数类型的token，预读下一个token */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> intValue = lexer.intValue();</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 1代表true，其他情况false */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (intValue == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                boolObj = Boolean.TRUE;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                boolObj = Boolean.FALSE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Object value = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 处理其他情况，比如Y,T代表true */</span></span><br><span class=\"line\">            boolObj = TypeUtils.castToBoolean(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"parseBoolean error, field : \"</span> + fieldName, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果是原子类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz == AtomicBoolean.class) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> AtomicBoolean(boolObj.booleanValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) boolObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每次反序列化拿到token是，当前记录的字符<code>ch</code>变量实际是token结尾的下一个字符，<code>boolean</code>类型字段会触发该接口。</p>\n<h3 id=\"CharacterCodec反序列化\"><a href=\"#CharacterCodec反序列化\" class=\"headerlink\" title=\"CharacterCodec反序列化\"></a>CharacterCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 根据token解析类型 */</span></span><br><span class=\"line\">    Object value = parser.parse();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value == <span class=\"keyword\">null</span></span><br><span class=\"line\">        ? <span class=\"keyword\">null</span></span><br><span class=\"line\">        <span class=\"comment\">/** 转换成char类型，如果是string取字符串第一个char */</span></span><br><span class=\"line\">        : (T) TypeUtils.castToChar(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">parse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看着反序列化应该挺简单，但是内部解析值委托给了<code>DefaultJSONParser#parse(java.lang.Object)</code>, 会把字符串解析取第一个字符处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">parse</span><span class=\"params\">(Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = <span class=\"keyword\">this</span>.lexer;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (lexer.token()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  ...忽略其他类型token，后面遇到会讲解</span></span><br><span class=\"line\"><span class=\"comment\">         * /</span></span><br><span class=\"line\"><span class=\"comment\">        case LITERAL_STRING:</span></span><br><span class=\"line\"><span class=\"comment\">            /** 探测到是字符串类型，解析值 */</span></span><br><span class=\"line\">            String stringLiteral = lexer.stringVal();</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.isEnabled(Feature.AllowISO8601DateFormat)) &#123;</span><br><span class=\"line\">                JSONScanner iso8601Lexer = <span class=\"keyword\">new</span> JSONScanner(stringLiteral);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (iso8601Lexer.scanISO8601DateIfMatch()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> iso8601Lexer.getCalendar().getTime();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    iso8601Lexer.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> stringLiteral;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  ...忽略其他类型token，后面遇到会讲解</span></span><br><span class=\"line\"><span class=\"comment\">         * /</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"IntegerCodec反序列化\"><a href=\"#IntegerCodec反序列化\" class=\"headerlink\" title=\"IntegerCodec反序列化\"></a>IntegerCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> token = lexer.token();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果解析到null值，返回null */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.NULL) &#123;</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Integer intObj;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_INT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 整型字面量，预读下一个token */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> val = lexer.intValue();</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">            intObj = Integer.valueOf(val);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_FLOAT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 浮点数字面量，预读下一个token */</span></span><br><span class=\"line\">            BigDecimal decimalValue = lexer.decimalValue();</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">            intObj = Integer.valueOf(decimalValue.intValue());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (token == JSONToken.LBRACE) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 处理历史原因反序列化AtomicInteger成map */</span></span><br><span class=\"line\">                JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                parser.parseObject(jsonObject);</span><br><span class=\"line\">                intObj = TypeUtils.castToInt(jsonObject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 处理其他情况 */</span></span><br><span class=\"line\">                Object value = parser.parse();</span><br><span class=\"line\">                intObj = TypeUtils.castToInt(value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"parseInt error, field : \"</span> + fieldName, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz == AtomicInteger.class) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> AtomicInteger(intObj.intValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) intObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>针对特殊场景AutomicInteger类型，可以通过单元测试<code>com.alibaba.json.bvt.parser.AtomicIntegerComptableAndroidTest#test_for_compatible_zero</code>进行动手实践调试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test_for_compatible_zero</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    String text = <span class=\"string\">\"&#123;\\\"andIncrement\\\":-1,\\\"andDecrement\\\":0&#125;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(<span class=\"number\">0</span>, JSON.parseObject(text, AtomicInteger.class).intValue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续对<code>parseObject(jsonObject)</code>进行分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">parseObject</span><span class=\"params\">(<span class=\"keyword\">final</span> Map object)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseObject(object, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LongCodec反序列化\"><a href=\"#LongCodec反序列化\" class=\"headerlink\" title=\"LongCodec反序列化\"></a>LongCodec反序列化</h3><p>因为和整数反序列化极其类似，请参考<code>IntegerCodec</code>不进行冗余分析。</p>\n<h3 id=\"FloatCodec反序列化\"><a href=\"#FloatCodec反序列化\" class=\"headerlink\" title=\"FloatCodec反序列化\"></a>FloatCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 整型字面量，预读下一个token */</span></span><br><span class=\"line\">        String val = lexer.numberString();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) Float.valueOf(Float.parseFloat(val));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_FLOAT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 浮点数字面量，预读下一个token */</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> val = lexer.floatValue();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) Float.valueOf(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 处理其他情况 */</span></span><br><span class=\"line\">    Object value = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) TypeUtils.castToFloat(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"BigDecimalCodec反序列化\"><a href=\"#BigDecimalCodec反序列化\" class=\"headerlink\" title=\"BigDecimalCodec反序列化\"></a>BigDecimalCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 整型字面量，预读下一个token */</span></span><br><span class=\"line\">        BigDecimal decimalValue = lexer.decimalValue();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) decimalValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_FLOAT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 浮点数字面量，预读下一个token */</span></span><br><span class=\"line\">        BigDecimal val = lexer.decimalValue();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object value = parser.parse();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value == <span class=\"keyword\">null</span> <span class=\"comment\">//</span></span><br><span class=\"line\">        ? <span class=\"keyword\">null</span> <span class=\"comment\">//</span></span><br><span class=\"line\">        : (T) TypeUtils.castToBigDecimal(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"StringCodec反序列化\"><a href=\"#StringCodec反序列化\" class=\"headerlink\" title=\"StringCodec反序列化\"></a>StringCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz == StringBuffer.class) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 将解析的字符序列转换成StringBuffer */</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 字符串字面量，预读下一个token */</span></span><br><span class=\"line\">            String val = lexer.stringVal();</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> StringBuffer(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Object value = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> StringBuffer(value.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz == StringBuilder.class) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 将解析的字符序列转换成StringBuilder */</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">            String val = lexer.stringVal();</span><br><span class=\"line\">            <span class=\"comment\">/** 字符串字面量，预读下一个token */</span></span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> StringBuilder(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Object value = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> StringBuilder(value.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) deserialze(parser);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.getLexer();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 字符串字面量，预读下一个token */</span></span><br><span class=\"line\">        String val = lexer.stringVal();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 整型字面量，预读下一个token */</span></span><br><span class=\"line\">        String val = lexer.numberString();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object value = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) value.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ObjectArrayCodec反序列化\"><a href=\"#ObjectArrayCodec反序列化\" class=\"headerlink\" title=\"ObjectArrayCodec反序列化\"></a>ObjectArrayCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type type, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> token = lexer.token();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.NULL) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 解析到Null，预读下一个token */</span></span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_STRING || token == JSONToken.HEX) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = lexer.bytesValue();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes.length == <span class=\"number\">0</span> &amp;&amp; type != <span class=\"keyword\">byte</span>[].class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) bytes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class componentClass;</span><br><span class=\"line\">    Type componentType;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> GenericArrayType) &#123;</span><br><span class=\"line\">        GenericArrayType clazz = (GenericArrayType) type;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取泛型数组真实参数类型 */</span></span><br><span class=\"line\">        componentType = clazz.getGenericComponentType();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (componentType <span class=\"keyword\">instanceof</span> TypeVariable) &#123;</span><br><span class=\"line\">            TypeVariable typeVar = (TypeVariable) componentType;</span><br><span class=\"line\">            Type objType = parser.getContext().type;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (objType <span class=\"keyword\">instanceof</span> ParameterizedType) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 获取泛型参数化类型，eg: Collection&lt;String&gt; */</span></span><br><span class=\"line\">                ParameterizedType objParamType = (ParameterizedType) objType;</span><br><span class=\"line\">                Type objRawType = objParamType.getRawType();</span><br><span class=\"line\">                Type actualType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (objRawType <span class=\"keyword\">instanceof</span> Class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 遍历Class包含的参数化类型，查找与泛型数组类型名字一致的作为真实类型 */</span></span><br><span class=\"line\">                    TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; objTypeParams.length; ++i) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (objTypeParams[i].getName().equals(typeVar.getName())) &#123;</span><br><span class=\"line\">                            actualType = objParamType.getActualTypeArguments()[i];</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (actualType <span class=\"keyword\">instanceof</span> Class) &#123;</span><br><span class=\"line\">                    componentClass = (Class) actualType;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    componentClass = Object.class;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取数组类型上界</span></span><br><span class=\"line\">                componentClass = TypeUtils.getClass(typeVar.getBounds()[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            componentClass = TypeUtils.getClass(componentType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 非泛型数组，普通对象数组 */</span></span><br><span class=\"line\">        Class clazz = (Class) type;</span><br><span class=\"line\">        componentType = componentClass = clazz.getComponentType();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    JSONArray array = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\">    <span class=\"comment\">/** 根据token解析数组元素放到array中 */</span></span><br><span class=\"line\">    parser.parseArray(componentType, array, fieldName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) toObjectArray(parser, componentClass, array);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaBeanDeserializer反序列化\"><a href=\"#JavaBeanDeserializer反序列化\" class=\"headerlink\" title=\"JavaBeanDeserializer反序列化\"></a>JavaBeanDeserializer反序列化</h3><p>为了节省冗余的分析，我们主要分析最复杂的默认<code>JavaBeanDeserializer</code>反序列化实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JavaBeanDeserializer</span><span class=\"params\">(ParserConfig config, JavaBeanInfo beanInfo)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">/** java对象类名称 */</span></span><br><span class=\"line\">     <span class=\"keyword\">this</span>.clazz = beanInfo.clazz;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.beanInfo = beanInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">     Map&lt;String, FieldDeserializer&gt; alterNameFieldDeserializers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     sortedFieldDeserializers = <span class=\"keyword\">new</span> FieldDeserializer[beanInfo.sortedFields.length];</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      *  给已排序的字段创建反序列化实例，如果字段有别名，</span></span><br><span class=\"line\"><span class=\"comment\">      *  关联别名到反序列化的映射</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = beanInfo.sortedFields.length; i &lt; size; ++i) &#123;</span><br><span class=\"line\">         FieldInfo fieldInfo = beanInfo.sortedFields[i];</span><br><span class=\"line\">         FieldDeserializer fieldDeserializer = config.createFieldDeserializer(config, beanInfo, fieldInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">         sortedFieldDeserializers[i] = fieldDeserializer;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">for</span> (String name : fieldInfo.alternateNames) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (alterNameFieldDeserializers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                 alterNameFieldDeserializers = <span class=\"keyword\">new</span> HashMap&lt;String, FieldDeserializer&gt;();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             alterNameFieldDeserializers.put(name, fieldDeserializer);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.alterNameFieldDeserializers = alterNameFieldDeserializers;</span><br><span class=\"line\"></span><br><span class=\"line\">     fieldDeserializers = <span class=\"keyword\">new</span> FieldDeserializer[beanInfo.fields.length];</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = beanInfo.fields.length; i &lt; size; ++i) &#123;</span><br><span class=\"line\">         FieldInfo fieldInfo = beanInfo.fields[i];</span><br><span class=\"line\">         <span class=\"comment\">/** 采用二分法在sortedFieldDeserializers中查找已创建的反序列化类型 */</span></span><br><span class=\"line\">         FieldDeserializer fieldDeserializer = getFieldDeserializer(fieldInfo.name);</span><br><span class=\"line\">         fieldDeserializers[i] = fieldDeserializer;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数就是简单构造类字段对应的反序列化\b实例而已，接下来看下关键实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           Type type,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           Object fieldName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           Object object,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">int</span> features,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">int</span>[] setFlags)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == JSON.class || type == JSONObject.class) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 根据当前token类型判断解析对象 */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) parser.parse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexerBase lexer = (JSONLexerBase) parser.lexer;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ParserConfig config = parser.getConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> token = lexer.token();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.NULL) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 解析null，预读下一个token并返回 */</span></span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ParseContext context = parser.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object != <span class=\"keyword\">null</span> &amp;&amp; context != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        context = context.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ParseContext childContext = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; fieldValues = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token == JSONToken.RBRACE) &#123;</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">            <span class=\"comment\">/** 遇到&#125;认为遇到对象结束，尝试创建实例对象 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                object = createInstance(parser, type);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token == JSONToken.LBRACKET) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mask = Feature.SupportArrayToBean.mask;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isSupportArrayToBean = (beanInfo.parserFeatures &amp; mask) != <span class=\"number\">0</span></span><br><span class=\"line\">                                           || lexer.isEnabled(Feature.SupportArrayToBean)</span><br><span class=\"line\">                                           || (features &amp; mask) != <span class=\"number\">0</span></span><br><span class=\"line\">                                           ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isSupportArrayToBean) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 将数组值反序列化为对象，根据sortedFieldDeserializers依次写字段值 */</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> deserialzeArrayMapping(parser, type, fieldName, object);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token != JSONToken.LBRACE &amp;&amp; token != JSONToken.COMMA) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.isBlankInput()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">                String strVal = lexer.stringVal();</span><br><span class=\"line\">                <span class=\"comment\">/** 读到空值字符串，返回null */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (strVal.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    lexer.nextToken();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (beanInfo.jsonType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 探测是否是枚举类型 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Class&lt;?&gt; seeAlsoClass : beanInfo.jsonType.seeAlso()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (Enum.class.isAssignableFrom(seeAlsoClass)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                Enum&lt;?&gt; e = Enum.valueOf((Class&lt;Enum&gt;) seeAlsoClass, strVal);</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> (T) e;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// skip</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_ISO8601_DATE) &#123;</span><br><span class=\"line\">                Calendar calendar = lexer.getCalendar();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (token == JSONToken.LBRACKET &amp;&amp; lexer.getCurrent() == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 包含零元素的数组 */</span></span><br><span class=\"line\">                lexer.next();</span><br><span class=\"line\">                lexer.nextToken();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            StringBuffer buf = (<span class=\"keyword\">new</span> StringBuffer()) <span class=\"comment\">//</span></span><br><span class=\"line\">                                                    .append(<span class=\"string\">\"syntax error, expect &#123;, actual \"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">                                                    .append(lexer.tokenName()) <span class=\"comment\">//</span></span><br><span class=\"line\">                                                    .append(<span class=\"string\">\", pos \"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">                                                    .append(lexer.pos());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldName <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                buf <span class=\"comment\">//</span></span><br><span class=\"line\">                    .append(<span class=\"string\">\", fieldName \"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">                    .append(fieldName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            buf.append(<span class=\"string\">\", fastjson-version \"</span>).append(JSON.VERSION);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(buf.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123;</span><br><span class=\"line\">            parser.resolveStatus = DefaultJSONParser.NONE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String typeKey = beanInfo.typeKey;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> fieldIndex = <span class=\"number\">0</span>;; fieldIndex++) &#123;</span><br><span class=\"line\">            String key = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            FieldDeserializer fieldDeser = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            FieldInfo fieldInfo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            Class&lt;?&gt; fieldClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            JSONField feildAnnotation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">/** 检查是否所有字段都已经处理 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldIndex &lt; sortedFieldDeserializers.length) &#123;</span><br><span class=\"line\">                fieldDeser = sortedFieldDeserializers[fieldIndex];</span><br><span class=\"line\">                fieldInfo = fieldDeser.fieldInfo;</span><br><span class=\"line\">                fieldClass = fieldInfo.fieldClass;</span><br><span class=\"line\">                feildAnnotation = fieldInfo.getAnnotation();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> matchField = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> valueParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Object fieldValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldDeser != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span>[] name_chars = fieldInfo.name_chars;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">int</span>.class || fieldClass == Integer.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描整数值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldInt(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">long</span>.class || fieldClass == Long.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描长整型值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldLong(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == String.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描字符串值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldString(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == java.util.Date.class &amp;&amp; fieldInfo.format == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描日期值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldDate(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == BigDecimal.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描高精度值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldDecimal(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == BigInteger.class) &#123;</span><br><span class=\"line\">                    fieldValue = lexer.scanFieldBigInteger(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">boolean</span>.class || fieldClass == Boolean.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描boolean值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldBoolean(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">float</span>.class || fieldClass == Float.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描浮点值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldFloat(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">double</span>.class || fieldClass == Double.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描double值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldDouble(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass.isEnum()</span><br><span class=\"line\">                        &amp;&amp; parser.getConfig().getDeserializer(fieldClass) <span class=\"keyword\">instanceof</span> EnumDeserializer</span><br><span class=\"line\">                        &amp;&amp; (feildAnnotation == <span class=\"keyword\">null</span> || feildAnnotation.deserializeUsing() == Void.class)</span><br><span class=\"line\">                        ) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fieldDeser <span class=\"keyword\">instanceof</span> DefaultFieldDeserializer) &#123;</span><br><span class=\"line\">                        ObjectDeserializer fieldValueDeserilizer = ((DefaultFieldDeserializer) fieldDeser).fieldValueDeserilizer;</span><br><span class=\"line\">                        fieldValue = <span class=\"keyword\">this</span>.scanEnum(lexer, name_chars, fieldValueDeserilizer);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                            valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">int</span>[].class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描整型数组值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldIntArray(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">float</span>[].class) &#123;</span><br><span class=\"line\">                    fieldValue = lexer.scanFieldFloatArray(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">float</span>[][].class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描浮点数组值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldFloatArray2(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchField(name_chars)) &#123;</span><br><span class=\"line\">                    matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 如果当前字符串的json不匹配当前字段名称 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!matchField) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 将当前的字段名称加入符号表 */</span></span><br><span class=\"line\">                key = lexer.scanSymbol(parser.symbolTable);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 当前是无效的字段标识符，比如是,等符号 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    token = lexer.token();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (token == JSONToken.RBRACE) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 结束花括号, 预读下一个token */</span></span><br><span class=\"line\">                        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (token == JSONToken.COMMA) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (lexer.isEnabled(Feature.AllowArbitraryCommas)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"$ref\"</span> == key &amp;&amp; context != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);</span><br><span class=\"line\">                    token = lexer.token();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">                        String ref = lexer.stringVal();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"string\">\"@\"</span>.equals(ref)) &#123;</span><br><span class=\"line\">                            object = context.object;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"..\"</span>.equals(ref)) &#123;</span><br><span class=\"line\">                            ParseContext parentContext = context.parent;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (parentContext.object != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                object = parentContext.object;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                parser.addResolveTask(<span class=\"keyword\">new</span> ResolveTask(parentContext, ref));</span><br><span class=\"line\">                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"$\"</span>.equals(ref)) &#123;</span><br><span class=\"line\">                            ParseContext rootContext = context;</span><br><span class=\"line\">                            <span class=\"keyword\">while</span> (rootContext.parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                rootContext = rootContext.parent;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (rootContext.object != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                object = rootContext.object;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                parser.addResolveTask(<span class=\"keyword\">new</span> ResolveTask(rootContext, ref));</span><br><span class=\"line\">                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            Object refObj = parser.resolveReference(ref);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (refObj != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                object = refObj;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                parser.addResolveTask(<span class=\"keyword\">new</span> ResolveTask(context, ref));</span><br><span class=\"line\">                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"illegal ref, \"</span> + JSONToken.name(token));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    lexer.nextToken(JSONToken.RBRACE);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.token() != JSONToken.RBRACE) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"illegal ref\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">                    parser.setContext(context, object, fieldName);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (T) object;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((typeKey != <span class=\"keyword\">null</span> &amp;&amp; typeKey.equals(key))</span><br><span class=\"line\">                        || JSON.DEFAULT_TYPE_KEY == key) &#123;</span><br><span class=\"line\">                    lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">                        String typeName = lexer.stringVal();</span><br><span class=\"line\">                        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/** 忽略字符串中包含<span class=\"doctag\">@type</span>解析 */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (typeName.equals(beanInfo.typeName)|| parser.isEnabled(Feature.IgnoreAutoType)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (lexer.token() == JSONToken.RBRACE) &#123;</span><br><span class=\"line\">                                lexer.nextToken();</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/** 根据枚举seeAlso查找反序列化实例 */</span></span><br><span class=\"line\">                        ObjectDeserializer deserializer = getSeeAlso(config, <span class=\"keyword\">this</span>.beanInfo, typeName);</span><br><span class=\"line\">                        Class&lt;?&gt; userType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (deserializer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 无法匹配，查找类对应的泛型或者参数化类型关联的反序列化实例 */</span></span><br><span class=\"line\">                            Class&lt;?&gt; expectClass = TypeUtils.getClass(type);</span><br><span class=\"line\">                            userType = config.checkAutoType(typeName, expectClass, lexer.getFeatures());</span><br><span class=\"line\">                            deserializer = parser.getConfig().getDeserializer(userType);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        Object typedObject = deserializer.deserialze(parser, userType, fieldName);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (deserializer <span class=\"keyword\">instanceof</span> JavaBeanDeserializer) &#123;</span><br><span class=\"line\">                            JavaBeanDeserializer javaBeanDeserializer = (JavaBeanDeserializer) deserializer;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (typeKey != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                FieldDeserializer typeKeyFieldDeser = javaBeanDeserializer.getFieldDeserializer(typeKey);</span><br><span class=\"line\">                                typeKeyFieldDeser.setValue(typedObject, typeName);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> (T) typedObject;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"syntax error\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 第一次创建并初始化对象实例 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span> &amp;&amp; fieldValues == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                object = createInstance(parser, type);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    fieldValues = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"keyword\">this</span>.fieldDeserializers.length);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                childContext = parser.setContext(context, object, fieldName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setFlags == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    setFlags = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[(<span class=\"keyword\">this</span>.fieldDeserializers.length / <span class=\"number\">32</span>) + <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matchField) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!valueParsed) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** json串当前满足字段名称，并且没有解析过值 ，</span></span><br><span class=\"line\"><span class=\"comment\">                     *  直接使用当前字段关联的反序列化实例解析</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    fieldDeser.parseField(parser, object, type, fieldValues);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 值已经解析过了，存储到map中 */</span></span><br><span class=\"line\">                        fieldValues.put(fieldInfo.name, fieldValue);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 字段值是null，排除int,long,float,double,boolean */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fieldClass != <span class=\"keyword\">int</span>.class</span><br><span class=\"line\">                                &amp;&amp; fieldClass != <span class=\"keyword\">long</span>.class</span><br><span class=\"line\">                                &amp;&amp; fieldClass != <span class=\"keyword\">float</span>.class</span><br><span class=\"line\">                                &amp;&amp; fieldClass != <span class=\"keyword\">double</span>.class</span><br><span class=\"line\">                                &amp;&amp; fieldClass != <span class=\"keyword\">boolean</span>.class</span><br><span class=\"line\">                                ) &#123;</span><br><span class=\"line\">                            fieldDeser.setValue(object, fieldValue);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        fieldDeser.setValue(object, fieldValue);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (setFlags != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> flagIndex = fieldIndex / <span class=\"number\">32</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> bitIndex = fieldIndex % <span class=\"number\">32</span>;</span><br><span class=\"line\">                        setFlags[flagIndex] |= (<span class=\"number\">1</span> &gt;&gt; bitIndex);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.END) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 字段名称当前和json串不匹配，通常顺序或者字段增加或者缺少，</span></span><br><span class=\"line\"><span class=\"comment\">                 *  根据key查找反序列化实例解析</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> match = parseField(parser, key, object, type, fieldValues, setFlags);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!match) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 遇到封闭花括号，与读下一个token，跳出循环 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.RBRACE) &#123;</span><br><span class=\"line\">                        lexer.nextToken();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.token() == JSONToken.COLON) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"syntax error, unexpect token ':'\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.token() == JSONToken.COMMA) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.token() == JSONToken.RBRACE) &#123;</span><br><span class=\"line\">                lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.token() == JSONToken.IDENTIFIER || lexer.token() == JSONToken.ERROR) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"syntax error, unexpect token \"</span> + JSONToken.name(lexer.token()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldValues == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 第一次创建并初始化对象实例 */</span></span><br><span class=\"line\">                object = createInstance(parser, type);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (childContext == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    childContext = parser.setContext(context, object, fieldName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (T) object;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 提取构造函数参数名称 */</span></span><br><span class=\"line\">            String[] paramNames = beanInfo.creatorConstructorParameters;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Object[] params;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (paramNames != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                params = <span class=\"keyword\">new</span> Object[paramNames.length];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; paramNames.length; i++) &#123;</span><br><span class=\"line\">                    String paramName = paramNames[i];</span><br><span class=\"line\"></span><br><span class=\"line\">                    Object param = fieldValues.remove(paramName);</span><br><span class=\"line\">                    <span class=\"comment\">/** 解析过的字段不包含当前参数名字 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (param == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        Type fieldType = beanInfo.creatorConstructorParameterTypes[i];</span><br><span class=\"line\">                        FieldInfo fieldInfo = beanInfo.fields[i];</span><br><span class=\"line\">                        <span class=\"comment\">/** 探测并设置类型默认值 */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">byte</span>.class) &#123;</span><br><span class=\"line\">                            param = (<span class=\"keyword\">byte</span>) <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">short</span>.class) &#123;</span><br><span class=\"line\">                            param = (<span class=\"keyword\">short</span>) <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">int</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">long</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0L</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">float</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0F</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">double</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0</span>D;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">boolean</span>.class) &#123;</span><br><span class=\"line\">                            param = Boolean.FALSE;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == String.class</span><br><span class=\"line\">                                &amp;&amp; (fieldInfo.parserFeatures &amp; Feature.InitStringFieldAsEmpty.mask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            param = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    params[i] = param;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 根据字段探测并初始化构造函数参数默认值 */</span></span><br><span class=\"line\">                FieldInfo[] fieldInfoList = beanInfo.fields;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> size = fieldInfoList.length;</span><br><span class=\"line\">                params = <span class=\"keyword\">new</span> Object[size];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">                    FieldInfo fieldInfo = fieldInfoList[i];</span><br><span class=\"line\">                    Object param = fieldValues.get(fieldInfo.name);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (param == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        Type fieldType = fieldInfo.fieldType;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">byte</span>.class) &#123;</span><br><span class=\"line\">                            param = (<span class=\"keyword\">byte</span>) <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">short</span>.class) &#123;</span><br><span class=\"line\">                            param = (<span class=\"keyword\">short</span>) <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">int</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">long</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0L</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">float</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0F</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">double</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0</span>D;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">boolean</span>.class) &#123;</span><br><span class=\"line\">                            param = Boolean.FALSE;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == String.class</span><br><span class=\"line\">                                &amp;&amp; (fieldInfo.parserFeatures &amp; Feature.InitStringFieldAsEmpty.mask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            param = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    params[i] = param;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (beanInfo.creatorConstructor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    object = beanInfo.creatorConstructor.newInstance(params);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"create instance error, \"</span> + paramNames + <span class=\"string\">\", \"</span></span><br><span class=\"line\">                                            + beanInfo.creatorConstructor.toGenericString(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (paramNames != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 剩余字段查找反序列化器set值 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Map.Entry&lt;String, Object&gt; entry : fieldValues.entrySet()) &#123;</span><br><span class=\"line\">                        FieldDeserializer fieldDeserializer = getFieldDeserializer(entry.getKey());</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fieldDeserializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            fieldDeserializer.setValue(object, entry.getValue());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (beanInfo.factoryMethod != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    object = beanInfo.factoryMethod.invoke(<span class=\"keyword\">null</span>, params);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"create factory method error, \"</span> + beanInfo.factoryMethod.toString(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            childContext.object = object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 检查是否扩展后置方法buildMethod，如果有进行调用 */</span></span><br><span class=\"line\">        Method buildMethod = beanInfo.buildMethod;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buildMethod == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        Object builtObj;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            builtObj = buildMethod.invoke(object);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"build object error\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) builtObj;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childContext != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            childContext.object = object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        parser.setContext(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码实在又臭又长，实际做的事情如下：</p>\n<ol>\n<li>根据类所有的字段，字段类型进行json串进行匹配，首先检查json串的值是否和当前字段名称相等，如果相等认为匹配成功，会创建实例对象并且把解析字段值set进去。</li>\n<li>如果当前json串顺序和java对象字段不一致怎么办，这个时候我字段又全部遍历完了，fastjson会自动把当前解析的字段名称加入符号表中，然后查找字段\b名称对应的反序列化实例进行set值操作</li>\n<li>当前实现提供了解析对象后buildMethod扩展点，如果提供了会进行回调然后返回</li>\n</ol>\n<p>值得一提的是构造函数处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">createInstance</span><span class=\"params\">(DefaultJSONParser parser, Type type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> Class) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz.isInterface()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 针对反序列化时接口类型的，通过jdk冬天代理拦截put和get等操作，</span></span><br><span class=\"line\"><span class=\"comment\">             *  进行set或者put值的操作值会存储在jsonobject内部的map结构</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            Class&lt;?&gt; clazz = (Class&lt;?&gt;) type;</span><br><span class=\"line\">            ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> JSONObject obj = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">            Object proxy = Proxy.newProxyInstance(loader, <span class=\"keyword\">new</span> Class&lt;?&gt;[] &#123; clazz &#125;, obj);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 忽略没有默认构造函数和没有创建对象的工厂方法 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanInfo.defaultConstructor == <span class=\"keyword\">null</span> &amp;&amp; beanInfo.factoryMethod == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 忽略同时存在显示构造函数和创建对象的工厂方法的场景 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanInfo.factoryMethod != <span class=\"keyword\">null</span> &amp;&amp; beanInfo.defaultConstructorParameterSize &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object object;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = beanInfo.defaultConstructor;</span><br><span class=\"line\">        <span class=\"comment\">/** 存在默认无参构造函数 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (beanInfo.defaultConstructorParameterSize == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (constructor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                object = constructor.newInstance();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 否则使用工厂方法生成对象 */</span></span><br><span class=\"line\">                object = beanInfo.factoryMethod.invoke(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ParseContext context = parser.getContext();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span> || context.object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"can't create non-static inner class instance.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> String typeName;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> Class) &#123;</span><br><span class=\"line\">                typeName = ((Class&lt;?&gt;) type).getName();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"can't create non-static inner class instance.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> lastIndex = typeName.lastIndexOf(<span class=\"string\">'$'</span>);</span><br><span class=\"line\">            String parentClassName = typeName.substring(<span class=\"number\">0</span>, lastIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">            Object ctxObj = context.object;</span><br><span class=\"line\">            String parentName = ctxObj.getClass().getName();</span><br><span class=\"line\"></span><br><span class=\"line\">            Object param = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!parentName.equals(parentClassName)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 处理继承过来的类 */</span></span><br><span class=\"line\">                ParseContext parentContext = context.parent;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parentContext != <span class=\"keyword\">null</span></span><br><span class=\"line\">                        &amp;&amp; parentContext.object != <span class=\"keyword\">null</span></span><br><span class=\"line\">                        &amp;&amp; (<span class=\"string\">\"java.util.ArrayList\"</span>.equals(parentName)</span><br><span class=\"line\">                        || <span class=\"string\">\"java.util.List\"</span>.equals(parentName)</span><br><span class=\"line\">                        || <span class=\"string\">\"java.util.Collection\"</span>.equals(parentName)</span><br><span class=\"line\">                        || <span class=\"string\">\"java.util.Map\"</span>.equals(parentName)</span><br><span class=\"line\">                        || <span class=\"string\">\"java.util.HashMap\"</span>.equals(parentName))) &#123;</span><br><span class=\"line\">                    parentName = parentContext.object.getClass().getName();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parentName.equals(parentClassName)) &#123;</span><br><span class=\"line\">                        param = parentContext.object;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 处理非静态内部类场景，</span></span><br><span class=\"line\"><span class=\"comment\">                 *  编译器会自动修改内部类构造函数，添加外层类实例对象作为参数，</span></span><br><span class=\"line\"><span class=\"comment\">                 *  ctxObj就是外层实例对象</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                param = ctxObj;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (param == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"can't create non-static inner class instance.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            object = constructor.newInstance(param);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"create instance error, class \"</span> + clazz.getName(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 开启InitStringFieldAsEmpty特性，会把字符串字段初始化为空串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parser != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; parser.lexer.isEnabled(Feature.InitStringFieldAsEmpty)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (FieldInfo fieldInfo : beanInfo.fields) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldInfo.fieldClass == String.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fieldInfo.set(object, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"create instance error, class \"</span> + clazz.getName(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译器会为非静态内部类构造函数添加外层的实例对象作为第一个参数，所以在生成实例化对象的时候会从上下文中获取外层对象进行反射创建对象<code>constructor.newInstance(param)</code>。</p>\n<p>为了更容易理解这段逻辑，提供一下单元测试可以调试：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.alibaba.json.bvt.parser.deser.InnerClassDeser2#test_for_inner_class</span><br><span class=\"line\"></span><br><span class=\"line\">com.alibaba.json.bvt.parser.deser.InnerClassDeser3#test_for_inner_class</span><br><span class=\"line\"></span><br><span class=\"line\">com.alibaba.json.bvt.parser.deser.InnerClassDeser4#test_for_inner_class</span><br></pre></td></tr></table></figure>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"反序列化回调接口实现分析\"><a href=\"#反序列化回调接口实现分析\" class=\"headerlink\" title=\"反序列化回调接口实现分析\"></a>反序列化回调接口实现分析</h2><h3 id=\"内部注册的反序列化\"><a href=\"#内部注册的反序列化\" class=\"headerlink\" title=\"内部注册的反序列化\"></a>内部注册的反序列化</h3><p>fastjson针对常用的类型已经注册了反序列化实现方案，根据源代码注册<code>com.alibaba.fastjson.parser.ParserConfig#initDeserializers</code>可以得到列表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">注册的类型</th>\n<th style=\"text-align:left\">反序列化实例</th>\n<th style=\"text-align:center\">是否支持序列化</th>\n<th style=\"text-align:center\">是否支持反序列化</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">SimpleDateFormat</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Timestamp</td>\n<td style=\"text-align:left\">SqlDateDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Date</td>\n<td style=\"text-align:left\">SqlDateDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Time</td>\n<td style=\"text-align:left\">TimeDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Date</td>\n<td style=\"text-align:left\">DateCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Calendar</td>\n<td style=\"text-align:left\">CalendarCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XMLGregorianCalendar</td>\n<td style=\"text-align:left\">CalendarCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JSONObject</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JSONArray</td>\n<td style=\"text-align:left\">CollectionCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Map</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HashMap</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedHashMap</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TreeMap</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ConcurrentMap</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ConcurrentHashMap</td>\n<td style=\"text-align:left\">MapDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Collection</td>\n<td style=\"text-align:left\">CollectionCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">List</td>\n<td style=\"text-align:left\">CollectionCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ArrayList</td>\n<td style=\"text-align:left\">CollectionCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object</td>\n<td style=\"text-align:left\">JavaObjectDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">StringCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StringBuffer</td>\n<td style=\"text-align:left\">StringCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StringBuilder</td>\n<td style=\"text-align:left\">StringCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">char</td>\n<td style=\"text-align:left\">CharacterCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Character</td>\n<td style=\"text-align:left\">CharacterCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">byte</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Byte</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Short</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Integer</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long</td>\n<td style=\"text-align:left\">LongCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Long</td>\n<td style=\"text-align:left\">LongCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BigInteger</td>\n<td style=\"text-align:left\">BigIntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BigDecimal</td>\n<td style=\"text-align:left\">BigDecimalCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float</td>\n<td style=\"text-align:left\">FloatCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Float</td>\n<td style=\"text-align:left\">FloatCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Double</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">BooleanCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">BooleanCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Class</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">char[]</td>\n<td style=\"text-align:left\">CharArrayCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicBoolean</td>\n<td style=\"text-align:left\">BooleanCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicBoolean</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicLong</td>\n<td style=\"text-align:left\">LongCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">WeakReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SoftReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UUID</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TimeZone</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Locale</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Currency</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InetAddress</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inet4Address</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inet6Address</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InetSocketAddress</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">File</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URI</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URL</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pattern</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Charset</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JSONPath</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">NumberDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicIntegerArray</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicLongArray</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StackTraceElement</td>\n<td style=\"text-align:left\">StackTraceElementDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Serializable</td>\n<td style=\"text-align:left\">JavaObjectDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Cloneable</td>\n<td style=\"text-align:left\">JavaObjectDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Comparable</td>\n<td style=\"text-align:left\">JavaObjectDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Closeable</td>\n<td style=\"text-align:left\">JavaObjectDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JSONPObject</td>\n<td style=\"text-align:left\">JSONPDeserializer</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<p>通过上面表格发现几乎把所有JDK常用的类型都注册了一遍，目的是在运行时能够查找到特定的反序列化实例而不需要使用默认Java的反序列化实例。</p>\n<p>我们先从常见的类型开始分析反序列化实现。</p>\n<h3 id=\"BooleanCodec反序列化\"><a href=\"#BooleanCodec反序列化\" class=\"headerlink\" title=\"BooleanCodec反序列化\"></a>BooleanCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\"></span><br><span class=\"line\">    Boolean boolObj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 遇到true类型的token，预读下一个token */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lexer.token() == JSONToken.TRUE) &#123;</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">            boolObj = Boolean.TRUE;</span><br><span class=\"line\">            <span class=\"comment\">/** 遇到false类型的token，预读下一个token */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.token() == JSONToken.FALSE) &#123;</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">            boolObj = Boolean.FALSE;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 遇到整数类型的token，预读下一个token */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> intValue = lexer.intValue();</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 1代表true，其他情况false */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (intValue == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                boolObj = Boolean.TRUE;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                boolObj = Boolean.FALSE;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Object value = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 处理其他情况，比如Y,T代表true */</span></span><br><span class=\"line\">            boolObj = TypeUtils.castToBoolean(value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"parseBoolean error, field : \"</span> + fieldName, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果是原子类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz == AtomicBoolean.class) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> AtomicBoolean(boolObj.booleanValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) boolObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>每次反序列化拿到token是，当前记录的字符<code>ch</code>变量实际是token结尾的下一个字符，<code>boolean</code>类型字段会触发该接口。</p>\n<h3 id=\"CharacterCodec反序列化\"><a href=\"#CharacterCodec反序列化\" class=\"headerlink\" title=\"CharacterCodec反序列化\"></a>CharacterCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 根据token解析类型 */</span></span><br><span class=\"line\">    Object value = parser.parse();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value == <span class=\"keyword\">null</span></span><br><span class=\"line\">        ? <span class=\"keyword\">null</span></span><br><span class=\"line\">        <span class=\"comment\">/** 转换成char类型，如果是string取字符串第一个char */</span></span><br><span class=\"line\">        : (T) TypeUtils.castToChar(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">parse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parse(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看着反序列化应该挺简单，但是内部解析值委托给了<code>DefaultJSONParser#parse(java.lang.Object)</code>, 会把字符串解析取第一个字符处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">parse</span><span class=\"params\">(Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = <span class=\"keyword\">this</span>.lexer;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (lexer.token()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  ...忽略其他类型token，后面遇到会讲解</span></span><br><span class=\"line\"><span class=\"comment\">         * /</span></span><br><span class=\"line\"><span class=\"comment\">        case LITERAL_STRING:</span></span><br><span class=\"line\"><span class=\"comment\">            /** 探测到是字符串类型，解析值 */</span></span><br><span class=\"line\">            String stringLiteral = lexer.stringVal();</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.isEnabled(Feature.AllowISO8601DateFormat)) &#123;</span><br><span class=\"line\">                JSONScanner iso8601Lexer = <span class=\"keyword\">new</span> JSONScanner(stringLiteral);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (iso8601Lexer.scanISO8601DateIfMatch()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> iso8601Lexer.getCalendar().getTime();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    iso8601Lexer.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> stringLiteral;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  ...忽略其他类型token，后面遇到会讲解</span></span><br><span class=\"line\"><span class=\"comment\">         * /</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"IntegerCodec反序列化\"><a href=\"#IntegerCodec反序列化\" class=\"headerlink\" title=\"IntegerCodec反序列化\"></a>IntegerCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> token = lexer.token();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果解析到null值，返回null */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.NULL) &#123;</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Integer intObj;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_INT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 整型字面量，预读下一个token */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> val = lexer.intValue();</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">            intObj = Integer.valueOf(val);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_FLOAT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 浮点数字面量，预读下一个token */</span></span><br><span class=\"line\">            BigDecimal decimalValue = lexer.decimalValue();</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">            intObj = Integer.valueOf(decimalValue.intValue());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (token == JSONToken.LBRACE) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 处理历史原因反序列化AtomicInteger成map */</span></span><br><span class=\"line\">                JSONObject jsonObject = <span class=\"keyword\">new</span> JSONObject(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                parser.parseObject(jsonObject);</span><br><span class=\"line\">                intObj = TypeUtils.castToInt(jsonObject);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 处理其他情况 */</span></span><br><span class=\"line\">                Object value = parser.parse();</span><br><span class=\"line\">                intObj = TypeUtils.castToInt(value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"parseInt error, field : \"</span> + fieldName, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz == AtomicInteger.class) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> AtomicInteger(intObj.intValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) intObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>针对特殊场景AutomicInteger类型，可以通过单元测试<code>com.alibaba.json.bvt.parser.AtomicIntegerComptableAndroidTest#test_for_compatible_zero</code>进行动手实践调试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test_for_compatible_zero</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    String text = <span class=\"string\">\"&#123;\\\"andIncrement\\\":-1,\\\"andDecrement\\\":0&#125;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    assertEquals(<span class=\"number\">0</span>, JSON.parseObject(text, AtomicInteger.class).intValue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续对<code>parseObject(jsonObject)</code>进行分析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">parseObject</span><span class=\"params\">(<span class=\"keyword\">final</span> Map object)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> parseObject(object, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LongCodec反序列化\"><a href=\"#LongCodec反序列化\" class=\"headerlink\" title=\"LongCodec反序列化\"></a>LongCodec反序列化</h3><p>因为和整数反序列化极其类似，请参考<code>IntegerCodec</code>不进行冗余分析。</p>\n<h3 id=\"FloatCodec反序列化\"><a href=\"#FloatCodec反序列化\" class=\"headerlink\" title=\"FloatCodec反序列化\"></a>FloatCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 整型字面量，预读下一个token */</span></span><br><span class=\"line\">        String val = lexer.numberString();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) Float.valueOf(Float.parseFloat(val));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_FLOAT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 浮点数字面量，预读下一个token */</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> val = lexer.floatValue();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) Float.valueOf(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 处理其他情况 */</span></span><br><span class=\"line\">    Object value = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) TypeUtils.castToFloat(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"BigDecimalCodec反序列化\"><a href=\"#BigDecimalCodec反序列化\" class=\"headerlink\" title=\"BigDecimalCodec反序列化\"></a>BigDecimalCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 整型字面量，预读下一个token */</span></span><br><span class=\"line\">        BigDecimal decimalValue = lexer.decimalValue();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) decimalValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_FLOAT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 浮点数字面量，预读下一个token */</span></span><br><span class=\"line\">        BigDecimal val = lexer.decimalValue();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object value = parser.parse();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value == <span class=\"keyword\">null</span> <span class=\"comment\">//</span></span><br><span class=\"line\">        ? <span class=\"keyword\">null</span> <span class=\"comment\">//</span></span><br><span class=\"line\">        : (T) TypeUtils.castToBigDecimal(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"StringCodec反序列化\"><a href=\"#StringCodec反序列化\" class=\"headerlink\" title=\"StringCodec反序列化\"></a>StringCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz == StringBuffer.class) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 将解析的字符序列转换成StringBuffer */</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 字符串字面量，预读下一个token */</span></span><br><span class=\"line\">            String val = lexer.stringVal();</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> StringBuffer(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Object value = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> StringBuffer(value.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clazz == StringBuilder.class) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 将解析的字符序列转换成StringBuilder */</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">            String val = lexer.stringVal();</span><br><span class=\"line\">            <span class=\"comment\">/** 字符串字面量，预读下一个token */</span></span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> StringBuilder(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Object value = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) <span class=\"keyword\">new</span> StringBuilder(value.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) deserialze(parser);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.getLexer();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 字符串字面量，预读下一个token */</span></span><br><span class=\"line\">        String val = lexer.stringVal();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 整型字面量，预读下一个token */</span></span><br><span class=\"line\">        String val = lexer.numberString();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object value = parser.parse();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) value.toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ObjectArrayCodec反序列化\"><a href=\"#ObjectArrayCodec反序列化\" class=\"headerlink\" title=\"ObjectArrayCodec反序列化\"></a>ObjectArrayCodec反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser, Type type, Object fieldName)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexer lexer = parser.lexer;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> token = lexer.token();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.NULL) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 解析到Null，预读下一个token */</span></span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_STRING || token == JSONToken.HEX) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] bytes = lexer.bytesValue();</span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (bytes.length == <span class=\"number\">0</span> &amp;&amp; type != <span class=\"keyword\">byte</span>[].class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) bytes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class componentClass;</span><br><span class=\"line\">    Type componentType;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> GenericArrayType) &#123;</span><br><span class=\"line\">        GenericArrayType clazz = (GenericArrayType) type;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取泛型数组真实参数类型 */</span></span><br><span class=\"line\">        componentType = clazz.getGenericComponentType();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (componentType <span class=\"keyword\">instanceof</span> TypeVariable) &#123;</span><br><span class=\"line\">            TypeVariable typeVar = (TypeVariable) componentType;</span><br><span class=\"line\">            Type objType = parser.getContext().type;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (objType <span class=\"keyword\">instanceof</span> ParameterizedType) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 获取泛型参数化类型，eg: Collection&lt;String&gt; */</span></span><br><span class=\"line\">                ParameterizedType objParamType = (ParameterizedType) objType;</span><br><span class=\"line\">                Type objRawType = objParamType.getRawType();</span><br><span class=\"line\">                Type actualType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (objRawType <span class=\"keyword\">instanceof</span> Class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 遍历Class包含的参数化类型，查找与泛型数组类型名字一致的作为真实类型 */</span></span><br><span class=\"line\">                    TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; objTypeParams.length; ++i) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (objTypeParams[i].getName().equals(typeVar.getName())) &#123;</span><br><span class=\"line\">                            actualType = objParamType.getActualTypeArguments()[i];</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (actualType <span class=\"keyword\">instanceof</span> Class) &#123;</span><br><span class=\"line\">                    componentClass = (Class) actualType;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    componentClass = Object.class;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 获取数组类型上界</span></span><br><span class=\"line\">                componentClass = TypeUtils.getClass(typeVar.getBounds()[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            componentClass = TypeUtils.getClass(componentType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 非泛型数组，普通对象数组 */</span></span><br><span class=\"line\">        Class clazz = (Class) type;</span><br><span class=\"line\">        componentType = componentClass = clazz.getComponentType();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    JSONArray array = <span class=\"keyword\">new</span> JSONArray();</span><br><span class=\"line\">    <span class=\"comment\">/** 根据token解析数组元素放到array中 */</span></span><br><span class=\"line\">    parser.parseArray(componentType, array, fieldName);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (T) toObjectArray(parser, componentClass, array);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JavaBeanDeserializer反序列化\"><a href=\"#JavaBeanDeserializer反序列化\" class=\"headerlink\" title=\"JavaBeanDeserializer反序列化\"></a>JavaBeanDeserializer反序列化</h3><p>为了节省冗余的分析，我们主要分析最复杂的默认<code>JavaBeanDeserializer</code>反序列化实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">JavaBeanDeserializer</span><span class=\"params\">(ParserConfig config, JavaBeanInfo beanInfo)</span></span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">/** java对象类名称 */</span></span><br><span class=\"line\">     <span class=\"keyword\">this</span>.clazz = beanInfo.clazz;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.beanInfo = beanInfo;</span><br><span class=\"line\"></span><br><span class=\"line\">     Map&lt;String, FieldDeserializer&gt; alterNameFieldDeserializers = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     sortedFieldDeserializers = <span class=\"keyword\">new</span> FieldDeserializer[beanInfo.sortedFields.length];</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      *  给已排序的字段创建反序列化实例，如果字段有别名，</span></span><br><span class=\"line\"><span class=\"comment\">      *  关联别名到反序列化的映射</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = beanInfo.sortedFields.length; i &lt; size; ++i) &#123;</span><br><span class=\"line\">         FieldInfo fieldInfo = beanInfo.sortedFields[i];</span><br><span class=\"line\">         FieldDeserializer fieldDeserializer = config.createFieldDeserializer(config, beanInfo, fieldInfo);</span><br><span class=\"line\"></span><br><span class=\"line\">         sortedFieldDeserializers[i] = fieldDeserializer;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">for</span> (String name : fieldInfo.alternateNames) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (alterNameFieldDeserializers == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                 alterNameFieldDeserializers = <span class=\"keyword\">new</span> HashMap&lt;String, FieldDeserializer&gt;();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             alterNameFieldDeserializers.put(name, fieldDeserializer);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.alterNameFieldDeserializers = alterNameFieldDeserializers;</span><br><span class=\"line\"></span><br><span class=\"line\">     fieldDeserializers = <span class=\"keyword\">new</span> FieldDeserializer[beanInfo.fields.length];</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = beanInfo.fields.length; i &lt; size; ++i) &#123;</span><br><span class=\"line\">         FieldInfo fieldInfo = beanInfo.fields[i];</span><br><span class=\"line\">         <span class=\"comment\">/** 采用二分法在sortedFieldDeserializers中查找已创建的反序列化类型 */</span></span><br><span class=\"line\">         FieldDeserializer fieldDeserializer = getFieldDeserializer(fieldInfo.name);</span><br><span class=\"line\">         fieldDeserializers[i] = fieldDeserializer;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数就是简单构造类字段对应的反序列化\b实例而已，接下来看下关键实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">deserialze</span><span class=\"params\">(DefaultJSONParser parser,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           Type type,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           Object fieldName,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           Object object,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">int</span> features,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                           <span class=\"keyword\">int</span>[] setFlags)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type == JSON.class || type == JSONObject.class) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 根据当前token类型判断解析对象 */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) parser.parse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> JSONLexerBase lexer = (JSONLexerBase) parser.lexer;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ParserConfig config = parser.getConfig();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> token = lexer.token();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (token == JSONToken.NULL) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 解析null，预读下一个token并返回 */</span></span><br><span class=\"line\">        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ParseContext context = parser.getContext();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object != <span class=\"keyword\">null</span> &amp;&amp; context != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        context = context.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ParseContext childContext = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Object&gt; fieldValues = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token == JSONToken.RBRACE) &#123;</span><br><span class=\"line\">            lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">            <span class=\"comment\">/** 遇到&#125;认为遇到对象结束，尝试创建实例对象 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                object = createInstance(parser, type);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token == JSONToken.LBRACKET) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mask = Feature.SupportArrayToBean.mask;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> isSupportArrayToBean = (beanInfo.parserFeatures &amp; mask) != <span class=\"number\">0</span></span><br><span class=\"line\">                                           || lexer.isEnabled(Feature.SupportArrayToBean)</span><br><span class=\"line\">                                           || (features &amp; mask) != <span class=\"number\">0</span></span><br><span class=\"line\">                                           ;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isSupportArrayToBean) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 将数组值反序列化为对象，根据sortedFieldDeserializers依次写字段值 */</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> deserialzeArrayMapping(parser, type, fieldName, object);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (token != JSONToken.LBRACE &amp;&amp; token != JSONToken.COMMA) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.isBlankInput()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">                String strVal = lexer.stringVal();</span><br><span class=\"line\">                <span class=\"comment\">/** 读到空值字符串，返回null */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (strVal.length() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    lexer.nextToken();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (beanInfo.jsonType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 探测是否是枚举类型 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Class&lt;?&gt; seeAlsoClass : beanInfo.jsonType.seeAlso()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (Enum.class.isAssignableFrom(seeAlsoClass)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                                Enum&lt;?&gt; e = Enum.valueOf((Class&lt;Enum&gt;) seeAlsoClass, strVal);</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> (T) e;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// skip</span></span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_ISO8601_DATE) &#123;</span><br><span class=\"line\">                Calendar calendar = lexer.getCalendar();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (token == JSONToken.LBRACKET &amp;&amp; lexer.getCurrent() == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 包含零元素的数组 */</span></span><br><span class=\"line\">                lexer.next();</span><br><span class=\"line\">                lexer.nextToken();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            StringBuffer buf = (<span class=\"keyword\">new</span> StringBuffer()) <span class=\"comment\">//</span></span><br><span class=\"line\">                                                    .append(<span class=\"string\">\"syntax error, expect &#123;, actual \"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">                                                    .append(lexer.tokenName()) <span class=\"comment\">//</span></span><br><span class=\"line\">                                                    .append(<span class=\"string\">\", pos \"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">                                                    .append(lexer.pos());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldName <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                buf <span class=\"comment\">//</span></span><br><span class=\"line\">                    .append(<span class=\"string\">\", fieldName \"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">                    .append(fieldName);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            buf.append(<span class=\"string\">\", fastjson-version \"</span>).append(JSON.VERSION);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(buf.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123;</span><br><span class=\"line\">            parser.resolveStatus = DefaultJSONParser.NONE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String typeKey = beanInfo.typeKey;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> fieldIndex = <span class=\"number\">0</span>;; fieldIndex++) &#123;</span><br><span class=\"line\">            String key = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            FieldDeserializer fieldDeser = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            FieldInfo fieldInfo = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            Class&lt;?&gt; fieldClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            JSONField feildAnnotation = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"comment\">/** 检查是否所有字段都已经处理 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldIndex &lt; sortedFieldDeserializers.length) &#123;</span><br><span class=\"line\">                fieldDeser = sortedFieldDeserializers[fieldIndex];</span><br><span class=\"line\">                fieldInfo = fieldDeser.fieldInfo;</span><br><span class=\"line\">                fieldClass = fieldInfo.fieldClass;</span><br><span class=\"line\">                feildAnnotation = fieldInfo.getAnnotation();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> matchField = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> valueParsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Object fieldValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldDeser != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">char</span>[] name_chars = fieldInfo.name_chars;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">int</span>.class || fieldClass == Integer.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描整数值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldInt(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">long</span>.class || fieldClass == Long.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描长整型值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldLong(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == String.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描字符串值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldString(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == java.util.Date.class &amp;&amp; fieldInfo.format == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描日期值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldDate(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == BigDecimal.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描高精度值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldDecimal(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == BigInteger.class) &#123;</span><br><span class=\"line\">                    fieldValue = lexer.scanFieldBigInteger(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">boolean</span>.class || fieldClass == Boolean.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描boolean值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldBoolean(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">float</span>.class || fieldClass == Float.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描浮点值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldFloat(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">double</span>.class || fieldClass == Double.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描double值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldDouble(name_chars);</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass.isEnum()</span><br><span class=\"line\">                        &amp;&amp; parser.getConfig().getDeserializer(fieldClass) <span class=\"keyword\">instanceof</span> EnumDeserializer</span><br><span class=\"line\">                        &amp;&amp; (feildAnnotation == <span class=\"keyword\">null</span> || feildAnnotation.deserializeUsing() == Void.class)</span><br><span class=\"line\">                        ) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fieldDeser <span class=\"keyword\">instanceof</span> DefaultFieldDeserializer) &#123;</span><br><span class=\"line\">                        ObjectDeserializer fieldValueDeserilizer = ((DefaultFieldDeserializer) fieldDeser).fieldValueDeserilizer;</span><br><span class=\"line\">                        fieldValue = <span class=\"keyword\">this</span>.scanEnum(lexer, name_chars, fieldValueDeserilizer);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                            valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">int</span>[].class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描整型数组值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldIntArray(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">float</span>[].class) &#123;</span><br><span class=\"line\">                    fieldValue = lexer.scanFieldFloatArray(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == <span class=\"keyword\">float</span>[][].class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描浮点数组值 */</span></span><br><span class=\"line\">                    fieldValue = lexer.scanFieldFloatArray2(name_chars);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        valueParsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.NOT_MATCH_NAME) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.matchField(name_chars)) &#123;</span><br><span class=\"line\">                    matchField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 如果当前字符串的json不匹配当前字段名称 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!matchField) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 将当前的字段名称加入符号表 */</span></span><br><span class=\"line\">                key = lexer.scanSymbol(parser.symbolTable);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 当前是无效的字段标识符，比如是,等符号 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (key == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    token = lexer.token();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (token == JSONToken.RBRACE) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 结束花括号, 预读下一个token */</span></span><br><span class=\"line\">                        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (token == JSONToken.COMMA) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (lexer.isEnabled(Feature.AllowArbitraryCommas)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"string\">\"$ref\"</span> == key &amp;&amp; context != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);</span><br><span class=\"line\">                    token = lexer.token();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (token == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">                        String ref = lexer.stringVal();</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (<span class=\"string\">\"@\"</span>.equals(ref)) &#123;</span><br><span class=\"line\">                            object = context.object;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"..\"</span>.equals(ref)) &#123;</span><br><span class=\"line\">                            ParseContext parentContext = context.parent;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (parentContext.object != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                object = parentContext.object;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                parser.addResolveTask(<span class=\"keyword\">new</span> ResolveTask(parentContext, ref));</span><br><span class=\"line\">                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"$\"</span>.equals(ref)) &#123;</span><br><span class=\"line\">                            ParseContext rootContext = context;</span><br><span class=\"line\">                            <span class=\"keyword\">while</span> (rootContext.parent != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                rootContext = rootContext.parent;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (rootContext.object != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                object = rootContext.object;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                parser.addResolveTask(<span class=\"keyword\">new</span> ResolveTask(rootContext, ref));</span><br><span class=\"line\">                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            Object refObj = parser.resolveReference(ref);</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (refObj != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                object = refObj;</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                parser.addResolveTask(<span class=\"keyword\">new</span> ResolveTask(context, ref));</span><br><span class=\"line\">                                parser.resolveStatus = DefaultJSONParser.NeedToResolve;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"illegal ref, \"</span> + JSONToken.name(token));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    lexer.nextToken(JSONToken.RBRACE);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.token() != JSONToken.RBRACE) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"illegal ref\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">                    parser.setContext(context, object, fieldName);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (T) object;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((typeKey != <span class=\"keyword\">null</span> &amp;&amp; typeKey.equals(key))</span><br><span class=\"line\">                        || JSON.DEFAULT_TYPE_KEY == key) &#123;</span><br><span class=\"line\">                    lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class=\"line\">                        String typeName = lexer.stringVal();</span><br><span class=\"line\">                        lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/** 忽略字符串中包含<span class=\"doctag\">@type</span>解析 */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (typeName.equals(beanInfo.typeName)|| parser.isEnabled(Feature.IgnoreAutoType)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (lexer.token() == JSONToken.RBRACE) &#123;</span><br><span class=\"line\">                                lexer.nextToken();</span><br><span class=\"line\">                                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        </span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/** 根据枚举seeAlso查找反序列化实例 */</span></span><br><span class=\"line\">                        ObjectDeserializer deserializer = getSeeAlso(config, <span class=\"keyword\">this</span>.beanInfo, typeName);</span><br><span class=\"line\">                        Class&lt;?&gt; userType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (deserializer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 无法匹配，查找类对应的泛型或者参数化类型关联的反序列化实例 */</span></span><br><span class=\"line\">                            Class&lt;?&gt; expectClass = TypeUtils.getClass(type);</span><br><span class=\"line\">                            userType = config.checkAutoType(typeName, expectClass, lexer.getFeatures());</span><br><span class=\"line\">                            deserializer = parser.getConfig().getDeserializer(userType);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        Object typedObject = deserializer.deserialze(parser, userType, fieldName);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (deserializer <span class=\"keyword\">instanceof</span> JavaBeanDeserializer) &#123;</span><br><span class=\"line\">                            JavaBeanDeserializer javaBeanDeserializer = (JavaBeanDeserializer) deserializer;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (typeKey != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                FieldDeserializer typeKeyFieldDeser = javaBeanDeserializer.getFieldDeserializer(typeKey);</span><br><span class=\"line\">                                typeKeyFieldDeser.setValue(typedObject, typeName);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> (T) typedObject;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"syntax error\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 第一次创建并初始化对象实例 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span> &amp;&amp; fieldValues == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                object = createInstance(parser, type);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    fieldValues = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;(<span class=\"keyword\">this</span>.fieldDeserializers.length);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                childContext = parser.setContext(context, object, fieldName);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setFlags == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    setFlags = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[(<span class=\"keyword\">this</span>.fieldDeserializers.length / <span class=\"number\">32</span>) + <span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (matchField) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!valueParsed) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** json串当前满足字段名称，并且没有解析过值 ，</span></span><br><span class=\"line\"><span class=\"comment\">                     *  直接使用当前字段关联的反序列化实例解析</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    fieldDeser.parseField(parser, object, type, fieldValues);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 值已经解析过了，存储到map中 */</span></span><br><span class=\"line\">                        fieldValues.put(fieldInfo.name, fieldValue);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 字段值是null，排除int,long,float,double,boolean */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fieldClass != <span class=\"keyword\">int</span>.class</span><br><span class=\"line\">                                &amp;&amp; fieldClass != <span class=\"keyword\">long</span>.class</span><br><span class=\"line\">                                &amp;&amp; fieldClass != <span class=\"keyword\">float</span>.class</span><br><span class=\"line\">                                &amp;&amp; fieldClass != <span class=\"keyword\">double</span>.class</span><br><span class=\"line\">                                &amp;&amp; fieldClass != <span class=\"keyword\">boolean</span>.class</span><br><span class=\"line\">                                ) &#123;</span><br><span class=\"line\">                            fieldDeser.setValue(object, fieldValue);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        fieldDeser.setValue(object, fieldValue);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (setFlags != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> flagIndex = fieldIndex / <span class=\"number\">32</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> bitIndex = fieldIndex % <span class=\"number\">32</span>;</span><br><span class=\"line\">                        setFlags[flagIndex] |= (<span class=\"number\">1</span> &gt;&gt; bitIndex);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.matchStat == JSONLexer.END) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 字段名称当前和json串不匹配，通常顺序或者字段增加或者缺少，</span></span><br><span class=\"line\"><span class=\"comment\">                 *  根据key查找反序列化实例解析</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">boolean</span> match = parseField(parser, key, object, type, fieldValues, setFlags);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!match) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 遇到封闭花括号，与读下一个token，跳出循环 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (lexer.token() == JSONToken.RBRACE) &#123;</span><br><span class=\"line\">                        lexer.nextToken();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lexer.token() == JSONToken.COLON) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"syntax error, unexpect token ':'\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.token() == JSONToken.COMMA) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.token() == JSONToken.RBRACE) &#123;</span><br><span class=\"line\">                lexer.nextToken(JSONToken.COMMA);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lexer.token() == JSONToken.IDENTIFIER || lexer.token() == JSONToken.ERROR) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"syntax error, unexpect token \"</span> + JSONToken.name(lexer.token()));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldValues == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 第一次创建并初始化对象实例 */</span></span><br><span class=\"line\">                object = createInstance(parser, type);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (childContext == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    childContext = parser.setContext(context, object, fieldName);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (T) object;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 提取构造函数参数名称 */</span></span><br><span class=\"line\">            String[] paramNames = beanInfo.creatorConstructorParameters;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Object[] params;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (paramNames != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                params = <span class=\"keyword\">new</span> Object[paramNames.length];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; paramNames.length; i++) &#123;</span><br><span class=\"line\">                    String paramName = paramNames[i];</span><br><span class=\"line\"></span><br><span class=\"line\">                    Object param = fieldValues.remove(paramName);</span><br><span class=\"line\">                    <span class=\"comment\">/** 解析过的字段不包含当前参数名字 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (param == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        Type fieldType = beanInfo.creatorConstructorParameterTypes[i];</span><br><span class=\"line\">                        FieldInfo fieldInfo = beanInfo.fields[i];</span><br><span class=\"line\">                        <span class=\"comment\">/** 探测并设置类型默认值 */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">byte</span>.class) &#123;</span><br><span class=\"line\">                            param = (<span class=\"keyword\">byte</span>) <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">short</span>.class) &#123;</span><br><span class=\"line\">                            param = (<span class=\"keyword\">short</span>) <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">int</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">long</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0L</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">float</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0F</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">double</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0</span>D;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">boolean</span>.class) &#123;</span><br><span class=\"line\">                            param = Boolean.FALSE;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == String.class</span><br><span class=\"line\">                                &amp;&amp; (fieldInfo.parserFeatures &amp; Feature.InitStringFieldAsEmpty.mask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            param = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    params[i] = param;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 根据字段探测并初始化构造函数参数默认值 */</span></span><br><span class=\"line\">                FieldInfo[] fieldInfoList = beanInfo.fields;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> size = fieldInfoList.length;</span><br><span class=\"line\">                params = <span class=\"keyword\">new</span> Object[size];</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">                    FieldInfo fieldInfo = fieldInfoList[i];</span><br><span class=\"line\">                    Object param = fieldValues.get(fieldInfo.name);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (param == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                        Type fieldType = fieldInfo.fieldType;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">byte</span>.class) &#123;</span><br><span class=\"line\">                            param = (<span class=\"keyword\">byte</span>) <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">short</span>.class) &#123;</span><br><span class=\"line\">                            param = (<span class=\"keyword\">short</span>) <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">int</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">long</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0L</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">float</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0F</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">double</span>.class) &#123;</span><br><span class=\"line\">                            param = <span class=\"number\">0</span>D;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == <span class=\"keyword\">boolean</span>.class) &#123;</span><br><span class=\"line\">                            param = Boolean.FALSE;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldType == String.class</span><br><span class=\"line\">                                &amp;&amp; (fieldInfo.parserFeatures &amp; Feature.InitStringFieldAsEmpty.mask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            param = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    params[i] = param;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (beanInfo.creatorConstructor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    object = beanInfo.creatorConstructor.newInstance(params);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"create instance error, \"</span> + paramNames + <span class=\"string\">\", \"</span></span><br><span class=\"line\">                                            + beanInfo.creatorConstructor.toGenericString(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (paramNames != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 剩余字段查找反序列化器set值 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Map.Entry&lt;String, Object&gt; entry : fieldValues.entrySet()) &#123;</span><br><span class=\"line\">                        FieldDeserializer fieldDeserializer = getFieldDeserializer(entry.getKey());</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fieldDeserializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            fieldDeserializer.setValue(object, entry.getValue());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (beanInfo.factoryMethod != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    object = beanInfo.factoryMethod.invoke(<span class=\"keyword\">null</span>, params);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"create factory method error, \"</span> + beanInfo.factoryMethod.toString(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            childContext.object = object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 检查是否扩展后置方法buildMethod，如果有进行调用 */</span></span><br><span class=\"line\">        Method buildMethod = beanInfo.buildMethod;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buildMethod == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (T) object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        Object builtObj;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            builtObj = buildMethod.invoke(object);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"build object error\"</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (T) builtObj;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childContext != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            childContext.object = object;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        parser.setContext(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码实在又臭又长，实际做的事情如下：</p>\n<ol>\n<li>根据类所有的字段，字段类型进行json串进行匹配，首先检查json串的值是否和当前字段名称相等，如果相等认为匹配成功，会创建实例对象并且把解析字段值set进去。</li>\n<li>如果当前json串顺序和java对象字段不一致怎么办，这个时候我字段又全部遍历完了，fastjson会自动把当前解析的字段名称加入符号表中，然后查找字段\b名称对应的反序列化实例进行set值操作</li>\n<li>当前实现提供了解析对象后buildMethod扩展点，如果提供了会进行回调然后返回</li>\n</ol>\n<p>值得一提的是构造函数处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">createInstance</span><span class=\"params\">(DefaultJSONParser parser, Type type)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> Class) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz.isInterface()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 针对反序列化时接口类型的，通过jdk冬天代理拦截put和get等操作，</span></span><br><span class=\"line\"><span class=\"comment\">             *  进行set或者put值的操作值会存储在jsonobject内部的map结构</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            Class&lt;?&gt; clazz = (Class&lt;?&gt;) type;</span><br><span class=\"line\">            ClassLoader loader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> JSONObject obj = <span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">            Object proxy = Proxy.newProxyInstance(loader, <span class=\"keyword\">new</span> Class&lt;?&gt;[] &#123; clazz &#125;, obj);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> proxy;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 忽略没有默认构造函数和没有创建对象的工厂方法 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanInfo.defaultConstructor == <span class=\"keyword\">null</span> &amp;&amp; beanInfo.factoryMethod == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 忽略同时存在显示构造函数和创建对象的工厂方法的场景 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanInfo.factoryMethod != <span class=\"keyword\">null</span> &amp;&amp; beanInfo.defaultConstructorParameterSize &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object object;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Constructor&lt;?&gt; constructor = beanInfo.defaultConstructor;</span><br><span class=\"line\">        <span class=\"comment\">/** 存在默认无参构造函数 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (beanInfo.defaultConstructorParameterSize == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (constructor != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                object = constructor.newInstance();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 否则使用工厂方法生成对象 */</span></span><br><span class=\"line\">                object = beanInfo.factoryMethod.invoke(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ParseContext context = parser.getContext();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context == <span class=\"keyword\">null</span> || context.object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"can't create non-static inner class instance.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> String typeName;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type <span class=\"keyword\">instanceof</span> Class) &#123;</span><br><span class=\"line\">                typeName = ((Class&lt;?&gt;) type).getName();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"can't create non-static inner class instance.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> lastIndex = typeName.lastIndexOf(<span class=\"string\">'$'</span>);</span><br><span class=\"line\">            String parentClassName = typeName.substring(<span class=\"number\">0</span>, lastIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">            Object ctxObj = context.object;</span><br><span class=\"line\">            String parentName = ctxObj.getClass().getName();</span><br><span class=\"line\"></span><br><span class=\"line\">            Object param = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!parentName.equals(parentClassName)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 处理继承过来的类 */</span></span><br><span class=\"line\">                ParseContext parentContext = context.parent;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (parentContext != <span class=\"keyword\">null</span></span><br><span class=\"line\">                        &amp;&amp; parentContext.object != <span class=\"keyword\">null</span></span><br><span class=\"line\">                        &amp;&amp; (<span class=\"string\">\"java.util.ArrayList\"</span>.equals(parentName)</span><br><span class=\"line\">                        || <span class=\"string\">\"java.util.List\"</span>.equals(parentName)</span><br><span class=\"line\">                        || <span class=\"string\">\"java.util.Collection\"</span>.equals(parentName)</span><br><span class=\"line\">                        || <span class=\"string\">\"java.util.Map\"</span>.equals(parentName)</span><br><span class=\"line\">                        || <span class=\"string\">\"java.util.HashMap\"</span>.equals(parentName))) &#123;</span><br><span class=\"line\">                    parentName = parentContext.object.getClass().getName();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parentName.equals(parentClassName)) &#123;</span><br><span class=\"line\">                        param = parentContext.object;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 处理非静态内部类场景，</span></span><br><span class=\"line\"><span class=\"comment\">                 *  编译器会自动修改内部类构造函数，添加外层类实例对象作为参数，</span></span><br><span class=\"line\"><span class=\"comment\">                 *  ctxObj就是外层实例对象</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                param = ctxObj;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (param == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"can't create non-static inner class instance.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            object = constructor.newInstance(param);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (JSONException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"create instance error, class \"</span> + clazz.getName(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 开启InitStringFieldAsEmpty特性，会把字符串字段初始化为空串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parser != <span class=\"keyword\">null</span></span><br><span class=\"line\">            &amp;&amp; parser.lexer.isEnabled(Feature.InitStringFieldAsEmpty)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (FieldInfo fieldInfo : beanInfo.fields) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldInfo.fieldClass == String.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    fieldInfo.set(object, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"create instance error, class \"</span> + clazz.getName(), e);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译器会为非静态内部类构造函数添加外层的实例对象作为第一个参数，所以在生成实例化对象的时候会从上下文中获取外层对象进行反射创建对象<code>constructor.newInstance(param)</code>。</p>\n<p>为了更容易理解这段逻辑，提供一下单元测试可以调试：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.alibaba.json.bvt.parser.deser.InnerClassDeser2#test_for_inner_class</span><br><span class=\"line\"></span><br><span class=\"line\">com.alibaba.json.bvt.parser.deser.InnerClassDeser3#test_for_inner_class</span><br><span class=\"line\"></span><br><span class=\"line\">com.alibaba.json.bvt.parser.deser.InnerClassDeser4#test_for_inner_class</span><br></pre></td></tr></table></figure>\n"},{"title":"词法和语法解析（七）","subtitle":"词法分析是反序列化的重要基础，在其他框架druid、parsii等框架都用到了词法分析的技术，个人认为在讲反序列化之前讲词法分析更重要。","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:08:14.000Z","_content":"\n## 概要\n\n词法分析是反序列化的重要基础，在其他框架`druid`、`parsii`等框架都用到了词法分析的技术，个人认为在讲反序列化之前讲词法分析更重要。\n\n写出优秀框架之前，先理解大量优秀框架的实现对未来自己写框架非常有帮助！！！\n\n好了，废话不多说，来看看`fastjson`中定义的token吧。\n\n### JSONToken成员\n\n`com.alibaba.fastjson.parser.JSONToken`定义了fastjson需要的token标识符：\n\n```java\n    /** 1 关联到 error */\n    public final static int ERROR                = 1;\n    /** 2 关联到 int */\n    public final static int LITERAL_INT          = 2;\n    /** 3 关联到 float */\n    public final static int LITERAL_FLOAT        = 3;\n    /** 4 关联到 string */\n    public final static int LITERAL_STRING       = 4;\n    /** 5 关联到 iso8601 */\n    public final static int LITERAL_ISO8601_DATE = 5;\n    /** 6 关联到 true */\n    public final static int TRUE                 = 6;\n    /** 7 关联到 false */\n    public final static int FALSE                = 7;\n    /** 8 关联到 null */\n    public final static int NULL                 = 8;\n    /** 9 关联到 new */\n    public final static int NEW                  = 9;\n    /** 10 关联到 ( */\n    public final static int LPAREN               = 10;\n    /** 11 关联到 ) */\n    public final static int RPAREN               = 11;\n    /** 12 关联到 { */\n    public final static int LBRACE               = 12;\n    /** 13 关联到 } */\n    public final static int RBRACE               = 13;\n    /** 14 关联到 [ */\n    public final static int LBRACKET             = 14;\n    /** 15 关联到 ] */\n    public final static int RBRACKET             = 15;\n    /** 16 关联到 , */\n    public final static int COMMA                = 16;\n    /** 17 关联到 : */\n    public final static int COLON                = 17;\n    /** 18 关联到 ident */\n    public final static int IDENTIFIER           = 18;\n    /** 19 关联到 fieldName */\n    public final static int FIELD_NAME           = 19;\n    /** 20 关联到 EOF */\n    public final static int EOF                  = 20;\n    /** 21 关联到 Set */\n    public final static int SET                  = 21;\n    /** 22 关联到 TreeSet */\n    public final static int TREE_SET             = 22;\n    /** 23 关联到 undefined */\n    public final static int UNDEFINED            = 23; // undefined\n    /** 24 关联到 ; */\n    public final static int SEMI                 = 24;\n    /** 25 关联到 . */\n    public final static int DOT                  = 25;\n    /** 26 关联到 hex */\n    public final static int HEX                  = 26;\n\n    public static String name(int value) {\n        switch (value) {\n            case ERROR:\n                return \"error\";\n            case LITERAL_INT:\n                return \"int\";\n            case LITERAL_FLOAT:\n                return \"float\";\n            case LITERAL_STRING:\n                return \"string\";\n            case LITERAL_ISO8601_DATE:\n                return \"iso8601\";\n            case TRUE:\n                return \"true\";\n            case FALSE:\n                return \"false\";\n            case NULL:\n                return \"null\";\n            case NEW:\n                return \"new\";\n            case LPAREN:\n                return \"(\";\n            case RPAREN:\n                return \")\";\n            case LBRACE:\n                return \"{\";\n            case RBRACE:\n                return \"}\";\n            case LBRACKET:\n                return \"[\";\n            case RBRACKET:\n                return \"]\";\n            case COMMA:\n                return \",\";\n            case COLON:\n                return \":\";\n            case SEMI:\n                return \";\";\n            case DOT:\n                return \".\";\n            case IDENTIFIER:\n                return \"ident\";\n            case FIELD_NAME:\n                return \"fieldName\";\n            case EOF:\n                return \"EOF\";\n            case SET:\n                return \"Set\";\n            case TREE_SET:\n                return \"TreeSet\";\n            case UNDEFINED:\n                return \"undefined\";\n            case HEX:\n                return \"hex\";\n            default:\n                return \"Unknown\";\n        }\n    }\n```\n\n接下来，我们继续分析如何实现具体token解析的。\n","source":"_posts/Fastjson源码解析-词法和语法解析(一)-token定义解析实现解析.md","raw":"---\ntitle: 词法和语法解析（七）\nsubtitle:  词法分析是反序列化的重要基础，在其他框架druid、parsii等框架都用到了词法分析的技术，个人认为在讲反序列化之前讲词法分析更重要。\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n- Fastjson源码解析\ncategories:\n- Fastjson源码解析\ndate: 2018-09-30 23:08:14\n---\n\n## 概要\n\n词法分析是反序列化的重要基础，在其他框架`druid`、`parsii`等框架都用到了词法分析的技术，个人认为在讲反序列化之前讲词法分析更重要。\n\n写出优秀框架之前，先理解大量优秀框架的实现对未来自己写框架非常有帮助！！！\n\n好了，废话不多说，来看看`fastjson`中定义的token吧。\n\n### JSONToken成员\n\n`com.alibaba.fastjson.parser.JSONToken`定义了fastjson需要的token标识符：\n\n```java\n    /** 1 关联到 error */\n    public final static int ERROR                = 1;\n    /** 2 关联到 int */\n    public final static int LITERAL_INT          = 2;\n    /** 3 关联到 float */\n    public final static int LITERAL_FLOAT        = 3;\n    /** 4 关联到 string */\n    public final static int LITERAL_STRING       = 4;\n    /** 5 关联到 iso8601 */\n    public final static int LITERAL_ISO8601_DATE = 5;\n    /** 6 关联到 true */\n    public final static int TRUE                 = 6;\n    /** 7 关联到 false */\n    public final static int FALSE                = 7;\n    /** 8 关联到 null */\n    public final static int NULL                 = 8;\n    /** 9 关联到 new */\n    public final static int NEW                  = 9;\n    /** 10 关联到 ( */\n    public final static int LPAREN               = 10;\n    /** 11 关联到 ) */\n    public final static int RPAREN               = 11;\n    /** 12 关联到 { */\n    public final static int LBRACE               = 12;\n    /** 13 关联到 } */\n    public final static int RBRACE               = 13;\n    /** 14 关联到 [ */\n    public final static int LBRACKET             = 14;\n    /** 15 关联到 ] */\n    public final static int RBRACKET             = 15;\n    /** 16 关联到 , */\n    public final static int COMMA                = 16;\n    /** 17 关联到 : */\n    public final static int COLON                = 17;\n    /** 18 关联到 ident */\n    public final static int IDENTIFIER           = 18;\n    /** 19 关联到 fieldName */\n    public final static int FIELD_NAME           = 19;\n    /** 20 关联到 EOF */\n    public final static int EOF                  = 20;\n    /** 21 关联到 Set */\n    public final static int SET                  = 21;\n    /** 22 关联到 TreeSet */\n    public final static int TREE_SET             = 22;\n    /** 23 关联到 undefined */\n    public final static int UNDEFINED            = 23; // undefined\n    /** 24 关联到 ; */\n    public final static int SEMI                 = 24;\n    /** 25 关联到 . */\n    public final static int DOT                  = 25;\n    /** 26 关联到 hex */\n    public final static int HEX                  = 26;\n\n    public static String name(int value) {\n        switch (value) {\n            case ERROR:\n                return \"error\";\n            case LITERAL_INT:\n                return \"int\";\n            case LITERAL_FLOAT:\n                return \"float\";\n            case LITERAL_STRING:\n                return \"string\";\n            case LITERAL_ISO8601_DATE:\n                return \"iso8601\";\n            case TRUE:\n                return \"true\";\n            case FALSE:\n                return \"false\";\n            case NULL:\n                return \"null\";\n            case NEW:\n                return \"new\";\n            case LPAREN:\n                return \"(\";\n            case RPAREN:\n                return \")\";\n            case LBRACE:\n                return \"{\";\n            case RBRACE:\n                return \"}\";\n            case LBRACKET:\n                return \"[\";\n            case RBRACKET:\n                return \"]\";\n            case COMMA:\n                return \",\";\n            case COLON:\n                return \":\";\n            case SEMI:\n                return \";\";\n            case DOT:\n                return \".\";\n            case IDENTIFIER:\n                return \"ident\";\n            case FIELD_NAME:\n                return \"fieldName\";\n            case EOF:\n                return \"EOF\";\n            case SET:\n                return \"Set\";\n            case TREE_SET:\n                return \"TreeSet\";\n            case UNDEFINED:\n                return \"undefined\";\n            case HEX:\n                return \"hex\";\n            default:\n                return \"Unknown\";\n        }\n    }\n```\n\n接下来，我们继续分析如何实现具体token解析的。\n","slug":"Fastjson源码解析-词法和语法解析(一)-token定义解析实现解析","published":1,"updated":"2018-10-12T02:16:45.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4et6000fxat85etdt877","content":"<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>词法分析是反序列化的重要基础，在其他框架<code>druid</code>、<code>parsii</code>等框架都用到了词法分析的技术，个人认为在讲反序列化之前讲词法分析更重要。</p>\n<p>写出优秀框架之前，先理解大量优秀框架的实现对未来自己写框架非常有帮助！！！</p>\n<p>好了，废话不多说，来看看<code>fastjson</code>中定义的token吧。</p>\n<h3 id=\"JSONToken成员\"><a href=\"#JSONToken成员\" class=\"headerlink\" title=\"JSONToken成员\"></a>JSONToken成员</h3><p><code>com.alibaba.fastjson.parser.JSONToken</code>定义了fastjson需要的token标识符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 1 关联到 error */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ERROR                = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 2 关联到 int */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LITERAL_INT          = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 3 关联到 float */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LITERAL_FLOAT        = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 4 关联到 string */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LITERAL_STRING       = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 5 关联到 iso8601 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LITERAL_ISO8601_DATE = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 6 关联到 true */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> TRUE                 = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 7 关联到 false */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FALSE                = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 8 关联到 null */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> NULL                 = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 9 关联到 new */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> NEW                  = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 10 关联到 ( */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LPAREN               = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 11 关联到 ) */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> RPAREN               = <span class=\"number\">11</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 12 关联到 &#123; */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LBRACE               = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 13 关联到 &#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> RBRACE               = <span class=\"number\">13</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 14 关联到 [ */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LBRACKET             = <span class=\"number\">14</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 15 关联到 ] */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> RBRACKET             = <span class=\"number\">15</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 16 关联到 , */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> COMMA                = <span class=\"number\">16</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 17 关联到 : */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> COLON                = <span class=\"number\">17</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 18 关联到 ident */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> IDENTIFIER           = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 19 关联到 fieldName */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FIELD_NAME           = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 20 关联到 EOF */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> EOF                  = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 21 关联到 Set */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SET                  = <span class=\"number\">21</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 22 关联到 TreeSet */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> TREE_SET             = <span class=\"number\">22</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 23 关联到 undefined */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> UNDEFINED            = <span class=\"number\">23</span>; <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">/** 24 关联到 ; */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SEMI                 = <span class=\"number\">24</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 25 关联到 . */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DOT                  = <span class=\"number\">25</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 26 关联到 hex */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> HEX                  = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">name</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> ERROR:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LITERAL_INT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"int\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LITERAL_FLOAT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"float\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LITERAL_STRING:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LITERAL_ISO8601_DATE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"iso8601\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TRUE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"true\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> FALSE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"false\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> NULL:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> NEW:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"new\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LPAREN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RPAREN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LBRACE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RBRACE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LBRACKET:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"[\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RBRACKET:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COMMA:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COLON:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\":\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SEMI:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\";\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> DOT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\".\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> IDENTIFIER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"ident\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> FIELD_NAME:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"fieldName\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EOF:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"EOF\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SET:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Set\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TREE_SET:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"TreeSet\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> UNDEFINED:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"undefined\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HEX:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"hex\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Unknown\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们继续分析如何实现具体token解析的。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>词法分析是反序列化的重要基础，在其他框架<code>druid</code>、<code>parsii</code>等框架都用到了词法分析的技术，个人认为在讲反序列化之前讲词法分析更重要。</p>\n<p>写出优秀框架之前，先理解大量优秀框架的实现对未来自己写框架非常有帮助！！！</p>\n<p>好了，废话不多说，来看看<code>fastjson</code>中定义的token吧。</p>\n<h3 id=\"JSONToken成员\"><a href=\"#JSONToken成员\" class=\"headerlink\" title=\"JSONToken成员\"></a>JSONToken成员</h3><p><code>com.alibaba.fastjson.parser.JSONToken</code>定义了fastjson需要的token标识符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 1 关联到 error */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ERROR                = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 2 关联到 int */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LITERAL_INT          = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 3 关联到 float */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LITERAL_FLOAT        = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 4 关联到 string */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LITERAL_STRING       = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 5 关联到 iso8601 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LITERAL_ISO8601_DATE = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 6 关联到 true */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> TRUE                 = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 7 关联到 false */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FALSE                = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 8 关联到 null */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> NULL                 = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 9 关联到 new */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> NEW                  = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 10 关联到 ( */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LPAREN               = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 11 关联到 ) */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> RPAREN               = <span class=\"number\">11</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 12 关联到 &#123; */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LBRACE               = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 13 关联到 &#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> RBRACE               = <span class=\"number\">13</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 14 关联到 [ */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> LBRACKET             = <span class=\"number\">14</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 15 关联到 ] */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> RBRACKET             = <span class=\"number\">15</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 16 关联到 , */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> COMMA                = <span class=\"number\">16</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 17 关联到 : */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> COLON                = <span class=\"number\">17</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 18 关联到 ident */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> IDENTIFIER           = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 19 关联到 fieldName */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FIELD_NAME           = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 20 关联到 EOF */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> EOF                  = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 21 关联到 Set */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SET                  = <span class=\"number\">21</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 22 关联到 TreeSet */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> TREE_SET             = <span class=\"number\">22</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 23 关联到 undefined */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> UNDEFINED            = <span class=\"number\">23</span>; <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">/** 24 关联到 ; */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> SEMI                 = <span class=\"number\">24</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 25 关联到 . */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> DOT                  = <span class=\"number\">25</span>;</span><br><span class=\"line\"><span class=\"comment\">/** 26 关联到 hex */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> HEX                  = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">name</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (value) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> ERROR:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LITERAL_INT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"int\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LITERAL_FLOAT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"float\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LITERAL_STRING:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"string\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LITERAL_ISO8601_DATE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"iso8601\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TRUE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"true\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> FALSE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"false\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> NULL:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> NEW:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"new\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LPAREN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"(\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RPAREN:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\")\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LBRACE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RBRACE:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&#125;\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> LBRACKET:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"[\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> RBRACKET:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COMMA:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\",\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> COLON:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\":\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SEMI:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\";\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> DOT:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\".\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> IDENTIFIER:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"ident\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> FIELD_NAME:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"fieldName\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> EOF:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"EOF\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SET:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Set\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> TREE_SET:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"TreeSet\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> UNDEFINED:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"undefined\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> HEX:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"hex\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Unknown\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，我们继续分析如何实现具体token解析的。</p>\n"},{"title":"序列化（四）","subtitle":"fastjson序列化主要使用入口就是在JSON.java类中，它提供非常简便和友好的api将java对象转换成json字符串。","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:06:14.000Z","_content":"\n## 概要\n\nfastjson序列化主要使用入口就是在`JSON.java`类中，它提供非常简便和友好的api将java对象转换成json字符串。\n\n### JSON成员函数\n\n```java\n    /**\n     *  便捷序列化java对象，序列化对象可以包含任意泛型属性字段，但是不适用本身是泛型的对象。\n     *  默认序列化返回字符串，可以使用writeJSONString(Writer, Object, SerializerFeature[])\n     *  将序列化字符串输出到指定输出器中\n     */\n    public static String toJSONString(Object object) {\n        /**\n         * 直接调用重载方法，将指定object序列化成json字符串，忽略序列化filter\n         */\n        return toJSONString(object, emptyFilters);\n    }\n```\n\n使用便捷接口toJSONString方法，可以将任意java对象序列化为json字符串，内部调用`toJSONString(Object, SerializeFilter[], SerializerFeature... )` :\n\n```java\n    public static String toJSONString(Object object, SerializeFilter[] filters, SerializerFeature... features) {\n        return toJSONString(object, SerializeConfig.globalInstance, filters, null, DEFAULT_GENERATE_FEATURE, features);\n    }\n```\n\n继续跟踪方法调用到`toJSONString(Object, SerializeConfig ,SerializeFilter[], String, int, SerializerFeature... )` :\n\n```java\n    public static String toJSONString(Object object,                   /** 序列化对象    */\n                                      SerializeConfig config,          /** 全局序列化配置 */\n                                      SerializeFilter[] filters,       /** 序列化拦截器   */\n                                      String dateFormat,               /** 序列化日期格式 */\n                                      int defaultFeatures,             /** 默认序列化特性 */\n                                      SerializerFeature... features) { /** 自定义序列化特性 */\n        /** 初始化序列化writer，用features覆盖defaultFeatures配置 */\n        SerializeWriter out = new SerializeWriter(null, defaultFeatures, features);\n\n        try {\n\n            /**\n             *  初始化JSONSerializer，序列化类型由它委托config查找具体\n             *  序列化处理器处理，序列化结果写入out的buffer中\n             */\n            JSONSerializer serializer = new JSONSerializer(out, config);\n\n            if (dateFormat != null && dateFormat.length() != 0) {\n                serializer.setDateFormat(dateFormat);\n                /** 调用out 重新配置属性 并且打开WriteDateUseDateFormat特性 */\n                serializer.config(SerializerFeature.WriteDateUseDateFormat, true);\n            }\n\n            if (filters != null) {\n                for (SerializeFilter filter : filters) {\n                    /** 添加拦截器 */\n                    serializer.addFilter(filter);\n                }\n            }\n\n            /** 使用序列化实例转换对象，查找具体序列化实例委托给config查找 */\n            serializer.write(object);\n\n            return out.toString();\n        } finally {\n            out.close();\n        }\n    }\n```\n\n这个序列化方法实际并不是真正执行序列化操作，首先\b做序列化\b特性配置，然后追加序列化拦截器，开始执行序列化对象操作委托给了config对象查找。\n\n我们继续进入`serializer.write(object)` 查看：\n\n```java\n    public final void write(Object object) {\n        if (object == null) {\n            /** 如果对象为空，直接输出 \"null\" 字符串 */\n            out.writeNull();\n            return;\n        }\n\n        Class<?> clazz = object.getClass();\n        /** 根据对象的Class类型查找具体序列化实例 */\n        ObjectSerializer writer = getObjectWriter(clazz);\n\n        try {\n            /** 使用具体serializer实例处理对象 */\n            writer.write(this, object, null, null, 0);\n        } catch (IOException e) {\n            throw new JSONException(e.getMessage(), e);\n        }\n    }\n```\n\n## 序列化回调接口\n\n### ObjectSerializer序列化接口\n\n我们发现真正序列化对象的时候是由具体`ObjectSerializer`实例完成，我们首先查看一下接口定义：\n\n```java\n    void write(JSONSerializer serializer, /** json序列化实例 */\n               Object object,       /** 待序列化的对象*/\n               Object fieldName,    /** 待序列化字段*/\n               Type fieldType,      /** 待序列化字段类型 */\n               int features) throws IOException;\n```\n\n当fastjson序列化特定的字段时会回调这个方法。\n\n我们\b继续\b跟踪`writer.write(this, object, null, null, 0)` :\n\n```java\n    public final void write(Object object) {\n        if (object == null) {\n            /** 如果对象为空，直接输出 \"null\" 字符串 */\n            out.writeNull();\n            return;\n        }\n\n        Class<?> clazz = object.getClass();\n        /** 根据对象的Class类型查找具体序列化实例 */\n        ObjectSerializer writer = getObjectWriter(clazz);\n\n        try {\n            /** 使用具体serializer实例处理对象 */\n            writer.write(this, object, null, null, 0);\n        } catch (IOException e) {\n            throw new JSONException(e.getMessage(), e);\n        }\n    }\n```\n\n我们发现在方法内部调用`getObjectWriter(clazz)`根据\b具体类型查找序列化实例，方法内部只有一行调用 `config.getObjectWriter(clazz)`，让我们更进一步查看委托实现细节`com.alibaba.fastjson.serializer.SerializeConfig#getObjectWriter(java.lang.Class<?>)`:\n\n```java\n    public ObjectSerializer getObjectWriter(Class<?> clazz) {\n        return getObjectWriter(clazz, true);\n    }\n```\n\n内部又调用`com.alibaba.fastjson.serializer.SerializeConfig#getObjectWriter(java.lang.Class<?>, boolean)`，这个类实现相对复杂了一些，\b我会按照代码顺序梳理所有序列化实例的要点 :\n\n```java\n    private ObjectSerializer getObjectWriter(Class<?> clazz, boolean create) {\n        /** 首先从内部已经注册查找特定class的序列化实例 */\n        ObjectSerializer writer = serializers.get(clazz);\n\n        if (writer == null) {\n            try {\n                final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n                /** 使用当前线程类加载器 查找 META-INF/services/AutowiredObjectSerializer.class实现类 */\n                for (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) {\n                    if (!(o instanceof AutowiredObjectSerializer)) {\n                        continue;\n                    }\n\n                    AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;\n                    for (Type forType : autowired.getAutowiredFor()) {\n                        /** 如果存在，注册到内部serializers缓存中 */\n                        put(forType, autowired);\n                    }\n                }\n            } catch (ClassCastException ex) {\n                // skip\n            }\n\n            /** 尝试在已注册缓存找到特定class的序列化实例 */\n            writer = serializers.get(clazz);\n        }\n\n        if (writer == null) {\n            /** 使用加载JSON类的加载器 查找 META-INF/services/AutowiredObjectSerializer.class实现类 */\n            final ClassLoader classLoader = JSON.class.getClassLoader();\n            if (classLoader != Thread.currentThread().getContextClassLoader()) {\n                try {\n                    for (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) {\n\n                        if (!(o instanceof AutowiredObjectSerializer)) {\n                            continue;\n                        }\n\n                        AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;\n                        for (Type forType : autowired.getAutowiredFor()) {\n                            /** 如果存在，注册到内部serializers缓存中 */\n                            put(forType, autowired);\n                        }\n                    }\n                } catch (ClassCastException ex) {\n                    // skip\n                }\n\n                /** 尝试在已注册缓存找到特定class的序列化实例 */\n                writer = serializers.get(clazz);\n            }\n        }\n\n        if (writer == null) {\n            String className = clazz.getName();\n            Class<?> superClass;\n\n            if (Map.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类Map接口，使用MapSerializer序列化 */\n                put(clazz, writer = MapSerializer.instance);\n            } else if (List.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类List接口，使用ListSerializer序列化 */\n                put(clazz, writer = ListSerializer.instance);\n            } else if (Collection.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类Collection接口，使用CollectionCodec序列化 */\n                put(clazz, writer = CollectionCodec.instance);\n            } else if (Date.class.isAssignableFrom(clazz)) {\n                /** 如果class继承Date，使用DateCodec序列化 */\n                put(clazz, writer = DateCodec.instance);\n            } else if (JSONAware.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类JSONAware接口，使用JSONAwareSerializer序列化 */\n                put(clazz, writer = JSONAwareSerializer.instance);\n            } else if (JSONSerializable.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类JSONSerializable接口，使用JSONSerializableSerializer序列化 */\n                put(clazz, writer = JSONSerializableSerializer.instance);\n            } else if (JSONStreamAware.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类JSONStreamAware接口，使用MiscCodecr序列化 */\n                put(clazz, writer = MiscCodec.instance);\n            } else if (clazz.isEnum()) {\n                JSONType jsonType = TypeUtils.getAnnotation(clazz, JSONType.class);\n                if (jsonType != null && jsonType.serializeEnumAsJavaBean()) {\n                    /** 如果是枚举类型，并且启用特性 serializeEnumAsJavaBean\n                     *  使用JavaBeanSerializer序列化(假设没有启用asm)\n                     */\n                    put(clazz, writer = createJavaBeanSerializer(clazz));\n                } else {\n                    /** 如果是枚举类型，没有启用特性 serializeEnumAsJavaBean\n                     *  使用EnumSerializer序列化\n                     */\n                    put(clazz, writer = EnumSerializer.instance);\n                }\n            } else if ((superClass = clazz.getSuperclass()) != null && superClass.isEnum()) {\n                JSONType jsonType = TypeUtils.getAnnotation(superClass, JSONType.class);\n                if (jsonType != null && jsonType.serializeEnumAsJavaBean()) {\n                    /** 如果父类是枚举类型，并且启用特性 serializeEnumAsJavaBean\n                     *  使用JavaBeanSerializer序列化(假设没有启用asm)\n                     */\n                    put(clazz, writer = createJavaBeanSerializer(clazz));\n                } else {\n                    /** 如果父类是枚举类型，没有启用特性 serializeEnumAsJavaBean\n                     *  使用EnumSerializer序列化\n                     */\n                    put(clazz, writer = EnumSerializer.instance);\n                }\n            } else if (clazz.isArray()) {\n                Class<?> componentType = clazz.getComponentType();\n                /** 如果是数组类型，根据数组实际类型查找序列化实例 */\n                ObjectSerializer compObjectSerializer = getObjectWriter(componentType);\n                put(clazz, writer = new ArraySerializer(componentType, compObjectSerializer));\n            } else if (Throwable.class.isAssignableFrom(clazz)) {\n                /** 注册通用JavaBeanSerializer序列化处理 Throwable */\n                SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy);\n                beanInfo.features |= SerializerFeature.WriteClassName.mask;\n                put(clazz, writer = new JavaBeanSerializer(beanInfo));\n            } else if (TimeZone.class.isAssignableFrom(clazz) || Map.Entry.class.isAssignableFrom(clazz)) {\n                /** 如果class实现Map.Entry接口或者继承类TimeZone，使用MiscCodecr序列化 */\n                put(clazz, writer = MiscCodec.instance);\n            } else if (Appendable.class.isAssignableFrom(clazz)) {\n                /** 如果class实现Appendable接口，使用AppendableSerializer序列化 */\n                put(clazz, writer = AppendableSerializer.instance);\n            } else if (Charset.class.isAssignableFrom(clazz)) {\n                /** 如果class继承Charset抽象类，使用ToStringSerializer序列化 */\n                put(clazz, writer = ToStringSerializer.instance);\n            } else if (Enumeration.class.isAssignableFrom(clazz)) {\n                /** 如果class实现Enumeration接口，使用EnumerationSerializer序列化 */\n                put(clazz, writer = EnumerationSerializer.instance);\n            } else if (Calendar.class.isAssignableFrom(clazz)\n                    || XMLGregorianCalendar.class.isAssignableFrom(clazz)) {\n                /** 如果class继承类Calendar或者XMLGregorianCalendar，使用CalendarCodec序列化 */\n                put(clazz, writer = CalendarCodec.instance);\n            } else if (Clob.class.isAssignableFrom(clazz)) {\n                /** 如果class实现Clob接口，使用ClobSeriliazer序列化 */\n                put(clazz, writer = ClobSeriliazer.instance);\n            } else if (TypeUtils.isPath(clazz)) {\n                /** 如果class实现java.nio.file.Path接口，使用ToStringSerializer序列化 */\n                put(clazz, writer = ToStringSerializer.instance);\n            } else if (Iterator.class.isAssignableFrom(clazz)) {\n                /** 如果class实现Iterator接口，使用MiscCodec序列化 */\n                put(clazz, writer = MiscCodec.instance);\n            } else {\n                /**\n                 *  如果class的name是\"java.awt.\"开头 并且\n                 *  继承 Point、Rectangle、Font或者Color 其中之一\n                 */\n                if (className.startsWith(\"java.awt.\")\n                    && AwtCodec.support(clazz)\n                ) {\n                    // awt\n                    if (!awtError) {\n                        try {\n                            String[] names = new String[]{\n                                    \"java.awt.Color\",\n                                    \"java.awt.Font\",\n                                    \"java.awt.Point\",\n                                    \"java.awt.Rectangle\"\n                            };\n                            for (String name : names) {\n                                if (name.equals(className)) {\n                                    /** 如果系统支持4中类型， 使用AwtCodec 序列化 */\n                                    put(Class.forName(name), writer = AwtCodec.instance);\n                                    return writer;\n                                }\n                            }\n                        } catch (Throwable e) {\n                            awtError = true;\n                            // skip\n                        }\n                    }\n                }\n\n                // jdk8\n                if ((!jdk8Error) //\n                    && (className.startsWith(\"java.time.\") //\n                        || className.startsWith(\"java.util.Optional\") //\n                        || className.equals(\"java.util.concurrent.atomic.LongAdder\")\n                        || className.equals(\"java.util.concurrent.atomic.DoubleAdder\")\n                    )) {\n                    try {\n                        {\n                            String[] names = new String[]{\n                                    \"java.time.LocalDateTime\",\n                                    \"java.time.LocalDate\",\n                                    \"java.time.LocalTime\",\n                                    \"java.time.ZonedDateTime\",\n                                    \"java.time.OffsetDateTime\",\n                                    \"java.time.OffsetTime\",\n                                    \"java.time.ZoneOffset\",\n                                    \"java.time.ZoneRegion\",\n                                    \"java.time.Period\",\n                                    \"java.time.Duration\",\n                                    \"java.time.Instant\"\n                            };\n                            for (String name : names) {\n                                if (name.equals(className)) {\n                                    /** 如果系统支持JDK8中日期类型， 使用Jdk8DateCodec 序列化 */\n                                    put(Class.forName(name), writer = Jdk8DateCodec.instance);\n                                    return writer;\n                                }\n                            }\n                        }\n                        {\n                            String[] names = new String[]{\n                                    \"java.util.Optional\",\n                                    \"java.util.OptionalDouble\",\n                                    \"java.util.OptionalInt\",\n                                    \"java.util.OptionalLong\"\n                            };\n                            for (String name : names) {\n                                if (name.equals(className)) {\n                                    /** 如果系统支持JDK8中可选类型， 使用OptionalCodec 序列化 */\n                                    put(Class.forName(name), writer = OptionalCodec.instance);\n                                    return writer;\n                                }\n                            }\n                        }\n                        {\n                            String[] names = new String[]{\n                                    \"java.util.concurrent.atomic.LongAdder\",\n                                    \"java.util.concurrent.atomic.DoubleAdder\"\n                            };\n                            for (String name : names) {\n                                if (name.equals(className)) {\n                                    /** 如果系统支持JDK8中原子类型， 使用AdderSerializer 序列化 */\n                                    put(Class.forName(name), writer = AdderSerializer.instance);\n                                    return writer;\n                                }\n                            }\n                        }\n                    } catch (Throwable e) {\n                        // skip\n                        jdk8Error = true;\n                    }\n                }\n\n                if ((!oracleJdbcError) //\n                    && className.startsWith(\"oracle.sql.\")) {\n                    try {\n                        String[] names = new String[] {\n                                \"oracle.sql.DATE\",\n                                \"oracle.sql.TIMESTAMP\"\n                        };\n\n                        for (String name : names) {\n                            if (name.equals(className)) {\n                                /** 如果系统支持oralcle驱动中日期类型， 使用DateCodec 序列化 */\n                                put(Class.forName(name), writer = DateCodec.instance);\n                                return writer;\n                            }\n                        }\n                    } catch (Throwable e) {\n                        // skip\n                        oracleJdbcError = true;\n                    }\n                }\n\n                if ((!springfoxError) //\n                    && className.equals(\"springfox.documentation.spring.web.json.Json\")) {\n                    try {\n                        /** 如果系统支持springfox-spring-web框架中Json类型， 使用SwaggerJsonSerializer 序列化 */\n                        put(Class.forName(\"springfox.documentation.spring.web.json.Json\"),\n                                writer = SwaggerJsonSerializer.instance);\n                        return writer;\n                    } catch (ClassNotFoundException e) {\n                        // skip\n                        springfoxError = true;\n                    }\n                }\n\n                if ((!guavaError) //\n                        && className.startsWith(\"com.google.common.collect.\")) {\n                    try {\n                        String[] names = new String[] {\n                                \"com.google.common.collect.HashMultimap\",\n                                \"com.google.common.collect.LinkedListMultimap\",\n                                \"com.google.common.collect.ArrayListMultimap\",\n                                \"com.google.common.collect.TreeMultimap\"\n                        };\n\n                        for (String name : names) {\n                            if (name.equals(className)) {\n                                /** 如果系统支持guava框架中日期类型， 使用GuavaCodec 序列化 */\n                                put(Class.forName(name), writer = GuavaCodec.instance);\n                                return writer;\n                            }\n                        }\n                    } catch (ClassNotFoundException e) {\n                        // skip\n                        guavaError = true;\n                    }\n                }\n\n                if ((!jsonnullError) && className.equals(\"net.sf.json.JSONNull\")) {\n                    try {\n                        /** 如果系统支持json-lib框架中JSONNull类型， 使用MiscCodec 序列化 */\n                        put(Class.forName(\"net.sf.json.JSONNull\"), writer = MiscCodec.instance);\n                        return writer;\n                    } catch (ClassNotFoundException e) {\n                        // skip\n                        jsonnullError = true;\n                    }\n                }\n\n                Class[] interfaces = clazz.getInterfaces();\n                /** 如果class只实现唯一接口，并且接口包含注解，使用AnnotationSerializer 序列化 */\n                if (interfaces.length == 1 && interfaces[0].isAnnotation()) {\n                    return AnnotationSerializer.instance;\n                }\n\n                /** 如果使用了cglib或者javassist动态代理 */\n                if (TypeUtils.isProxy(clazz)) {\n                    Class<?> superClazz = clazz.getSuperclass();\n\n                    /** 通过父类型查找序列化，父类是真实的类型 */\n                    ObjectSerializer superWriter = getObjectWriter(superClazz);\n                    put(clazz, superWriter);\n                    return superWriter;\n                }\n\n                /** 如果使用了jdk动态代理 */\n                if (Proxy.isProxyClass(clazz)) {\n                    Class handlerClass = null;\n\n                    if (interfaces.length == 2) {\n                        handlerClass = interfaces[1];\n                    } else {\n                        for (Class proxiedInterface : interfaces) {\n                            if (proxiedInterface.getName().startsWith(\"org.springframework.aop.\")) {\n                                continue;\n                            }\n                            if (handlerClass != null) {\n                                handlerClass = null; // multi-matched\n                                break;\n                            }\n                            handlerClass = proxiedInterface;\n                        }\n                    }\n\n                    if (handlerClass != null) {\n                        /** 根据class实现接口类型查找序列化 */\n                        ObjectSerializer superWriter = getObjectWriter(handlerClass);\n                        put(clazz, superWriter);\n                        return superWriter;\n                    }\n                }\n\n                if (create) {\n                    /** 没有精确匹配，使用通用JavaBeanSerializer 序列化(假设不启用asm) */\n                    writer = createJavaBeanSerializer(clazz);\n                    put(clazz, writer);\n                }\n            }\n\n            if (writer == null) {\n                /** 尝试在已注册缓存找到特定class的序列化实例 */\n                writer = serializers.get(clazz);\n            }\n        }\n        return writer;\n    }\n```\n\n查找具体序列化实例，查找方法基本思想根据class类型或者实现接口类型进行匹配查找。接下来\b针对逐个序列化实现依次分析。\n","source":"_posts/Fastjson源码解析-序列化(四)-json序列化实现解析.md","raw":"---\ntitle: 序列化（四）\nsubtitle:  fastjson序列化主要使用入口就是在JSON.java类中，它提供非常简便和友好的api将java对象转换成json字符串。\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n- Fastjson源码解析\ncategories:\n- Fastjson源码解析\ndate: 2018-09-30 23:06:14\n---\n\n## 概要\n\nfastjson序列化主要使用入口就是在`JSON.java`类中，它提供非常简便和友好的api将java对象转换成json字符串。\n\n### JSON成员函数\n\n```java\n    /**\n     *  便捷序列化java对象，序列化对象可以包含任意泛型属性字段，但是不适用本身是泛型的对象。\n     *  默认序列化返回字符串，可以使用writeJSONString(Writer, Object, SerializerFeature[])\n     *  将序列化字符串输出到指定输出器中\n     */\n    public static String toJSONString(Object object) {\n        /**\n         * 直接调用重载方法，将指定object序列化成json字符串，忽略序列化filter\n         */\n        return toJSONString(object, emptyFilters);\n    }\n```\n\n使用便捷接口toJSONString方法，可以将任意java对象序列化为json字符串，内部调用`toJSONString(Object, SerializeFilter[], SerializerFeature... )` :\n\n```java\n    public static String toJSONString(Object object, SerializeFilter[] filters, SerializerFeature... features) {\n        return toJSONString(object, SerializeConfig.globalInstance, filters, null, DEFAULT_GENERATE_FEATURE, features);\n    }\n```\n\n继续跟踪方法调用到`toJSONString(Object, SerializeConfig ,SerializeFilter[], String, int, SerializerFeature... )` :\n\n```java\n    public static String toJSONString(Object object,                   /** 序列化对象    */\n                                      SerializeConfig config,          /** 全局序列化配置 */\n                                      SerializeFilter[] filters,       /** 序列化拦截器   */\n                                      String dateFormat,               /** 序列化日期格式 */\n                                      int defaultFeatures,             /** 默认序列化特性 */\n                                      SerializerFeature... features) { /** 自定义序列化特性 */\n        /** 初始化序列化writer，用features覆盖defaultFeatures配置 */\n        SerializeWriter out = new SerializeWriter(null, defaultFeatures, features);\n\n        try {\n\n            /**\n             *  初始化JSONSerializer，序列化类型由它委托config查找具体\n             *  序列化处理器处理，序列化结果写入out的buffer中\n             */\n            JSONSerializer serializer = new JSONSerializer(out, config);\n\n            if (dateFormat != null && dateFormat.length() != 0) {\n                serializer.setDateFormat(dateFormat);\n                /** 调用out 重新配置属性 并且打开WriteDateUseDateFormat特性 */\n                serializer.config(SerializerFeature.WriteDateUseDateFormat, true);\n            }\n\n            if (filters != null) {\n                for (SerializeFilter filter : filters) {\n                    /** 添加拦截器 */\n                    serializer.addFilter(filter);\n                }\n            }\n\n            /** 使用序列化实例转换对象，查找具体序列化实例委托给config查找 */\n            serializer.write(object);\n\n            return out.toString();\n        } finally {\n            out.close();\n        }\n    }\n```\n\n这个序列化方法实际并不是真正执行序列化操作，首先\b做序列化\b特性配置，然后追加序列化拦截器，开始执行序列化对象操作委托给了config对象查找。\n\n我们继续进入`serializer.write(object)` 查看：\n\n```java\n    public final void write(Object object) {\n        if (object == null) {\n            /** 如果对象为空，直接输出 \"null\" 字符串 */\n            out.writeNull();\n            return;\n        }\n\n        Class<?> clazz = object.getClass();\n        /** 根据对象的Class类型查找具体序列化实例 */\n        ObjectSerializer writer = getObjectWriter(clazz);\n\n        try {\n            /** 使用具体serializer实例处理对象 */\n            writer.write(this, object, null, null, 0);\n        } catch (IOException e) {\n            throw new JSONException(e.getMessage(), e);\n        }\n    }\n```\n\n## 序列化回调接口\n\n### ObjectSerializer序列化接口\n\n我们发现真正序列化对象的时候是由具体`ObjectSerializer`实例完成，我们首先查看一下接口定义：\n\n```java\n    void write(JSONSerializer serializer, /** json序列化实例 */\n               Object object,       /** 待序列化的对象*/\n               Object fieldName,    /** 待序列化字段*/\n               Type fieldType,      /** 待序列化字段类型 */\n               int features) throws IOException;\n```\n\n当fastjson序列化特定的字段时会回调这个方法。\n\n我们\b继续\b跟踪`writer.write(this, object, null, null, 0)` :\n\n```java\n    public final void write(Object object) {\n        if (object == null) {\n            /** 如果对象为空，直接输出 \"null\" 字符串 */\n            out.writeNull();\n            return;\n        }\n\n        Class<?> clazz = object.getClass();\n        /** 根据对象的Class类型查找具体序列化实例 */\n        ObjectSerializer writer = getObjectWriter(clazz);\n\n        try {\n            /** 使用具体serializer实例处理对象 */\n            writer.write(this, object, null, null, 0);\n        } catch (IOException e) {\n            throw new JSONException(e.getMessage(), e);\n        }\n    }\n```\n\n我们发现在方法内部调用`getObjectWriter(clazz)`根据\b具体类型查找序列化实例，方法内部只有一行调用 `config.getObjectWriter(clazz)`，让我们更进一步查看委托实现细节`com.alibaba.fastjson.serializer.SerializeConfig#getObjectWriter(java.lang.Class<?>)`:\n\n```java\n    public ObjectSerializer getObjectWriter(Class<?> clazz) {\n        return getObjectWriter(clazz, true);\n    }\n```\n\n内部又调用`com.alibaba.fastjson.serializer.SerializeConfig#getObjectWriter(java.lang.Class<?>, boolean)`，这个类实现相对复杂了一些，\b我会按照代码顺序梳理所有序列化实例的要点 :\n\n```java\n    private ObjectSerializer getObjectWriter(Class<?> clazz, boolean create) {\n        /** 首先从内部已经注册查找特定class的序列化实例 */\n        ObjectSerializer writer = serializers.get(clazz);\n\n        if (writer == null) {\n            try {\n                final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n                /** 使用当前线程类加载器 查找 META-INF/services/AutowiredObjectSerializer.class实现类 */\n                for (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) {\n                    if (!(o instanceof AutowiredObjectSerializer)) {\n                        continue;\n                    }\n\n                    AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;\n                    for (Type forType : autowired.getAutowiredFor()) {\n                        /** 如果存在，注册到内部serializers缓存中 */\n                        put(forType, autowired);\n                    }\n                }\n            } catch (ClassCastException ex) {\n                // skip\n            }\n\n            /** 尝试在已注册缓存找到特定class的序列化实例 */\n            writer = serializers.get(clazz);\n        }\n\n        if (writer == null) {\n            /** 使用加载JSON类的加载器 查找 META-INF/services/AutowiredObjectSerializer.class实现类 */\n            final ClassLoader classLoader = JSON.class.getClassLoader();\n            if (classLoader != Thread.currentThread().getContextClassLoader()) {\n                try {\n                    for (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) {\n\n                        if (!(o instanceof AutowiredObjectSerializer)) {\n                            continue;\n                        }\n\n                        AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;\n                        for (Type forType : autowired.getAutowiredFor()) {\n                            /** 如果存在，注册到内部serializers缓存中 */\n                            put(forType, autowired);\n                        }\n                    }\n                } catch (ClassCastException ex) {\n                    // skip\n                }\n\n                /** 尝试在已注册缓存找到特定class的序列化实例 */\n                writer = serializers.get(clazz);\n            }\n        }\n\n        if (writer == null) {\n            String className = clazz.getName();\n            Class<?> superClass;\n\n            if (Map.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类Map接口，使用MapSerializer序列化 */\n                put(clazz, writer = MapSerializer.instance);\n            } else if (List.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类List接口，使用ListSerializer序列化 */\n                put(clazz, writer = ListSerializer.instance);\n            } else if (Collection.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类Collection接口，使用CollectionCodec序列化 */\n                put(clazz, writer = CollectionCodec.instance);\n            } else if (Date.class.isAssignableFrom(clazz)) {\n                /** 如果class继承Date，使用DateCodec序列化 */\n                put(clazz, writer = DateCodec.instance);\n            } else if (JSONAware.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类JSONAware接口，使用JSONAwareSerializer序列化 */\n                put(clazz, writer = JSONAwareSerializer.instance);\n            } else if (JSONSerializable.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类JSONSerializable接口，使用JSONSerializableSerializer序列化 */\n                put(clazz, writer = JSONSerializableSerializer.instance);\n            } else if (JSONStreamAware.class.isAssignableFrom(clazz)) {\n                /** 如果class实现类JSONStreamAware接口，使用MiscCodecr序列化 */\n                put(clazz, writer = MiscCodec.instance);\n            } else if (clazz.isEnum()) {\n                JSONType jsonType = TypeUtils.getAnnotation(clazz, JSONType.class);\n                if (jsonType != null && jsonType.serializeEnumAsJavaBean()) {\n                    /** 如果是枚举类型，并且启用特性 serializeEnumAsJavaBean\n                     *  使用JavaBeanSerializer序列化(假设没有启用asm)\n                     */\n                    put(clazz, writer = createJavaBeanSerializer(clazz));\n                } else {\n                    /** 如果是枚举类型，没有启用特性 serializeEnumAsJavaBean\n                     *  使用EnumSerializer序列化\n                     */\n                    put(clazz, writer = EnumSerializer.instance);\n                }\n            } else if ((superClass = clazz.getSuperclass()) != null && superClass.isEnum()) {\n                JSONType jsonType = TypeUtils.getAnnotation(superClass, JSONType.class);\n                if (jsonType != null && jsonType.serializeEnumAsJavaBean()) {\n                    /** 如果父类是枚举类型，并且启用特性 serializeEnumAsJavaBean\n                     *  使用JavaBeanSerializer序列化(假设没有启用asm)\n                     */\n                    put(clazz, writer = createJavaBeanSerializer(clazz));\n                } else {\n                    /** 如果父类是枚举类型，没有启用特性 serializeEnumAsJavaBean\n                     *  使用EnumSerializer序列化\n                     */\n                    put(clazz, writer = EnumSerializer.instance);\n                }\n            } else if (clazz.isArray()) {\n                Class<?> componentType = clazz.getComponentType();\n                /** 如果是数组类型，根据数组实际类型查找序列化实例 */\n                ObjectSerializer compObjectSerializer = getObjectWriter(componentType);\n                put(clazz, writer = new ArraySerializer(componentType, compObjectSerializer));\n            } else if (Throwable.class.isAssignableFrom(clazz)) {\n                /** 注册通用JavaBeanSerializer序列化处理 Throwable */\n                SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy);\n                beanInfo.features |= SerializerFeature.WriteClassName.mask;\n                put(clazz, writer = new JavaBeanSerializer(beanInfo));\n            } else if (TimeZone.class.isAssignableFrom(clazz) || Map.Entry.class.isAssignableFrom(clazz)) {\n                /** 如果class实现Map.Entry接口或者继承类TimeZone，使用MiscCodecr序列化 */\n                put(clazz, writer = MiscCodec.instance);\n            } else if (Appendable.class.isAssignableFrom(clazz)) {\n                /** 如果class实现Appendable接口，使用AppendableSerializer序列化 */\n                put(clazz, writer = AppendableSerializer.instance);\n            } else if (Charset.class.isAssignableFrom(clazz)) {\n                /** 如果class继承Charset抽象类，使用ToStringSerializer序列化 */\n                put(clazz, writer = ToStringSerializer.instance);\n            } else if (Enumeration.class.isAssignableFrom(clazz)) {\n                /** 如果class实现Enumeration接口，使用EnumerationSerializer序列化 */\n                put(clazz, writer = EnumerationSerializer.instance);\n            } else if (Calendar.class.isAssignableFrom(clazz)\n                    || XMLGregorianCalendar.class.isAssignableFrom(clazz)) {\n                /** 如果class继承类Calendar或者XMLGregorianCalendar，使用CalendarCodec序列化 */\n                put(clazz, writer = CalendarCodec.instance);\n            } else if (Clob.class.isAssignableFrom(clazz)) {\n                /** 如果class实现Clob接口，使用ClobSeriliazer序列化 */\n                put(clazz, writer = ClobSeriliazer.instance);\n            } else if (TypeUtils.isPath(clazz)) {\n                /** 如果class实现java.nio.file.Path接口，使用ToStringSerializer序列化 */\n                put(clazz, writer = ToStringSerializer.instance);\n            } else if (Iterator.class.isAssignableFrom(clazz)) {\n                /** 如果class实现Iterator接口，使用MiscCodec序列化 */\n                put(clazz, writer = MiscCodec.instance);\n            } else {\n                /**\n                 *  如果class的name是\"java.awt.\"开头 并且\n                 *  继承 Point、Rectangle、Font或者Color 其中之一\n                 */\n                if (className.startsWith(\"java.awt.\")\n                    && AwtCodec.support(clazz)\n                ) {\n                    // awt\n                    if (!awtError) {\n                        try {\n                            String[] names = new String[]{\n                                    \"java.awt.Color\",\n                                    \"java.awt.Font\",\n                                    \"java.awt.Point\",\n                                    \"java.awt.Rectangle\"\n                            };\n                            for (String name : names) {\n                                if (name.equals(className)) {\n                                    /** 如果系统支持4中类型， 使用AwtCodec 序列化 */\n                                    put(Class.forName(name), writer = AwtCodec.instance);\n                                    return writer;\n                                }\n                            }\n                        } catch (Throwable e) {\n                            awtError = true;\n                            // skip\n                        }\n                    }\n                }\n\n                // jdk8\n                if ((!jdk8Error) //\n                    && (className.startsWith(\"java.time.\") //\n                        || className.startsWith(\"java.util.Optional\") //\n                        || className.equals(\"java.util.concurrent.atomic.LongAdder\")\n                        || className.equals(\"java.util.concurrent.atomic.DoubleAdder\")\n                    )) {\n                    try {\n                        {\n                            String[] names = new String[]{\n                                    \"java.time.LocalDateTime\",\n                                    \"java.time.LocalDate\",\n                                    \"java.time.LocalTime\",\n                                    \"java.time.ZonedDateTime\",\n                                    \"java.time.OffsetDateTime\",\n                                    \"java.time.OffsetTime\",\n                                    \"java.time.ZoneOffset\",\n                                    \"java.time.ZoneRegion\",\n                                    \"java.time.Period\",\n                                    \"java.time.Duration\",\n                                    \"java.time.Instant\"\n                            };\n                            for (String name : names) {\n                                if (name.equals(className)) {\n                                    /** 如果系统支持JDK8中日期类型， 使用Jdk8DateCodec 序列化 */\n                                    put(Class.forName(name), writer = Jdk8DateCodec.instance);\n                                    return writer;\n                                }\n                            }\n                        }\n                        {\n                            String[] names = new String[]{\n                                    \"java.util.Optional\",\n                                    \"java.util.OptionalDouble\",\n                                    \"java.util.OptionalInt\",\n                                    \"java.util.OptionalLong\"\n                            };\n                            for (String name : names) {\n                                if (name.equals(className)) {\n                                    /** 如果系统支持JDK8中可选类型， 使用OptionalCodec 序列化 */\n                                    put(Class.forName(name), writer = OptionalCodec.instance);\n                                    return writer;\n                                }\n                            }\n                        }\n                        {\n                            String[] names = new String[]{\n                                    \"java.util.concurrent.atomic.LongAdder\",\n                                    \"java.util.concurrent.atomic.DoubleAdder\"\n                            };\n                            for (String name : names) {\n                                if (name.equals(className)) {\n                                    /** 如果系统支持JDK8中原子类型， 使用AdderSerializer 序列化 */\n                                    put(Class.forName(name), writer = AdderSerializer.instance);\n                                    return writer;\n                                }\n                            }\n                        }\n                    } catch (Throwable e) {\n                        // skip\n                        jdk8Error = true;\n                    }\n                }\n\n                if ((!oracleJdbcError) //\n                    && className.startsWith(\"oracle.sql.\")) {\n                    try {\n                        String[] names = new String[] {\n                                \"oracle.sql.DATE\",\n                                \"oracle.sql.TIMESTAMP\"\n                        };\n\n                        for (String name : names) {\n                            if (name.equals(className)) {\n                                /** 如果系统支持oralcle驱动中日期类型， 使用DateCodec 序列化 */\n                                put(Class.forName(name), writer = DateCodec.instance);\n                                return writer;\n                            }\n                        }\n                    } catch (Throwable e) {\n                        // skip\n                        oracleJdbcError = true;\n                    }\n                }\n\n                if ((!springfoxError) //\n                    && className.equals(\"springfox.documentation.spring.web.json.Json\")) {\n                    try {\n                        /** 如果系统支持springfox-spring-web框架中Json类型， 使用SwaggerJsonSerializer 序列化 */\n                        put(Class.forName(\"springfox.documentation.spring.web.json.Json\"),\n                                writer = SwaggerJsonSerializer.instance);\n                        return writer;\n                    } catch (ClassNotFoundException e) {\n                        // skip\n                        springfoxError = true;\n                    }\n                }\n\n                if ((!guavaError) //\n                        && className.startsWith(\"com.google.common.collect.\")) {\n                    try {\n                        String[] names = new String[] {\n                                \"com.google.common.collect.HashMultimap\",\n                                \"com.google.common.collect.LinkedListMultimap\",\n                                \"com.google.common.collect.ArrayListMultimap\",\n                                \"com.google.common.collect.TreeMultimap\"\n                        };\n\n                        for (String name : names) {\n                            if (name.equals(className)) {\n                                /** 如果系统支持guava框架中日期类型， 使用GuavaCodec 序列化 */\n                                put(Class.forName(name), writer = GuavaCodec.instance);\n                                return writer;\n                            }\n                        }\n                    } catch (ClassNotFoundException e) {\n                        // skip\n                        guavaError = true;\n                    }\n                }\n\n                if ((!jsonnullError) && className.equals(\"net.sf.json.JSONNull\")) {\n                    try {\n                        /** 如果系统支持json-lib框架中JSONNull类型， 使用MiscCodec 序列化 */\n                        put(Class.forName(\"net.sf.json.JSONNull\"), writer = MiscCodec.instance);\n                        return writer;\n                    } catch (ClassNotFoundException e) {\n                        // skip\n                        jsonnullError = true;\n                    }\n                }\n\n                Class[] interfaces = clazz.getInterfaces();\n                /** 如果class只实现唯一接口，并且接口包含注解，使用AnnotationSerializer 序列化 */\n                if (interfaces.length == 1 && interfaces[0].isAnnotation()) {\n                    return AnnotationSerializer.instance;\n                }\n\n                /** 如果使用了cglib或者javassist动态代理 */\n                if (TypeUtils.isProxy(clazz)) {\n                    Class<?> superClazz = clazz.getSuperclass();\n\n                    /** 通过父类型查找序列化，父类是真实的类型 */\n                    ObjectSerializer superWriter = getObjectWriter(superClazz);\n                    put(clazz, superWriter);\n                    return superWriter;\n                }\n\n                /** 如果使用了jdk动态代理 */\n                if (Proxy.isProxyClass(clazz)) {\n                    Class handlerClass = null;\n\n                    if (interfaces.length == 2) {\n                        handlerClass = interfaces[1];\n                    } else {\n                        for (Class proxiedInterface : interfaces) {\n                            if (proxiedInterface.getName().startsWith(\"org.springframework.aop.\")) {\n                                continue;\n                            }\n                            if (handlerClass != null) {\n                                handlerClass = null; // multi-matched\n                                break;\n                            }\n                            handlerClass = proxiedInterface;\n                        }\n                    }\n\n                    if (handlerClass != null) {\n                        /** 根据class实现接口类型查找序列化 */\n                        ObjectSerializer superWriter = getObjectWriter(handlerClass);\n                        put(clazz, superWriter);\n                        return superWriter;\n                    }\n                }\n\n                if (create) {\n                    /** 没有精确匹配，使用通用JavaBeanSerializer 序列化(假设不启用asm) */\n                    writer = createJavaBeanSerializer(clazz);\n                    put(clazz, writer);\n                }\n            }\n\n            if (writer == null) {\n                /** 尝试在已注册缓存找到特定class的序列化实例 */\n                writer = serializers.get(clazz);\n            }\n        }\n        return writer;\n    }\n```\n\n查找具体序列化实例，查找方法基本思想根据class类型或者实现接口类型进行匹配查找。接下来\b针对逐个序列化实现依次分析。\n","slug":"Fastjson源码解析-序列化(四)-json序列化实现解析","published":1,"updated":"2018-10-12T02:21:24.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4et8000hxat842hh6rce","content":"<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>fastjson序列化主要使用入口就是在<code>JSON.java</code>类中，它提供非常简便和友好的api将java对象转换成json字符串。</p>\n<h3 id=\"JSON成员函数\"><a href=\"#JSON成员函数\" class=\"headerlink\" title=\"JSON成员函数\"></a>JSON成员函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  便捷序列化java对象，序列化对象可以包含任意泛型属性字段，但是不适用本身是泛型的对象。</span></span><br><span class=\"line\"><span class=\"comment\"> *  默认序列化返回字符串，可以使用writeJSONString(Writer, Object, SerializerFeature[])</span></span><br><span class=\"line\"><span class=\"comment\"> *  将序列化字符串输出到指定输出器中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toJSONString</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 直接调用重载方法，将指定object序列化成json字符串，忽略序列化filter</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> toJSONString(object, emptyFilters);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用便捷接口toJSONString方法，可以将任意java对象序列化为json字符串，内部调用<code>toJSONString(Object, SerializeFilter[], SerializerFeature... )</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toJSONString</span><span class=\"params\">(Object object, SerializeFilter[] filters, SerializerFeature... features)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> toJSONString(object, SerializeConfig.globalInstance, filters, <span class=\"keyword\">null</span>, DEFAULT_GENERATE_FEATURE, features);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟踪方法调用到<code>toJSONString(Object, SerializeConfig ,SerializeFilter[], String, int, SerializerFeature... )</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toJSONString</span><span class=\"params\">(Object object,                   <span class=\"comment\">/** 序列化对象    */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  SerializeConfig config,          <span class=\"comment\">/** 全局序列化配置 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  SerializeFilter[] filters,       <span class=\"comment\">/** 序列化拦截器   */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  String dateFormat,               <span class=\"comment\">/** 序列化日期格式 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  <span class=\"keyword\">int</span> defaultFeatures,             <span class=\"comment\">/** 默认序列化特性 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  SerializerFeature... features)</span> </span>&#123; <span class=\"comment\">/** 自定义序列化特性 */</span></span><br><span class=\"line\">    <span class=\"comment\">/** 初始化序列化writer，用features覆盖defaultFeatures配置 */</span></span><br><span class=\"line\">    SerializeWriter out = <span class=\"keyword\">new</span> SerializeWriter(<span class=\"keyword\">null</span>, defaultFeatures, features);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  初始化JSONSerializer，序列化类型由它委托config查找具体</span></span><br><span class=\"line\"><span class=\"comment\">         *  序列化处理器处理，序列化结果写入out的buffer中</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        JSONSerializer serializer = <span class=\"keyword\">new</span> JSONSerializer(out, config);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dateFormat != <span class=\"keyword\">null</span> &amp;&amp; dateFormat.length() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            serializer.setDateFormat(dateFormat);</span><br><span class=\"line\">            <span class=\"comment\">/** 调用out 重新配置属性 并且打开WriteDateUseDateFormat特性 */</span></span><br><span class=\"line\">            serializer.config(SerializerFeature.WriteDateUseDateFormat, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filters != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (SerializeFilter filter : filters) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 添加拦截器 */</span></span><br><span class=\"line\">                serializer.addFilter(filter);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 使用序列化实例转换对象，查找具体序列化实例委托给config查找 */</span></span><br><span class=\"line\">        serializer.write(object);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> out.toString();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个序列化方法实际并不是真正执行序列化操作，首先\b做序列化\b特性配置，然后追加序列化拦截器，开始执行序列化对象操作委托给了config对象查找。</p>\n<p>我们继续进入<code>serializer.write(object)</code> 查看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果对象为空，直接输出 \"null\" 字符串 */</span></span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; clazz = object.getClass();</span><br><span class=\"line\">    <span class=\"comment\">/** 根据对象的Class类型查找具体序列化实例 */</span></span><br><span class=\"line\">    ObjectSerializer writer = getObjectWriter(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 使用具体serializer实例处理对象 */</span></span><br><span class=\"line\">        writer.write(<span class=\"keyword\">this</span>, object, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(e.getMessage(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"序列化回调接口\"><a href=\"#序列化回调接口\" class=\"headerlink\" title=\"序列化回调接口\"></a>序列化回调接口</h2><h3 id=\"ObjectSerializer序列化接口\"><a href=\"#ObjectSerializer序列化接口\" class=\"headerlink\" title=\"ObjectSerializer序列化接口\"></a>ObjectSerializer序列化接口</h3><p>我们发现真正序列化对象的时候是由具体<code>ObjectSerializer</code>实例完成，我们首先查看一下接口定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, <span class=\"comment\">/** json序列化实例 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           Object object,       <span class=\"comment\">/** 待序列化的对象*/</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           Object fieldName,    <span class=\"comment\">/** 待序列化字段*/</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           Type fieldType,      <span class=\"comment\">/** 待序列化字段类型 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n<p>当fastjson序列化特定的字段时会回调这个方法。</p>\n<p>我们\b继续\b跟踪<code>writer.write(this, object, null, null, 0)</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果对象为空，直接输出 \"null\" 字符串 */</span></span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; clazz = object.getClass();</span><br><span class=\"line\">    <span class=\"comment\">/** 根据对象的Class类型查找具体序列化实例 */</span></span><br><span class=\"line\">    ObjectSerializer writer = getObjectWriter(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 使用具体serializer实例处理对象 */</span></span><br><span class=\"line\">        writer.write(<span class=\"keyword\">this</span>, object, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(e.getMessage(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们发现在方法内部调用<code>getObjectWriter(clazz)</code>根据\b具体类型查找序列化实例，方法内部只有一行调用 <code>config.getObjectWriter(clazz)</code>，让我们更进一步查看委托实现细节<code>com.alibaba.fastjson.serializer.SerializeConfig#getObjectWriter(java.lang.Class&lt;?&gt;)</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ObjectSerializer <span class=\"title\">getObjectWriter</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getObjectWriter(clazz, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>内部又调用<code>com.alibaba.fastjson.serializer.SerializeConfig#getObjectWriter(java.lang.Class&lt;?&gt;, boolean)</code>，这个类实现相对复杂了一些，\b我会按照代码顺序梳理所有序列化实例的要点 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ObjectSerializer <span class=\"title\">getObjectWriter</span><span class=\"params\">(Class&lt;?&gt; clazz, <span class=\"keyword\">boolean</span> create)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 首先从内部已经注册查找特定class的序列化实例 */</span></span><br><span class=\"line\">    ObjectSerializer writer = serializers.get(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">            <span class=\"comment\">/** 使用当前线程类加载器 查找 META-INF/services/AutowiredObjectSerializer.class实现类 */</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> AutowiredObjectSerializer)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果存在，注册到内部serializers缓存中 */</span></span><br><span class=\"line\">                    put(forType, autowired);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// skip</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 尝试在已注册缓存找到特定class的序列化实例 */</span></span><br><span class=\"line\">        writer = serializers.get(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 使用加载JSON类的加载器 查找 META-INF/services/AutowiredObjectSerializer.class实现类 */</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ClassLoader classLoader = JSON.class.getClassLoader();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (classLoader != Thread.currentThread().getContextClassLoader()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> AutowiredObjectSerializer)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 如果存在，注册到内部serializers缓存中 */</span></span><br><span class=\"line\">                        put(forType, autowired);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassCastException ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// skip</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 尝试在已注册缓存找到特定class的序列化实例 */</span></span><br><span class=\"line\">            writer = serializers.get(clazz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        String className = clazz.getName();</span><br><span class=\"line\">        Class&lt;?&gt; superClass;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类Map接口，使用MapSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = MapSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (List.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类List接口，使用ListSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = ListSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类Collection接口，使用CollectionCodec序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = CollectionCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Date.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class继承Date，使用DateCodec序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = DateCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (JSONAware.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类JSONAware接口，使用JSONAwareSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = JSONAwareSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (JSONSerializable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类JSONSerializable接口，使用JSONSerializableSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = JSONSerializableSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (JSONStreamAware.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类JSONStreamAware接口，使用MiscCodecr序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = MiscCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz.isEnum()) &#123;</span><br><span class=\"line\">            JSONType jsonType = TypeUtils.getAnnotation(clazz, JSONType.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (jsonType != <span class=\"keyword\">null</span> &amp;&amp; jsonType.serializeEnumAsJavaBean()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果是枚举类型，并且启用特性 serializeEnumAsJavaBean</span></span><br><span class=\"line\"><span class=\"comment\">                 *  使用JavaBeanSerializer序列化(假设没有启用asm)</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                put(clazz, writer = createJavaBeanSerializer(clazz));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果是枚举类型，没有启用特性 serializeEnumAsJavaBean</span></span><br><span class=\"line\"><span class=\"comment\">                 *  使用EnumSerializer序列化</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                put(clazz, writer = EnumSerializer.instance);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((superClass = clazz.getSuperclass()) != <span class=\"keyword\">null</span> &amp;&amp; superClass.isEnum()) &#123;</span><br><span class=\"line\">            JSONType jsonType = TypeUtils.getAnnotation(superClass, JSONType.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (jsonType != <span class=\"keyword\">null</span> &amp;&amp; jsonType.serializeEnumAsJavaBean()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果父类是枚举类型，并且启用特性 serializeEnumAsJavaBean</span></span><br><span class=\"line\"><span class=\"comment\">                 *  使用JavaBeanSerializer序列化(假设没有启用asm)</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                put(clazz, writer = createJavaBeanSerializer(clazz));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果父类是枚举类型，没有启用特性 serializeEnumAsJavaBean</span></span><br><span class=\"line\"><span class=\"comment\">                 *  使用EnumSerializer序列化</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                put(clazz, writer = EnumSerializer.instance);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz.isArray()) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; componentType = clazz.getComponentType();</span><br><span class=\"line\">            <span class=\"comment\">/** 如果是数组类型，根据数组实际类型查找序列化实例 */</span></span><br><span class=\"line\">            ObjectSerializer compObjectSerializer = getObjectWriter(componentType);</span><br><span class=\"line\">            put(clazz, writer = <span class=\"keyword\">new</span> ArraySerializer(componentType, compObjectSerializer));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Throwable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 注册通用JavaBeanSerializer序列化处理 Throwable */</span></span><br><span class=\"line\">            SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, <span class=\"keyword\">null</span>, propertyNamingStrategy);</span><br><span class=\"line\">            beanInfo.features |= SerializerFeature.WriteClassName.mask;</span><br><span class=\"line\">            put(clazz, writer = <span class=\"keyword\">new</span> JavaBeanSerializer(beanInfo));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TimeZone.class.isAssignableFrom(clazz) || Map.Entry.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现Map.Entry接口或者继承类TimeZone，使用MiscCodecr序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = MiscCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Appendable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现Appendable接口，使用AppendableSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = AppendableSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Charset.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class继承Charset抽象类，使用ToStringSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = ToStringSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Enumeration.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现Enumeration接口，使用EnumerationSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = EnumerationSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Calendar.class.isAssignableFrom(clazz)</span><br><span class=\"line\">                || XMLGregorianCalendar.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class继承类Calendar或者XMLGregorianCalendar，使用CalendarCodec序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = CalendarCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Clob.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现Clob接口，使用ClobSeriliazer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = ClobSeriliazer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TypeUtils.isPath(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现java.nio.file.Path接口，使用ToStringSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = ToStringSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Iterator.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现Iterator接口，使用MiscCodec序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = MiscCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             *  如果class的name是\"java.awt.\"开头 并且</span></span><br><span class=\"line\"><span class=\"comment\">             *  继承 Point、Rectangle、Font或者Color 其中之一</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">\"java.awt.\"</span>)</span><br><span class=\"line\">                &amp;&amp; AwtCodec.support(clazz)</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// awt</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!awtError) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        String[] names = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">                                <span class=\"string\">\"java.awt.Color\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.awt.Font\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.awt.Point\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.awt.Rectangle\"</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">/** 如果系统支持4中类型， 使用AwtCodec 序列化 */</span></span><br><span class=\"line\">                                put(Class.forName(name), writer = AwtCodec.instance);</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                        awtError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// jdk8</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!jdk8Error) <span class=\"comment\">//</span></span><br><span class=\"line\">                &amp;&amp; (className.startsWith(<span class=\"string\">\"java.time.\"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">                    || className.startsWith(<span class=\"string\">\"java.util.Optional\"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">                    || className.equals(<span class=\"string\">\"java.util.concurrent.atomic.LongAdder\"</span>)</span><br><span class=\"line\">                    || className.equals(<span class=\"string\">\"java.util.concurrent.atomic.DoubleAdder\"</span>)</span><br><span class=\"line\">                )) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        String[] names = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.LocalDateTime\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.LocalDate\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.LocalTime\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.ZonedDateTime\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.OffsetDateTime\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.OffsetTime\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.ZoneOffset\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.ZoneRegion\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.Period\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.Duration\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.Instant\"</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">/** 如果系统支持JDK8中日期类型， 使用Jdk8DateCodec 序列化 */</span></span><br><span class=\"line\">                                put(Class.forName(name), writer = Jdk8DateCodec.instance);</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        String[] names = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.Optional\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.OptionalDouble\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.OptionalInt\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.OptionalLong\"</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">/** 如果系统支持JDK8中可选类型， 使用OptionalCodec 序列化 */</span></span><br><span class=\"line\">                                put(Class.forName(name), writer = OptionalCodec.instance);</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        String[] names = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.concurrent.atomic.LongAdder\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.concurrent.atomic.DoubleAdder\"</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">/** 如果系统支持JDK8中原子类型， 使用AdderSerializer 序列化 */</span></span><br><span class=\"line\">                                put(Class.forName(name), writer = AdderSerializer.instance);</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    jdk8Error = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!oracleJdbcError) <span class=\"comment\">//</span></span><br><span class=\"line\">                &amp;&amp; className.startsWith(<span class=\"string\">\"oracle.sql.\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String[] names = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">                            <span class=\"string\">\"oracle.sql.DATE\"</span>,</span><br><span class=\"line\">                            <span class=\"string\">\"oracle.sql.TIMESTAMP\"</span></span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 如果系统支持oralcle驱动中日期类型， 使用DateCodec 序列化 */</span></span><br><span class=\"line\">                            put(Class.forName(name), writer = DateCodec.instance);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    oracleJdbcError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!springfoxError) <span class=\"comment\">//</span></span><br><span class=\"line\">                &amp;&amp; className.equals(<span class=\"string\">\"springfox.documentation.spring.web.json.Json\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果系统支持springfox-spring-web框架中Json类型， 使用SwaggerJsonSerializer 序列化 */</span></span><br><span class=\"line\">                    put(Class.forName(<span class=\"string\">\"springfox.documentation.spring.web.json.Json\"</span>),</span><br><span class=\"line\">                            writer = SwaggerJsonSerializer.instance);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    springfoxError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!guavaError) <span class=\"comment\">//</span></span><br><span class=\"line\">                    &amp;&amp; className.startsWith(<span class=\"string\">\"com.google.common.collect.\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String[] names = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">                            <span class=\"string\">\"com.google.common.collect.HashMultimap\"</span>,</span><br><span class=\"line\">                            <span class=\"string\">\"com.google.common.collect.LinkedListMultimap\"</span>,</span><br><span class=\"line\">                            <span class=\"string\">\"com.google.common.collect.ArrayListMultimap\"</span>,</span><br><span class=\"line\">                            <span class=\"string\">\"com.google.common.collect.TreeMultimap\"</span></span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 如果系统支持guava框架中日期类型， 使用GuavaCodec 序列化 */</span></span><br><span class=\"line\">                            put(Class.forName(name), writer = GuavaCodec.instance);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    guavaError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!jsonnullError) &amp;&amp; className.equals(<span class=\"string\">\"net.sf.json.JSONNull\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果系统支持json-lib框架中JSONNull类型， 使用MiscCodec 序列化 */</span></span><br><span class=\"line\">                    put(Class.forName(<span class=\"string\">\"net.sf.json.JSONNull\"</span>), writer = MiscCodec.instance);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    jsonnullError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Class[] interfaces = clazz.getInterfaces();</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class只实现唯一接口，并且接口包含注解，使用AnnotationSerializer 序列化 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (interfaces.length == <span class=\"number\">1</span> &amp;&amp; interfaces[<span class=\"number\">0</span>].isAnnotation()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> AnnotationSerializer.instance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 如果使用了cglib或者javassist动态代理 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TypeUtils.isProxy(clazz)) &#123;</span><br><span class=\"line\">                Class&lt;?&gt; superClazz = clazz.getSuperclass();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 通过父类型查找序列化，父类是真实的类型 */</span></span><br><span class=\"line\">                ObjectSerializer superWriter = getObjectWriter(superClazz);</span><br><span class=\"line\">                put(clazz, superWriter);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> superWriter;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 如果使用了jdk动态代理 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Proxy.isProxyClass(clazz)) &#123;</span><br><span class=\"line\">                Class handlerClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (interfaces.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    handlerClass = interfaces[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Class proxiedInterface : interfaces) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (proxiedInterface.getName().startsWith(<span class=\"string\">\"org.springframework.aop.\"</span>)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (handlerClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            handlerClass = <span class=\"keyword\">null</span>; <span class=\"comment\">// multi-matched</span></span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        handlerClass = proxiedInterface;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (handlerClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 根据class实现接口类型查找序列化 */</span></span><br><span class=\"line\">                    ObjectSerializer superWriter = getObjectWriter(handlerClass);</span><br><span class=\"line\">                    put(clazz, superWriter);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> superWriter;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (create) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 没有精确匹配，使用通用JavaBeanSerializer 序列化(假设不启用asm) */</span></span><br><span class=\"line\">                writer = createJavaBeanSerializer(clazz);</span><br><span class=\"line\">                put(clazz, writer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 尝试在已注册缓存找到特定class的序列化实例 */</span></span><br><span class=\"line\">            writer = serializers.get(clazz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查找具体序列化实例，查找方法基本思想根据class类型或者实现接口类型进行匹配查找。接下来\b针对逐个序列化实现依次分析。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>fastjson序列化主要使用入口就是在<code>JSON.java</code>类中，它提供非常简便和友好的api将java对象转换成json字符串。</p>\n<h3 id=\"JSON成员函数\"><a href=\"#JSON成员函数\" class=\"headerlink\" title=\"JSON成员函数\"></a>JSON成员函数</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *  便捷序列化java对象，序列化对象可以包含任意泛型属性字段，但是不适用本身是泛型的对象。</span></span><br><span class=\"line\"><span class=\"comment\"> *  默认序列化返回字符串，可以使用writeJSONString(Writer, Object, SerializerFeature[])</span></span><br><span class=\"line\"><span class=\"comment\"> *  将序列化字符串输出到指定输出器中</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toJSONString</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 直接调用重载方法，将指定object序列化成json字符串，忽略序列化filter</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> toJSONString(object, emptyFilters);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用便捷接口toJSONString方法，可以将任意java对象序列化为json字符串，内部调用<code>toJSONString(Object, SerializeFilter[], SerializerFeature... )</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toJSONString</span><span class=\"params\">(Object object, SerializeFilter[] filters, SerializerFeature... features)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> toJSONString(object, SerializeConfig.globalInstance, filters, <span class=\"keyword\">null</span>, DEFAULT_GENERATE_FEATURE, features);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续跟踪方法调用到<code>toJSONString(Object, SerializeConfig ,SerializeFilter[], String, int, SerializerFeature... )</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toJSONString</span><span class=\"params\">(Object object,                   <span class=\"comment\">/** 序列化对象    */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  SerializeConfig config,          <span class=\"comment\">/** 全局序列化配置 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  SerializeFilter[] filters,       <span class=\"comment\">/** 序列化拦截器   */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  String dateFormat,               <span class=\"comment\">/** 序列化日期格式 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  <span class=\"keyword\">int</span> defaultFeatures,             <span class=\"comment\">/** 默认序列化特性 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                  SerializerFeature... features)</span> </span>&#123; <span class=\"comment\">/** 自定义序列化特性 */</span></span><br><span class=\"line\">    <span class=\"comment\">/** 初始化序列化writer，用features覆盖defaultFeatures配置 */</span></span><br><span class=\"line\">    SerializeWriter out = <span class=\"keyword\">new</span> SerializeWriter(<span class=\"keyword\">null</span>, defaultFeatures, features);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  初始化JSONSerializer，序列化类型由它委托config查找具体</span></span><br><span class=\"line\"><span class=\"comment\">         *  序列化处理器处理，序列化结果写入out的buffer中</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        JSONSerializer serializer = <span class=\"keyword\">new</span> JSONSerializer(out, config);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dateFormat != <span class=\"keyword\">null</span> &amp;&amp; dateFormat.length() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            serializer.setDateFormat(dateFormat);</span><br><span class=\"line\">            <span class=\"comment\">/** 调用out 重新配置属性 并且打开WriteDateUseDateFormat特性 */</span></span><br><span class=\"line\">            serializer.config(SerializerFeature.WriteDateUseDateFormat, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filters != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (SerializeFilter filter : filters) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 添加拦截器 */</span></span><br><span class=\"line\">                serializer.addFilter(filter);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 使用序列化实例转换对象，查找具体序列化实例委托给config查找 */</span></span><br><span class=\"line\">        serializer.write(object);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> out.toString();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个序列化方法实际并不是真正执行序列化操作，首先\b做序列化\b特性配置，然后追加序列化拦截器，开始执行序列化对象操作委托给了config对象查找。</p>\n<p>我们继续进入<code>serializer.write(object)</code> 查看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果对象为空，直接输出 \"null\" 字符串 */</span></span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; clazz = object.getClass();</span><br><span class=\"line\">    <span class=\"comment\">/** 根据对象的Class类型查找具体序列化实例 */</span></span><br><span class=\"line\">    ObjectSerializer writer = getObjectWriter(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 使用具体serializer实例处理对象 */</span></span><br><span class=\"line\">        writer.write(<span class=\"keyword\">this</span>, object, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(e.getMessage(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"序列化回调接口\"><a href=\"#序列化回调接口\" class=\"headerlink\" title=\"序列化回调接口\"></a>序列化回调接口</h2><h3 id=\"ObjectSerializer序列化接口\"><a href=\"#ObjectSerializer序列化接口\" class=\"headerlink\" title=\"ObjectSerializer序列化接口\"></a>ObjectSerializer序列化接口</h3><p>我们发现真正序列化对象的时候是由具体<code>ObjectSerializer</code>实例完成，我们首先查看一下接口定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, <span class=\"comment\">/** json序列化实例 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           Object object,       <span class=\"comment\">/** 待序列化的对象*/</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           Object fieldName,    <span class=\"comment\">/** 待序列化字段*/</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           Type fieldType,      <span class=\"comment\">/** 待序列化字段类型 */</span></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">           <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>\n<p>当fastjson序列化特定的字段时会回调这个方法。</p>\n<p>我们\b继续\b跟踪<code>writer.write(this, object, null, null, 0)</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果对象为空，直接输出 \"null\" 字符串 */</span></span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; clazz = object.getClass();</span><br><span class=\"line\">    <span class=\"comment\">/** 根据对象的Class类型查找具体序列化实例 */</span></span><br><span class=\"line\">    ObjectSerializer writer = getObjectWriter(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 使用具体serializer实例处理对象 */</span></span><br><span class=\"line\">        writer.write(<span class=\"keyword\">this</span>, object, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(e.getMessage(), e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们发现在方法内部调用<code>getObjectWriter(clazz)</code>根据\b具体类型查找序列化实例，方法内部只有一行调用 <code>config.getObjectWriter(clazz)</code>，让我们更进一步查看委托实现细节<code>com.alibaba.fastjson.serializer.SerializeConfig#getObjectWriter(java.lang.Class&lt;?&gt;)</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ObjectSerializer <span class=\"title\">getObjectWriter</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getObjectWriter(clazz, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>内部又调用<code>com.alibaba.fastjson.serializer.SerializeConfig#getObjectWriter(java.lang.Class&lt;?&gt;, boolean)</code>，这个类实现相对复杂了一些，\b我会按照代码顺序梳理所有序列化实例的要点 :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> ObjectSerializer <span class=\"title\">getObjectWriter</span><span class=\"params\">(Class&lt;?&gt; clazz, <span class=\"keyword\">boolean</span> create)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 首先从内部已经注册查找特定class的序列化实例 */</span></span><br><span class=\"line\">    ObjectSerializer writer = serializers.get(clazz);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">            <span class=\"comment\">/** 使用当前线程类加载器 查找 META-INF/services/AutowiredObjectSerializer.class实现类 */</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> AutowiredObjectSerializer)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果存在，注册到内部serializers缓存中 */</span></span><br><span class=\"line\">                    put(forType, autowired);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// skip</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 尝试在已注册缓存找到特定class的序列化实例 */</span></span><br><span class=\"line\">        writer = serializers.get(clazz);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 使用加载JSON类的加载器 查找 META-INF/services/AutowiredObjectSerializer.class实现类 */</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> ClassLoader classLoader = JSON.class.getClassLoader();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (classLoader != Thread.currentThread().getContextClassLoader()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Object o : ServiceLoader.load(AutowiredObjectSerializer.class, classLoader)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!(o <span class=\"keyword\">instanceof</span> AutowiredObjectSerializer)) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    AutowiredObjectSerializer autowired = (AutowiredObjectSerializer) o;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Type forType : autowired.getAutowiredFor()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 如果存在，注册到内部serializers缓存中 */</span></span><br><span class=\"line\">                        put(forType, autowired);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (ClassCastException ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// skip</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 尝试在已注册缓存找到特定class的序列化实例 */</span></span><br><span class=\"line\">            writer = serializers.get(clazz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        String className = clazz.getName();</span><br><span class=\"line\">        Class&lt;?&gt; superClass;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类Map接口，使用MapSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = MapSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (List.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类List接口，使用ListSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = ListSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类Collection接口，使用CollectionCodec序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = CollectionCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Date.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class继承Date，使用DateCodec序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = DateCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (JSONAware.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类JSONAware接口，使用JSONAwareSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = JSONAwareSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (JSONSerializable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类JSONSerializable接口，使用JSONSerializableSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = JSONSerializableSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (JSONStreamAware.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现类JSONStreamAware接口，使用MiscCodecr序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = MiscCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz.isEnum()) &#123;</span><br><span class=\"line\">            JSONType jsonType = TypeUtils.getAnnotation(clazz, JSONType.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (jsonType != <span class=\"keyword\">null</span> &amp;&amp; jsonType.serializeEnumAsJavaBean()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果是枚举类型，并且启用特性 serializeEnumAsJavaBean</span></span><br><span class=\"line\"><span class=\"comment\">                 *  使用JavaBeanSerializer序列化(假设没有启用asm)</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                put(clazz, writer = createJavaBeanSerializer(clazz));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果是枚举类型，没有启用特性 serializeEnumAsJavaBean</span></span><br><span class=\"line\"><span class=\"comment\">                 *  使用EnumSerializer序列化</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                put(clazz, writer = EnumSerializer.instance);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((superClass = clazz.getSuperclass()) != <span class=\"keyword\">null</span> &amp;&amp; superClass.isEnum()) &#123;</span><br><span class=\"line\">            JSONType jsonType = TypeUtils.getAnnotation(superClass, JSONType.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (jsonType != <span class=\"keyword\">null</span> &amp;&amp; jsonType.serializeEnumAsJavaBean()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果父类是枚举类型，并且启用特性 serializeEnumAsJavaBean</span></span><br><span class=\"line\"><span class=\"comment\">                 *  使用JavaBeanSerializer序列化(假设没有启用asm)</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                put(clazz, writer = createJavaBeanSerializer(clazz));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果父类是枚举类型，没有启用特性 serializeEnumAsJavaBean</span></span><br><span class=\"line\"><span class=\"comment\">                 *  使用EnumSerializer序列化</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                put(clazz, writer = EnumSerializer.instance);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz.isArray()) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; componentType = clazz.getComponentType();</span><br><span class=\"line\">            <span class=\"comment\">/** 如果是数组类型，根据数组实际类型查找序列化实例 */</span></span><br><span class=\"line\">            ObjectSerializer compObjectSerializer = getObjectWriter(componentType);</span><br><span class=\"line\">            put(clazz, writer = <span class=\"keyword\">new</span> ArraySerializer(componentType, compObjectSerializer));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Throwable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 注册通用JavaBeanSerializer序列化处理 Throwable */</span></span><br><span class=\"line\">            SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, <span class=\"keyword\">null</span>, propertyNamingStrategy);</span><br><span class=\"line\">            beanInfo.features |= SerializerFeature.WriteClassName.mask;</span><br><span class=\"line\">            put(clazz, writer = <span class=\"keyword\">new</span> JavaBeanSerializer(beanInfo));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TimeZone.class.isAssignableFrom(clazz) || Map.Entry.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现Map.Entry接口或者继承类TimeZone，使用MiscCodecr序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = MiscCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Appendable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现Appendable接口，使用AppendableSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = AppendableSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Charset.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class继承Charset抽象类，使用ToStringSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = ToStringSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Enumeration.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现Enumeration接口，使用EnumerationSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = EnumerationSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Calendar.class.isAssignableFrom(clazz)</span><br><span class=\"line\">                || XMLGregorianCalendar.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class继承类Calendar或者XMLGregorianCalendar，使用CalendarCodec序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = CalendarCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Clob.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现Clob接口，使用ClobSeriliazer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = ClobSeriliazer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TypeUtils.isPath(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现java.nio.file.Path接口，使用ToStringSerializer序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = ToStringSerializer.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Iterator.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class实现Iterator接口，使用MiscCodec序列化 */</span></span><br><span class=\"line\">            put(clazz, writer = MiscCodec.instance);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             *  如果class的name是\"java.awt.\"开头 并且</span></span><br><span class=\"line\"><span class=\"comment\">             *  继承 Point、Rectangle、Font或者Color 其中之一</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (className.startsWith(<span class=\"string\">\"java.awt.\"</span>)</span><br><span class=\"line\">                &amp;&amp; AwtCodec.support(clazz)</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// awt</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!awtError) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        String[] names = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">                                <span class=\"string\">\"java.awt.Color\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.awt.Font\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.awt.Point\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.awt.Rectangle\"</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">/** 如果系统支持4中类型， 使用AwtCodec 序列化 */</span></span><br><span class=\"line\">                                put(Class.forName(name), writer = AwtCodec.instance);</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                        awtError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                        <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// jdk8</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!jdk8Error) <span class=\"comment\">//</span></span><br><span class=\"line\">                &amp;&amp; (className.startsWith(<span class=\"string\">\"java.time.\"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">                    || className.startsWith(<span class=\"string\">\"java.util.Optional\"</span>) <span class=\"comment\">//</span></span><br><span class=\"line\">                    || className.equals(<span class=\"string\">\"java.util.concurrent.atomic.LongAdder\"</span>)</span><br><span class=\"line\">                    || className.equals(<span class=\"string\">\"java.util.concurrent.atomic.DoubleAdder\"</span>)</span><br><span class=\"line\">                )) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        String[] names = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.LocalDateTime\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.LocalDate\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.LocalTime\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.ZonedDateTime\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.OffsetDateTime\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.OffsetTime\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.ZoneOffset\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.ZoneRegion\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.Period\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.Duration\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.time.Instant\"</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">/** 如果系统支持JDK8中日期类型， 使用Jdk8DateCodec 序列化 */</span></span><br><span class=\"line\">                                put(Class.forName(name), writer = Jdk8DateCodec.instance);</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        String[] names = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.Optional\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.OptionalDouble\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.OptionalInt\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.OptionalLong\"</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">/** 如果系统支持JDK8中可选类型， 使用OptionalCodec 序列化 */</span></span><br><span class=\"line\">                                put(Class.forName(name), writer = OptionalCodec.instance);</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        String[] names = <span class=\"keyword\">new</span> String[]&#123;</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.concurrent.atomic.LongAdder\"</span>,</span><br><span class=\"line\">                                <span class=\"string\">\"java.util.concurrent.atomic.DoubleAdder\"</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">/** 如果系统支持JDK8中原子类型， 使用AdderSerializer 序列化 */</span></span><br><span class=\"line\">                                put(Class.forName(name), writer = AdderSerializer.instance);</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    jdk8Error = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!oracleJdbcError) <span class=\"comment\">//</span></span><br><span class=\"line\">                &amp;&amp; className.startsWith(<span class=\"string\">\"oracle.sql.\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String[] names = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">                            <span class=\"string\">\"oracle.sql.DATE\"</span>,</span><br><span class=\"line\">                            <span class=\"string\">\"oracle.sql.TIMESTAMP\"</span></span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 如果系统支持oralcle驱动中日期类型， 使用DateCodec 序列化 */</span></span><br><span class=\"line\">                            put(Class.forName(name), writer = DateCodec.instance);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    oracleJdbcError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!springfoxError) <span class=\"comment\">//</span></span><br><span class=\"line\">                &amp;&amp; className.equals(<span class=\"string\">\"springfox.documentation.spring.web.json.Json\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果系统支持springfox-spring-web框架中Json类型， 使用SwaggerJsonSerializer 序列化 */</span></span><br><span class=\"line\">                    put(Class.forName(<span class=\"string\">\"springfox.documentation.spring.web.json.Json\"</span>),</span><br><span class=\"line\">                            writer = SwaggerJsonSerializer.instance);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    springfoxError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!guavaError) <span class=\"comment\">//</span></span><br><span class=\"line\">                    &amp;&amp; className.startsWith(<span class=\"string\">\"com.google.common.collect.\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    String[] names = <span class=\"keyword\">new</span> String[] &#123;</span><br><span class=\"line\">                            <span class=\"string\">\"com.google.common.collect.HashMultimap\"</span>,</span><br><span class=\"line\">                            <span class=\"string\">\"com.google.common.collect.LinkedListMultimap\"</span>,</span><br><span class=\"line\">                            <span class=\"string\">\"com.google.common.collect.ArrayListMultimap\"</span>,</span><br><span class=\"line\">                            <span class=\"string\">\"com.google.common.collect.TreeMultimap\"</span></span><br><span class=\"line\">                    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (name.equals(className)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 如果系统支持guava框架中日期类型， 使用GuavaCodec 序列化 */</span></span><br><span class=\"line\">                            put(Class.forName(name), writer = GuavaCodec.instance);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    guavaError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!jsonnullError) &amp;&amp; className.equals(<span class=\"string\">\"net.sf.json.JSONNull\"</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果系统支持json-lib框架中JSONNull类型， 使用MiscCodec 序列化 */</span></span><br><span class=\"line\">                    put(Class.forName(<span class=\"string\">\"net.sf.json.JSONNull\"</span>), writer = MiscCodec.instance);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// skip</span></span><br><span class=\"line\">                    jsonnullError = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Class[] interfaces = clazz.getInterfaces();</span><br><span class=\"line\">            <span class=\"comment\">/** 如果class只实现唯一接口，并且接口包含注解，使用AnnotationSerializer 序列化 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (interfaces.length == <span class=\"number\">1</span> &amp;&amp; interfaces[<span class=\"number\">0</span>].isAnnotation()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> AnnotationSerializer.instance;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 如果使用了cglib或者javassist动态代理 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (TypeUtils.isProxy(clazz)) &#123;</span><br><span class=\"line\">                Class&lt;?&gt; superClazz = clazz.getSuperclass();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 通过父类型查找序列化，父类是真实的类型 */</span></span><br><span class=\"line\">                ObjectSerializer superWriter = getObjectWriter(superClazz);</span><br><span class=\"line\">                put(clazz, superWriter);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> superWriter;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 如果使用了jdk动态代理 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Proxy.isProxyClass(clazz)) &#123;</span><br><span class=\"line\">                Class handlerClass = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (interfaces.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                    handlerClass = interfaces[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Class proxiedInterface : interfaces) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (proxiedInterface.getName().startsWith(<span class=\"string\">\"org.springframework.aop.\"</span>)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (handlerClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            handlerClass = <span class=\"keyword\">null</span>; <span class=\"comment\">// multi-matched</span></span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        handlerClass = proxiedInterface;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (handlerClass != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 根据class实现接口类型查找序列化 */</span></span><br><span class=\"line\">                    ObjectSerializer superWriter = getObjectWriter(handlerClass);</span><br><span class=\"line\">                    put(clazz, superWriter);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> superWriter;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (create) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 没有精确匹配，使用通用JavaBeanSerializer 序列化(假设不启用asm) */</span></span><br><span class=\"line\">                writer = createJavaBeanSerializer(clazz);</span><br><span class=\"line\">                put(clazz, writer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 尝试在已注册缓存找到特定class的序列化实例 */</span></span><br><span class=\"line\">            writer = serializers.get(clazz);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> writer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查找具体序列化实例，查找方法基本思想根据class类型或者实现接口类型进行匹配查找。接下来\b针对逐个序列化实现依次分析。</p>\n"},{"title":"序列化（五）","subtitle":"内部注册的序列化，fastjson针对常用的类型已经注册了序列化实现方案：","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:07:14.000Z","_content":"\n## 序列化回调接口实现分析\n\n### 内部注册的序列化\n\nfastjson针对常用的类型已经注册了序列化实现方案：\n\n| 注册的类型 | 序列化实例 | 是否支持序列化 | 是否支持反序列化 |\n| :--- | :--- | :---: | :---: |\n| Boolean | BooleanCodec | 是 | 是 |\n| Character | CharacterCodec | 是 | 是 |\n| Byte | IntegerCodec | 是 | 是 |\n| Short | IntegerCodec | 是 | 是 |\n| Integer | IntegerCodec | 是 | 是 |\n| Long | LongCodec | 是 | 是 |\n| Float | FloatCodec | 是 | 是 |\n| Double | DoubleSerializer | 是 | - |\n| BigDecimal | BigDecimalCodec | 是 | 是 |\n| BigInteger | BigIntegerCodec | 是 | 是 |\n| String | StringCodec | 是 | 是 |\n| byte\\[\\] | PrimitiveArraySerializer | 是 | - |\n| short\\[\\] | PrimitiveArraySerializer | 是 | - |\n| int\\[\\] | PrimitiveArraySerializer | 是 | - |\n| long\\[\\] | PrimitiveArraySerializer | 是 | - |\n| float\\[\\] | PrimitiveArraySerializer | 是 | - |\n| double\\[\\] | PrimitiveArraySerializer | 是 | - |\n| boolean\\[\\] | PrimitiveArraySerializer | 是 | - |\n| char\\[\\] | PrimitiveArraySerializer | 是 | - |\n| Object\\[\\] | ObjectArrayCodec | 是 | 是 |\n| Class | MiscCodec | 是 | 是 |\n| SimpleDateFormat | MiscCodec | 是 | 是 |\n| Currency | MiscCodec | 是 | 是 |\n| TimeZone | MiscCodec | 是 | 是 |\n| InetAddress | MiscCodec | 是 | 是 |\n| Inet4Address | MiscCodec | 是 | 是 |\n| Inet6Address | MiscCodec | 是 | 是 |\n| InetSocketAddress | MiscCodec | 是 | 是 |\n| File | MiscCodec | 是 | 是 |\n| Appendable | AppendableSerializer | 是 | - |\n| StringBuffer | AppendableSerializer | 是 | - |\n| StringBuilder | AppendableSerializer | 是 | - |\n| Charset | ToStringSerializer | 是 | - |\n| Pattern | ToStringSerializer | 是 | - |\n| Locale | ToStringSerializer | 是 | - |\n| URI | ToStringSerializer | 是 | - |\n| URL | ToStringSerializer | 是 | - |\n| UUID | ToStringSerializer | 是 | - |\n| AtomicBoolean | AtomicCodec | 是 | 是 |\n| AtomicInteger | AtomicCodec | 是 | 是 |\n| AtomicLong | AtomicCodec | 是 | 是 |\n| AtomicReference | ReferenceCodec | 是 | 是 |\n| AtomicIntegerArray | AtomicCodec | 是 | 是 |\n| AtomicLongArray | AtomicCodec | 是 | 是 |\n| WeakReference | ReferenceCodec | 是 | 是 |\n| SoftReference | ReferenceCodec | 是 | 是 |\n| LinkedList | CollectionCodec | 是 | 是 |\n\n### BooleanCodec序列化\n\n其实理解了前面分析`SerializeWriter`, 接下来的内容比较容易理解, `BooleanCodec` 序列化实现 ：\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是boolean值, 如果为null,\n         *  并且序列化开启WriteNullBooleanAsFalse特性, 输出false\n         */\n        Boolean value = (Boolean) object;\n        if (value == null) {\n            out.writeNull(SerializerFeature.WriteNullBooleanAsFalse);\n            return;\n        }\n\n        if (value.booleanValue()) {\n            out.write(\"true\");\n        } else {\n            out.write(\"false\");\n        }\n    }\n```\n\n`BooleanCodec`序列化实现\b\b主要判断是否开启如果为null值是否输出false，否则输出boolean字面量值。\n\n### CharacterCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        Character value = (Character) object;\n        if (value == null) {\n            /** 字符串为空，输出空字符串 */\n            out.writeString(\"\");\n            return;\n        }\n\n        char c = value.charValue();\n        if (c == 0) {\n            /** 空白字符，输出unicode空格字符 */\n            out.writeString(\"\\u0000\");\n        } else {\n            /** 输出字符串值 */\n            out.writeString(value.toString());\n        }\n    }\n```\n### IntegerCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        Number value = (Number) object;\n\n        /** 当前object是整形值, 如果为null,\n         *  并且序列化开启WriteNullNumberAsZero特性, 输出0\n         */\n        if (value == null) {\n            out.writeNull(SerializerFeature.WriteNullNumberAsZero);\n            return;\n        }\n\n        /** 判断整形或者长整型，直接输出 */\n        if (object instanceof Long) {\n            out.writeLong(value.longValue());\n        } else {\n            out.writeInt(value.intValue());\n        }\n\n        /** 如果开启WriteClassName特性，输出具体值类型 */\n        if (out.isEnabled(SerializerFeature.WriteClassName)) {\n            Class<?> clazz = value.getClass();\n            if (clazz == Byte.class) {\n                out.write('B');\n            } else if (clazz == Short.class) {\n                out.write('S');\n            }\n        }\n    }\n```\n\n### LongCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是长整形值, 如果为null,\n         *  并且序列化开启WriteNullNumberAsZero特性, 输出0\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullNumberAsZero);\n        } else {\n            long value = ((Long) object).longValue();\n            out.writeLong(value);\n\n            /** 如果长整型值范围和整型相同，显示添加L 标识为long */\n            if (out.isEnabled(SerializerFeature.WriteClassName)\n                && value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE\n                && fieldType != Long.class\n                && fieldType != long.class) {\n                out.write('L');\n            }\n        }\n    }\n```\n\n`Long`类型序列化会特殊标识值落在整数范围内，如果开启`WriteClassName`序列化特性，会追加L字符。\n\n\n### FloatCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是float值, 如果为null,\n         *  并且序列化开启WriteNullNumberAsZero特性, 输出0\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullNumberAsZero);\n            return;\n        }\n\n        float floatValue = ((Float) object).floatValue();\n        if (decimalFormat != null) {\n            /** 转换一下浮点数值格式 */\n            String floatText = decimalFormat.format(floatValue);\n            out.write(floatText);\n        } else {\n            out.writeFloat(floatValue, true);\n        }\n    }\n```\n\n### BigDecimalCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是BigDecimal值, 如果为null,\n         *  并且序列化开启WriteNullNumberAsZero特性, 输出0\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullNumberAsZero);\n        } else {\n            BigDecimal val = (BigDecimal) object;\n\n            String outText;\n            /** 如果序列化开启WriteBigDecimalAsPlain特性，搞定度输出不会包含指数e */\n            if (out.isEnabled(SerializerFeature.WriteBigDecimalAsPlain)) {\n                outText = val.toPlainString();\n            } else {\n                outText = val.toString();\n            }\n            out.write(outText);\n\n            if (out.isEnabled(SerializerFeature.WriteClassName) && fieldType != BigDecimal.class && val.scale() == 0) {\n                out.write('.');\n            }\n        }\n    }\n```\n\n### BigIntegerCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是BigInteger值, 如果为null,\n         *  并且序列化开启WriteNullNumberAsZero特性, 输出0\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullNumberAsZero);\n            return;\n        }\n        \n        BigInteger val = (BigInteger) object;\n        out.write(val.toString());\n    }\n```\n\n### StringCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, String value) {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是string值, 如果为null,\n         *  并且序列化开启WriteNullStringAsEmpty特性, 输出空串\"\"\n         */\n        if (value == null) {\n            out.writeNull(SerializerFeature.WriteNullStringAsEmpty);\n            return;\n        }\n\n        out.writeString(value);\n    }\n```\n\n### PrimitiveArraySerializer序列化\n\n```java\n    public final void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n        \n        if (object == null) {\n            /** 当前object是数组值, 如果为null,\n             *  并且序列化开启WriteNullListAsEmpty特性, 输出空串\"\"\n             */\n            out.writeNull(SerializerFeature.WriteNullListAsEmpty);\n            return;\n        }\n\n        /** 循环写int数组 */\n        if (object instanceof int[]) {\n            int[] array = (int[]) object;\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                out.writeInt(array[i]);\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 循环写short数组 */\n        if (object instanceof short[]) {\n            short[] array = (short[]) object;\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                out.writeInt(array[i]);\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 循环写long数组 */\n        if (object instanceof long[]) {\n            long[] array = (long[]) object;\n\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                out.writeLong(array[i]);\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 循环写boolean数组 */\n        if (object instanceof boolean[]) {\n            boolean[] array = (boolean[]) object;\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                out.write(array[i]);\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 循环写float数组 */\n        if (object instanceof float[]) {\n            float[] array = (float[]) object;\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                \n                float item = array[i];\n                if (Float.isNaN(item)) {\n                    out.writeNull();\n                } else {\n                    out.append(Float.toString(item));\n                }\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 循环写double数组 */\n        if (object instanceof double[]) {\n            double[] array = (double[]) object;\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                \n                double item = array[i];\n                if (Double.isNaN(item)) {\n                    out.writeNull();\n                } else {\n                    out.append(Double.toString(item));\n                }\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 写字节数组 */\n        if (object instanceof byte[]) {\n            byte[] array = (byte[]) object;\n            out.writeByteArray(array);\n            return;\n        }\n\n        /** char数组当做字符串 */\n        char[] chars = (char[]) object;\n        out.writeString(chars);\n    }\n```\n\n### ObjectArrayCodec序列化\n\n```java\n    public final void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features)\n                                                                                                       throws IOException {\n        SerializeWriter out = serializer.out;\n\n        Object[] array = (Object[]) object;\n\n        /** 当前object是数组对象, 如果为null,\n         *  并且序列化开启WriteNullListAsEmpty特性, 输出空串[]\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullListAsEmpty);\n            return;\n        }\n\n        int size = array.length;\n\n        int end = size - 1;\n\n        /** 当前object是数组对象, 如果为没有元素, 输出空串[] */\n        if (end == -1) {\n            out.append(\"[]\");\n            return;\n        }\n\n        SerialContext context = serializer.context;\n        serializer.setContext(context, object, fieldName, 0);\n\n        try {\n            Class<?> preClazz = null;\n            ObjectSerializer preWriter = null;\n            out.append('[');\n\n            /**\n             *  如果开启json格式化，循环输出数组对象，\n             *  会根据数组元素class类型查找序列化实例输出\n             */\n            if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n                serializer.incrementIndent();\n                serializer.println();\n                for (int i = 0; i < size; ++i) {\n                    if (i != 0) {\n                        out.write(',');\n                        serializer.println();\n                    }\n                    serializer.write(array[i]);\n                }\n                serializer.decrementIdent();\n                serializer.println();\n                out.write(']');\n                return;\n            }\n\n            for (int i = 0; i < end; ++i) {\n                Object item = array[i];\n\n                if (item == null) {\n                    out.append(\"null,\");\n                } else {\n                    if (serializer.containsReference(item)) {\n                        serializer.writeReference(item);\n                    } else {\n                        Class<?> clazz = item.getClass();\n\n                        /** 如果当前序列化元素和前一次class类型相同，避免再一次class类型查找序列化实例 */\n                        if (clazz == preClazz) {\n                            preWriter.write(serializer, item, null, null, 0);\n                        } else {\n                            preClazz = clazz;\n                            /** 查找数组元素class类型的序列化器 序列化item */\n                            preWriter = serializer.getObjectWriter(clazz);\n                            preWriter.write(serializer, item, null, null, 0);\n                        }\n                    }\n                    out.append(',');\n                }\n            }\n\n            Object item = array[end];\n\n            if (item == null) {\n                out.append(\"null]\");\n            } else {\n                if (serializer.containsReference(item)) {\n                    serializer.writeReference(item);\n                } else {\n                    serializer.writeWithFieldName(item, end);\n                }\n                out.append(']');\n            }\n        } finally {\n            serializer.context = context;\n        }\n    }\n```\n\n`ObjectArrayCodec`序列化主要判断是否开启格式化输出json，\b如果是输出添加适当的缩进。针对数组元素不一样会根据元素class类型查找具体的序列化器输出，这里优化了如果元素相同的元素避免冗余的\b查找序列化器。\n\n### MiscCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,\n                      int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        if (object == null) {\n            out.writeNull();\n            return;\n        }\n\n        Class<?> objClass = object.getClass();\n\n        String strVal;\n        if (objClass == SimpleDateFormat.class) {\n            String pattern = ((SimpleDateFormat) object).toPattern();\n\n            /** 输出SimpleDateFormat类型的类型 */\n            if (out.isEnabled(SerializerFeature.WriteClassName)) {\n                if (object.getClass() != fieldType) {\n                    out.write('{');\n                    out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n                    serializer.write(object.getClass().getName());\n                    out.writeFieldValue(',', \"val\", pattern);\n                    out.write('}');\n                    return;\n                }\n            }\n\n            /** 转换SimpleDateFormat对象成pattern字符串 */\n            strVal = pattern;\n        } else if (objClass == Class.class) {\n            Class<?> clazz = (Class<?>) object;\n            /** 转换Class对象成name字符串 */\n            strVal = clazz.getName();\n        } else if (objClass == InetSocketAddress.class) {\n            InetSocketAddress address = (InetSocketAddress) object;\n\n            InetAddress inetAddress = address.getAddress();\n            /** 转换InetSocketAddress对象成地址和端口字符串 */\n            out.write('{');\n            if (inetAddress != null) {\n                out.writeFieldName(\"address\");\n                serializer.write(inetAddress);\n                out.write(',');\n            }\n            out.writeFieldName(\"port\");\n            out.writeInt(address.getPort());\n            out.write('}');\n            return;\n        } else if (object instanceof File) {\n            /** 转换File对象成文件路径字符串 */\n            strVal = ((File) object).getPath();\n        } else if (object instanceof InetAddress) {\n            /** 转换InetAddress对象成主机地址字符串 */\n            strVal = ((InetAddress) object).getHostAddress();\n        } else if (object instanceof TimeZone) {\n            TimeZone timeZone = (TimeZone) object;\n            /** 转换TimeZone对象成时区id字符串 */\n            strVal = timeZone.getID();\n        } else if (object instanceof Currency) {\n            Currency currency = (Currency) object;\n            /** 转换Currency对象成币别编码字符串 */\n            strVal = currency.getCurrencyCode();\n        } else if (object instanceof JSONStreamAware) {\n            JSONStreamAware aware = (JSONStreamAware) object;\n            aware.writeJSONString(out);\n            return;\n        } else if (object instanceof Iterator) {\n            Iterator<?> it = ((Iterator<?>) object);\n            /** 迭代器转换成数组码字符串 [,,,] */\n            writeIterator(serializer, out, it);\n            return;\n        } else if (object instanceof Iterable) {\n            /** 迭代器转换成数组码字符串 [,,,] */\n            Iterator<?> it = ((Iterable<?>) object).iterator();\n            writeIterator(serializer, out, it);\n            return;\n        } else if (object instanceof Map.Entry) {\n            Map.Entry entry = (Map.Entry) object;\n            Object objKey = entry.getKey();\n            Object objVal = entry.getValue();\n\n            /** 输出map的Entry值 */\n            if (objKey instanceof String) {\n                String key = (String) objKey;\n\n                if (objVal instanceof String) {\n                    String value = (String) objVal;\n                    out.writeFieldValueStringWithDoubleQuoteCheck('{', key, value);\n                } else {\n                    out.write('{');\n                    out.writeFieldName(key);\n                    /** 根据value的class类型查找序列化器并输出 */\n                    serializer.write(objVal);\n                }\n            } else {\n                /** 根据key、value的class类型查找序列化器并输出 */\n                out.write('{');\n                serializer.write(objKey);\n                out.write(':');\n                serializer.write(objVal);\n            }\n            out.write('}');\n            return;\n        } else if (object.getClass().getName().equals(\"net.sf.json.JSONNull\")) {\n            out.writeNull();\n            return;\n        } else {\n            throw new JSONException(\"not support class : \" + objClass);\n        }\n\n        out.writeString(strVal);\n    }\n```\n\n`MiscCodec`序列化的主要思想是吧JDK内部常用的对象简化处理，比如TimeZone只保留id输出，\b极大地降低了输出字节大小。\n\n### AppendableSerializer序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n\n        /** 当前object实现了Appendable接口, 如果为null,\n         *  并且序列化开启WriteNullStringAsEmpty特性, 输出空串\"\"\n         */\n        if (object == null) {\n            SerializeWriter out = serializer.out;\n            out.writeNull(SerializerFeature.WriteNullStringAsEmpty);\n            return;\n        }\n\n        /** 输出对象toString结果作为json串 */\n        serializer.write(object.toString());\n    }\n```\n\n### ToStringSerializer序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,\n                      int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 如果为null, 输出空串\"null\" */\n        if (object == null) {\n            out.writeNull();\n            return;\n        }\n\n        /** 输出对象toString结果作为json串 */\n        String strVal = object.toString();\n        out.writeString(strVal);\n    }\n```\n\n### AtomicCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n        \n        if (object instanceof AtomicInteger) {\n            AtomicInteger val = (AtomicInteger) object;\n            /** 获取整数输出 */\n            out.writeInt(val.get());\n            return;\n        }\n        \n        if (object instanceof AtomicLong) {\n            AtomicLong val = (AtomicLong) object;\n            /** 获取长整数输出 */\n            out.writeLong(val.get());\n            return;\n        }\n        \n        if (object instanceof AtomicBoolean) {\n            AtomicBoolean val = (AtomicBoolean) object;\n            /** 获取boolean值输出 */\n            out.append(val.get() ? \"true\" : \"false\");\n            return;\n        }\n\n        /** 当前object是原子数组类型, 如果为null，输出[] */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullListAsEmpty);\n            return;\n        }\n\n        /** 遍历AtomicIntegerArray，输出int数组类型 */\n        if (object instanceof AtomicIntegerArray) {\n            AtomicIntegerArray array = (AtomicIntegerArray) object;\n            int len = array.length();\n            out.write('[');\n            for (int i = 0; i < len; ++i) {\n                int val = array.get(i);\n                if (i != 0) {\n                    out.write(',');\n                }\n                out.writeInt(val);\n            }\n            out.write(']');\n            \n            return;\n        }\n\n        /** 遍历AtomicLongArray，输出long数组类型 */\n        AtomicLongArray array = (AtomicLongArray) object;\n        int len = array.length();\n        out.write('[');\n        for (int i = 0; i < len; ++i) {\n            long val = array.get(i);\n            if (i != 0) {\n                out.write(',');\n            }\n            out.writeLong(val);\n        }\n        out.write(']');\n    }\n```\n\n### ReferenceCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        Object item;\n        /** 当前object是Reference类型,\n         *  调用get()查找对应的class序列化器输出\n         */\n        if (object instanceof AtomicReference) {\n            AtomicReference val = (AtomicReference) object;\n            item = val.get();\n        } else {\n            item = ((Reference) object).get();\n        }\n        serializer.write(item);\n    }\n```\n\n### CollectionCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是集合对象, 如果为null,\n         *  并且序列化开启WriteNullListAsEmpty特性, 输出空串[]\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullListAsEmpty);\n            return;\n        }\n\n        Type elementType = null;\n        if (out.isEnabled(SerializerFeature.WriteClassName)\n                || SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName))\n        {\n            /** 获取字段泛型类型 */\n            elementType = TypeUtils.getCollectionItemType(fieldType);\n        }\n\n        Collection<?> collection = (Collection<?>) object;\n\n        SerialContext context = serializer.context;\n        serializer.setContext(context, object, fieldName, 0);\n\n        if (out.isEnabled(SerializerFeature.WriteClassName)) {\n            if (HashSet.class == collection.getClass()) {\n                out.append(\"Set\");\n            } else if (TreeSet.class == collection.getClass()) {\n                out.append(\"TreeSet\");\n            }\n        }\n\n        try {\n            int i = 0;\n            out.append('[');\n            for (Object item : collection) {\n\n                if (i++ != 0) {\n                    out.append(',');\n                }\n\n                if (item == null) {\n                    out.writeNull();\n                    continue;\n                }\n\n                Class<?> clazz = item.getClass();\n\n                /** 获取整形类型值，输出 */\n                if (clazz == Integer.class) {\n                    out.writeInt(((Integer) item).intValue());\n                    continue;\n                }\n\n                /** 获取整形长类型值，输出并添加L标识(如果开启WriteClassName特性) */\n                if (clazz == Long.class) {\n                    out.writeLong(((Long) item).longValue());\n\n                    if (out.isEnabled(SerializerFeature.WriteClassName)) {\n                        out.write('L');\n                    }\n                    continue;\n                }\n\n                /** 根据集合类型查找序列化实例处理，JavaBeanSerializer后面单独分析 */\n                ObjectSerializer itemSerializer = serializer.getObjectWriter(clazz);\n                if (SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)\n                        && itemSerializer instanceof JavaBeanSerializer) {\n                    JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) itemSerializer;\n                    javaBeanSerializer.writeNoneASM(serializer, item, i - 1, elementType, features);\n                } else {\n                    itemSerializer.write(serializer, item, i - 1, elementType, features);\n                }\n            }\n            out.append(']');\n        } finally {\n            serializer.context = context;\n        }\n    }\n```\n","source":"_posts/Fastjson源码解析-序列化(五)-json内部注册序列化解析.md","raw":"---\ntitle: 序列化（五）\nsubtitle:  内部注册的序列化，fastjson针对常用的类型已经注册了序列化实现方案：\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n- Fastjson源码解析\ncategories:\n- Fastjson源码解析\ndate: 2018-09-30 23:07:14\n---\n\n## 序列化回调接口实现分析\n\n### 内部注册的序列化\n\nfastjson针对常用的类型已经注册了序列化实现方案：\n\n| 注册的类型 | 序列化实例 | 是否支持序列化 | 是否支持反序列化 |\n| :--- | :--- | :---: | :---: |\n| Boolean | BooleanCodec | 是 | 是 |\n| Character | CharacterCodec | 是 | 是 |\n| Byte | IntegerCodec | 是 | 是 |\n| Short | IntegerCodec | 是 | 是 |\n| Integer | IntegerCodec | 是 | 是 |\n| Long | LongCodec | 是 | 是 |\n| Float | FloatCodec | 是 | 是 |\n| Double | DoubleSerializer | 是 | - |\n| BigDecimal | BigDecimalCodec | 是 | 是 |\n| BigInteger | BigIntegerCodec | 是 | 是 |\n| String | StringCodec | 是 | 是 |\n| byte\\[\\] | PrimitiveArraySerializer | 是 | - |\n| short\\[\\] | PrimitiveArraySerializer | 是 | - |\n| int\\[\\] | PrimitiveArraySerializer | 是 | - |\n| long\\[\\] | PrimitiveArraySerializer | 是 | - |\n| float\\[\\] | PrimitiveArraySerializer | 是 | - |\n| double\\[\\] | PrimitiveArraySerializer | 是 | - |\n| boolean\\[\\] | PrimitiveArraySerializer | 是 | - |\n| char\\[\\] | PrimitiveArraySerializer | 是 | - |\n| Object\\[\\] | ObjectArrayCodec | 是 | 是 |\n| Class | MiscCodec | 是 | 是 |\n| SimpleDateFormat | MiscCodec | 是 | 是 |\n| Currency | MiscCodec | 是 | 是 |\n| TimeZone | MiscCodec | 是 | 是 |\n| InetAddress | MiscCodec | 是 | 是 |\n| Inet4Address | MiscCodec | 是 | 是 |\n| Inet6Address | MiscCodec | 是 | 是 |\n| InetSocketAddress | MiscCodec | 是 | 是 |\n| File | MiscCodec | 是 | 是 |\n| Appendable | AppendableSerializer | 是 | - |\n| StringBuffer | AppendableSerializer | 是 | - |\n| StringBuilder | AppendableSerializer | 是 | - |\n| Charset | ToStringSerializer | 是 | - |\n| Pattern | ToStringSerializer | 是 | - |\n| Locale | ToStringSerializer | 是 | - |\n| URI | ToStringSerializer | 是 | - |\n| URL | ToStringSerializer | 是 | - |\n| UUID | ToStringSerializer | 是 | - |\n| AtomicBoolean | AtomicCodec | 是 | 是 |\n| AtomicInteger | AtomicCodec | 是 | 是 |\n| AtomicLong | AtomicCodec | 是 | 是 |\n| AtomicReference | ReferenceCodec | 是 | 是 |\n| AtomicIntegerArray | AtomicCodec | 是 | 是 |\n| AtomicLongArray | AtomicCodec | 是 | 是 |\n| WeakReference | ReferenceCodec | 是 | 是 |\n| SoftReference | ReferenceCodec | 是 | 是 |\n| LinkedList | CollectionCodec | 是 | 是 |\n\n### BooleanCodec序列化\n\n其实理解了前面分析`SerializeWriter`, 接下来的内容比较容易理解, `BooleanCodec` 序列化实现 ：\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是boolean值, 如果为null,\n         *  并且序列化开启WriteNullBooleanAsFalse特性, 输出false\n         */\n        Boolean value = (Boolean) object;\n        if (value == null) {\n            out.writeNull(SerializerFeature.WriteNullBooleanAsFalse);\n            return;\n        }\n\n        if (value.booleanValue()) {\n            out.write(\"true\");\n        } else {\n            out.write(\"false\");\n        }\n    }\n```\n\n`BooleanCodec`序列化实现\b\b主要判断是否开启如果为null值是否输出false，否则输出boolean字面量值。\n\n### CharacterCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        Character value = (Character) object;\n        if (value == null) {\n            /** 字符串为空，输出空字符串 */\n            out.writeString(\"\");\n            return;\n        }\n\n        char c = value.charValue();\n        if (c == 0) {\n            /** 空白字符，输出unicode空格字符 */\n            out.writeString(\"\\u0000\");\n        } else {\n            /** 输出字符串值 */\n            out.writeString(value.toString());\n        }\n    }\n```\n### IntegerCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        Number value = (Number) object;\n\n        /** 当前object是整形值, 如果为null,\n         *  并且序列化开启WriteNullNumberAsZero特性, 输出0\n         */\n        if (value == null) {\n            out.writeNull(SerializerFeature.WriteNullNumberAsZero);\n            return;\n        }\n\n        /** 判断整形或者长整型，直接输出 */\n        if (object instanceof Long) {\n            out.writeLong(value.longValue());\n        } else {\n            out.writeInt(value.intValue());\n        }\n\n        /** 如果开启WriteClassName特性，输出具体值类型 */\n        if (out.isEnabled(SerializerFeature.WriteClassName)) {\n            Class<?> clazz = value.getClass();\n            if (clazz == Byte.class) {\n                out.write('B');\n            } else if (clazz == Short.class) {\n                out.write('S');\n            }\n        }\n    }\n```\n\n### LongCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是长整形值, 如果为null,\n         *  并且序列化开启WriteNullNumberAsZero特性, 输出0\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullNumberAsZero);\n        } else {\n            long value = ((Long) object).longValue();\n            out.writeLong(value);\n\n            /** 如果长整型值范围和整型相同，显示添加L 标识为long */\n            if (out.isEnabled(SerializerFeature.WriteClassName)\n                && value <= Integer.MAX_VALUE && value >= Integer.MIN_VALUE\n                && fieldType != Long.class\n                && fieldType != long.class) {\n                out.write('L');\n            }\n        }\n    }\n```\n\n`Long`类型序列化会特殊标识值落在整数范围内，如果开启`WriteClassName`序列化特性，会追加L字符。\n\n\n### FloatCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是float值, 如果为null,\n         *  并且序列化开启WriteNullNumberAsZero特性, 输出0\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullNumberAsZero);\n            return;\n        }\n\n        float floatValue = ((Float) object).floatValue();\n        if (decimalFormat != null) {\n            /** 转换一下浮点数值格式 */\n            String floatText = decimalFormat.format(floatValue);\n            out.write(floatText);\n        } else {\n            out.writeFloat(floatValue, true);\n        }\n    }\n```\n\n### BigDecimalCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是BigDecimal值, 如果为null,\n         *  并且序列化开启WriteNullNumberAsZero特性, 输出0\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullNumberAsZero);\n        } else {\n            BigDecimal val = (BigDecimal) object;\n\n            String outText;\n            /** 如果序列化开启WriteBigDecimalAsPlain特性，搞定度输出不会包含指数e */\n            if (out.isEnabled(SerializerFeature.WriteBigDecimalAsPlain)) {\n                outText = val.toPlainString();\n            } else {\n                outText = val.toString();\n            }\n            out.write(outText);\n\n            if (out.isEnabled(SerializerFeature.WriteClassName) && fieldType != BigDecimal.class && val.scale() == 0) {\n                out.write('.');\n            }\n        }\n    }\n```\n\n### BigIntegerCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是BigInteger值, 如果为null,\n         *  并且序列化开启WriteNullNumberAsZero特性, 输出0\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullNumberAsZero);\n            return;\n        }\n        \n        BigInteger val = (BigInteger) object;\n        out.write(val.toString());\n    }\n```\n\n### StringCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, String value) {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是string值, 如果为null,\n         *  并且序列化开启WriteNullStringAsEmpty特性, 输出空串\"\"\n         */\n        if (value == null) {\n            out.writeNull(SerializerFeature.WriteNullStringAsEmpty);\n            return;\n        }\n\n        out.writeString(value);\n    }\n```\n\n### PrimitiveArraySerializer序列化\n\n```java\n    public final void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n        \n        if (object == null) {\n            /** 当前object是数组值, 如果为null,\n             *  并且序列化开启WriteNullListAsEmpty特性, 输出空串\"\"\n             */\n            out.writeNull(SerializerFeature.WriteNullListAsEmpty);\n            return;\n        }\n\n        /** 循环写int数组 */\n        if (object instanceof int[]) {\n            int[] array = (int[]) object;\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                out.writeInt(array[i]);\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 循环写short数组 */\n        if (object instanceof short[]) {\n            short[] array = (short[]) object;\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                out.writeInt(array[i]);\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 循环写long数组 */\n        if (object instanceof long[]) {\n            long[] array = (long[]) object;\n\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                out.writeLong(array[i]);\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 循环写boolean数组 */\n        if (object instanceof boolean[]) {\n            boolean[] array = (boolean[]) object;\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                out.write(array[i]);\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 循环写float数组 */\n        if (object instanceof float[]) {\n            float[] array = (float[]) object;\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                \n                float item = array[i];\n                if (Float.isNaN(item)) {\n                    out.writeNull();\n                } else {\n                    out.append(Float.toString(item));\n                }\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 循环写double数组 */\n        if (object instanceof double[]) {\n            double[] array = (double[]) object;\n            out.write('[');\n            for (int i = 0; i < array.length; ++i) {\n                if (i != 0) {\n                    out.write(',');\n                }\n                \n                double item = array[i];\n                if (Double.isNaN(item)) {\n                    out.writeNull();\n                } else {\n                    out.append(Double.toString(item));\n                }\n            }\n            out.write(']');\n            return;\n        }\n\n        /** 写字节数组 */\n        if (object instanceof byte[]) {\n            byte[] array = (byte[]) object;\n            out.writeByteArray(array);\n            return;\n        }\n\n        /** char数组当做字符串 */\n        char[] chars = (char[]) object;\n        out.writeString(chars);\n    }\n```\n\n### ObjectArrayCodec序列化\n\n```java\n    public final void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features)\n                                                                                                       throws IOException {\n        SerializeWriter out = serializer.out;\n\n        Object[] array = (Object[]) object;\n\n        /** 当前object是数组对象, 如果为null,\n         *  并且序列化开启WriteNullListAsEmpty特性, 输出空串[]\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullListAsEmpty);\n            return;\n        }\n\n        int size = array.length;\n\n        int end = size - 1;\n\n        /** 当前object是数组对象, 如果为没有元素, 输出空串[] */\n        if (end == -1) {\n            out.append(\"[]\");\n            return;\n        }\n\n        SerialContext context = serializer.context;\n        serializer.setContext(context, object, fieldName, 0);\n\n        try {\n            Class<?> preClazz = null;\n            ObjectSerializer preWriter = null;\n            out.append('[');\n\n            /**\n             *  如果开启json格式化，循环输出数组对象，\n             *  会根据数组元素class类型查找序列化实例输出\n             */\n            if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n                serializer.incrementIndent();\n                serializer.println();\n                for (int i = 0; i < size; ++i) {\n                    if (i != 0) {\n                        out.write(',');\n                        serializer.println();\n                    }\n                    serializer.write(array[i]);\n                }\n                serializer.decrementIdent();\n                serializer.println();\n                out.write(']');\n                return;\n            }\n\n            for (int i = 0; i < end; ++i) {\n                Object item = array[i];\n\n                if (item == null) {\n                    out.append(\"null,\");\n                } else {\n                    if (serializer.containsReference(item)) {\n                        serializer.writeReference(item);\n                    } else {\n                        Class<?> clazz = item.getClass();\n\n                        /** 如果当前序列化元素和前一次class类型相同，避免再一次class类型查找序列化实例 */\n                        if (clazz == preClazz) {\n                            preWriter.write(serializer, item, null, null, 0);\n                        } else {\n                            preClazz = clazz;\n                            /** 查找数组元素class类型的序列化器 序列化item */\n                            preWriter = serializer.getObjectWriter(clazz);\n                            preWriter.write(serializer, item, null, null, 0);\n                        }\n                    }\n                    out.append(',');\n                }\n            }\n\n            Object item = array[end];\n\n            if (item == null) {\n                out.append(\"null]\");\n            } else {\n                if (serializer.containsReference(item)) {\n                    serializer.writeReference(item);\n                } else {\n                    serializer.writeWithFieldName(item, end);\n                }\n                out.append(']');\n            }\n        } finally {\n            serializer.context = context;\n        }\n    }\n```\n\n`ObjectArrayCodec`序列化主要判断是否开启格式化输出json，\b如果是输出添加适当的缩进。针对数组元素不一样会根据元素class类型查找具体的序列化器输出，这里优化了如果元素相同的元素避免冗余的\b查找序列化器。\n\n### MiscCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,\n                      int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        if (object == null) {\n            out.writeNull();\n            return;\n        }\n\n        Class<?> objClass = object.getClass();\n\n        String strVal;\n        if (objClass == SimpleDateFormat.class) {\n            String pattern = ((SimpleDateFormat) object).toPattern();\n\n            /** 输出SimpleDateFormat类型的类型 */\n            if (out.isEnabled(SerializerFeature.WriteClassName)) {\n                if (object.getClass() != fieldType) {\n                    out.write('{');\n                    out.writeFieldName(JSON.DEFAULT_TYPE_KEY);\n                    serializer.write(object.getClass().getName());\n                    out.writeFieldValue(',', \"val\", pattern);\n                    out.write('}');\n                    return;\n                }\n            }\n\n            /** 转换SimpleDateFormat对象成pattern字符串 */\n            strVal = pattern;\n        } else if (objClass == Class.class) {\n            Class<?> clazz = (Class<?>) object;\n            /** 转换Class对象成name字符串 */\n            strVal = clazz.getName();\n        } else if (objClass == InetSocketAddress.class) {\n            InetSocketAddress address = (InetSocketAddress) object;\n\n            InetAddress inetAddress = address.getAddress();\n            /** 转换InetSocketAddress对象成地址和端口字符串 */\n            out.write('{');\n            if (inetAddress != null) {\n                out.writeFieldName(\"address\");\n                serializer.write(inetAddress);\n                out.write(',');\n            }\n            out.writeFieldName(\"port\");\n            out.writeInt(address.getPort());\n            out.write('}');\n            return;\n        } else if (object instanceof File) {\n            /** 转换File对象成文件路径字符串 */\n            strVal = ((File) object).getPath();\n        } else if (object instanceof InetAddress) {\n            /** 转换InetAddress对象成主机地址字符串 */\n            strVal = ((InetAddress) object).getHostAddress();\n        } else if (object instanceof TimeZone) {\n            TimeZone timeZone = (TimeZone) object;\n            /** 转换TimeZone对象成时区id字符串 */\n            strVal = timeZone.getID();\n        } else if (object instanceof Currency) {\n            Currency currency = (Currency) object;\n            /** 转换Currency对象成币别编码字符串 */\n            strVal = currency.getCurrencyCode();\n        } else if (object instanceof JSONStreamAware) {\n            JSONStreamAware aware = (JSONStreamAware) object;\n            aware.writeJSONString(out);\n            return;\n        } else if (object instanceof Iterator) {\n            Iterator<?> it = ((Iterator<?>) object);\n            /** 迭代器转换成数组码字符串 [,,,] */\n            writeIterator(serializer, out, it);\n            return;\n        } else if (object instanceof Iterable) {\n            /** 迭代器转换成数组码字符串 [,,,] */\n            Iterator<?> it = ((Iterable<?>) object).iterator();\n            writeIterator(serializer, out, it);\n            return;\n        } else if (object instanceof Map.Entry) {\n            Map.Entry entry = (Map.Entry) object;\n            Object objKey = entry.getKey();\n            Object objVal = entry.getValue();\n\n            /** 输出map的Entry值 */\n            if (objKey instanceof String) {\n                String key = (String) objKey;\n\n                if (objVal instanceof String) {\n                    String value = (String) objVal;\n                    out.writeFieldValueStringWithDoubleQuoteCheck('{', key, value);\n                } else {\n                    out.write('{');\n                    out.writeFieldName(key);\n                    /** 根据value的class类型查找序列化器并输出 */\n                    serializer.write(objVal);\n                }\n            } else {\n                /** 根据key、value的class类型查找序列化器并输出 */\n                out.write('{');\n                serializer.write(objKey);\n                out.write(':');\n                serializer.write(objVal);\n            }\n            out.write('}');\n            return;\n        } else if (object.getClass().getName().equals(\"net.sf.json.JSONNull\")) {\n            out.writeNull();\n            return;\n        } else {\n            throw new JSONException(\"not support class : \" + objClass);\n        }\n\n        out.writeString(strVal);\n    }\n```\n\n`MiscCodec`序列化的主要思想是吧JDK内部常用的对象简化处理，比如TimeZone只保留id输出，\b极大地降低了输出字节大小。\n\n### AppendableSerializer序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n\n        /** 当前object实现了Appendable接口, 如果为null,\n         *  并且序列化开启WriteNullStringAsEmpty特性, 输出空串\"\"\n         */\n        if (object == null) {\n            SerializeWriter out = serializer.out;\n            out.writeNull(SerializerFeature.WriteNullStringAsEmpty);\n            return;\n        }\n\n        /** 输出对象toString结果作为json串 */\n        serializer.write(object.toString());\n    }\n```\n\n### ToStringSerializer序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,\n                      int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 如果为null, 输出空串\"null\" */\n        if (object == null) {\n            out.writeNull();\n            return;\n        }\n\n        /** 输出对象toString结果作为json串 */\n        String strVal = object.toString();\n        out.writeString(strVal);\n    }\n```\n\n### AtomicCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n        \n        if (object instanceof AtomicInteger) {\n            AtomicInteger val = (AtomicInteger) object;\n            /** 获取整数输出 */\n            out.writeInt(val.get());\n            return;\n        }\n        \n        if (object instanceof AtomicLong) {\n            AtomicLong val = (AtomicLong) object;\n            /** 获取长整数输出 */\n            out.writeLong(val.get());\n            return;\n        }\n        \n        if (object instanceof AtomicBoolean) {\n            AtomicBoolean val = (AtomicBoolean) object;\n            /** 获取boolean值输出 */\n            out.append(val.get() ? \"true\" : \"false\");\n            return;\n        }\n\n        /** 当前object是原子数组类型, 如果为null，输出[] */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullListAsEmpty);\n            return;\n        }\n\n        /** 遍历AtomicIntegerArray，输出int数组类型 */\n        if (object instanceof AtomicIntegerArray) {\n            AtomicIntegerArray array = (AtomicIntegerArray) object;\n            int len = array.length();\n            out.write('[');\n            for (int i = 0; i < len; ++i) {\n                int val = array.get(i);\n                if (i != 0) {\n                    out.write(',');\n                }\n                out.writeInt(val);\n            }\n            out.write(']');\n            \n            return;\n        }\n\n        /** 遍历AtomicLongArray，输出long数组类型 */\n        AtomicLongArray array = (AtomicLongArray) object;\n        int len = array.length();\n        out.write('[');\n        for (int i = 0; i < len; ++i) {\n            long val = array.get(i);\n            if (i != 0) {\n                out.write(',');\n            }\n            out.writeLong(val);\n        }\n        out.write(']');\n    }\n```\n\n### ReferenceCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        Object item;\n        /** 当前object是Reference类型,\n         *  调用get()查找对应的class序列化器输出\n         */\n        if (object instanceof AtomicReference) {\n            AtomicReference val = (AtomicReference) object;\n            item = val.get();\n        } else {\n            item = ((Reference) object).get();\n        }\n        serializer.write(item);\n    }\n```\n\n### CollectionCodec序列化\n\n```java\n    public void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        /** 当前object是集合对象, 如果为null,\n         *  并且序列化开启WriteNullListAsEmpty特性, 输出空串[]\n         */\n        if (object == null) {\n            out.writeNull(SerializerFeature.WriteNullListAsEmpty);\n            return;\n        }\n\n        Type elementType = null;\n        if (out.isEnabled(SerializerFeature.WriteClassName)\n                || SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName))\n        {\n            /** 获取字段泛型类型 */\n            elementType = TypeUtils.getCollectionItemType(fieldType);\n        }\n\n        Collection<?> collection = (Collection<?>) object;\n\n        SerialContext context = serializer.context;\n        serializer.setContext(context, object, fieldName, 0);\n\n        if (out.isEnabled(SerializerFeature.WriteClassName)) {\n            if (HashSet.class == collection.getClass()) {\n                out.append(\"Set\");\n            } else if (TreeSet.class == collection.getClass()) {\n                out.append(\"TreeSet\");\n            }\n        }\n\n        try {\n            int i = 0;\n            out.append('[');\n            for (Object item : collection) {\n\n                if (i++ != 0) {\n                    out.append(',');\n                }\n\n                if (item == null) {\n                    out.writeNull();\n                    continue;\n                }\n\n                Class<?> clazz = item.getClass();\n\n                /** 获取整形类型值，输出 */\n                if (clazz == Integer.class) {\n                    out.writeInt(((Integer) item).intValue());\n                    continue;\n                }\n\n                /** 获取整形长类型值，输出并添加L标识(如果开启WriteClassName特性) */\n                if (clazz == Long.class) {\n                    out.writeLong(((Long) item).longValue());\n\n                    if (out.isEnabled(SerializerFeature.WriteClassName)) {\n                        out.write('L');\n                    }\n                    continue;\n                }\n\n                /** 根据集合类型查找序列化实例处理，JavaBeanSerializer后面单独分析 */\n                ObjectSerializer itemSerializer = serializer.getObjectWriter(clazz);\n                if (SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)\n                        && itemSerializer instanceof JavaBeanSerializer) {\n                    JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) itemSerializer;\n                    javaBeanSerializer.writeNoneASM(serializer, item, i - 1, elementType, features);\n                } else {\n                    itemSerializer.write(serializer, item, i - 1, elementType, features);\n                }\n            }\n            out.append(']');\n        } finally {\n            serializer.context = context;\n        }\n    }\n```\n","slug":"Fastjson源码解析-序列化(五)-json内部注册序列化解析","published":1,"updated":"2018-10-12T02:20:00.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4etd000mxat8llrcqqur","content":"<h2 id=\"序列化回调接口实现分析\"><a href=\"#序列化回调接口实现分析\" class=\"headerlink\" title=\"序列化回调接口实现分析\"></a>序列化回调接口实现分析</h2><h3 id=\"内部注册的序列化\"><a href=\"#内部注册的序列化\" class=\"headerlink\" title=\"内部注册的序列化\"></a>内部注册的序列化</h3><p>fastjson针对常用的类型已经注册了序列化实现方案：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">注册的类型</th>\n<th style=\"text-align:left\">序列化实例</th>\n<th style=\"text-align:center\">是否支持序列化</th>\n<th style=\"text-align:center\">是否支持反序列化</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">BooleanCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Character</td>\n<td style=\"text-align:left\">CharacterCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Byte</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Short</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Integer</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Long</td>\n<td style=\"text-align:left\">LongCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Float</td>\n<td style=\"text-align:left\">FloatCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Double</td>\n<td style=\"text-align:left\">DoubleSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BigDecimal</td>\n<td style=\"text-align:left\">BigDecimalCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BigInteger</td>\n<td style=\"text-align:left\">BigIntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">StringCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">byte[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">boolean[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">char[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object[]</td>\n<td style=\"text-align:left\">ObjectArrayCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Class</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SimpleDateFormat</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Currency</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TimeZone</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InetAddress</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inet4Address</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inet6Address</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InetSocketAddress</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">File</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Appendable</td>\n<td style=\"text-align:left\">AppendableSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StringBuffer</td>\n<td style=\"text-align:left\">AppendableSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StringBuilder</td>\n<td style=\"text-align:left\">AppendableSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Charset</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pattern</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Locale</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URI</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URL</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UUID</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicBoolean</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicInteger</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicLong</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicIntegerArray</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicLongArray</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">WeakReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SoftReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedList</td>\n<td style=\"text-align:left\">CollectionCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"BooleanCodec序列化\"><a href=\"#BooleanCodec序列化\" class=\"headerlink\" title=\"BooleanCodec序列化\"></a>BooleanCodec序列化</h3><p>其实理解了前面分析<code>SerializeWriter</code>, 接下来的内容比较容易理解, <code>BooleanCodec</code> 序列化实现 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是boolean值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullBooleanAsFalse特性, 输出false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Boolean value = (Boolean) object;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullBooleanAsFalse);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value.booleanValue()) &#123;</span><br><span class=\"line\">        out.write(<span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        out.write(<span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>BooleanCodec</code>序列化实现\b\b主要判断是否开启如果为null值是否输出false，否则输出boolean字面量值。</p>\n<h3 id=\"CharacterCodec序列化\"><a href=\"#CharacterCodec序列化\" class=\"headerlink\" title=\"CharacterCodec序列化\"></a>CharacterCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    Character value = (Character) object;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 字符串为空，输出空字符串 */</span></span><br><span class=\"line\">        out.writeString(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = value.charValue();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 空白字符，输出unicode空格字符 */</span></span><br><span class=\"line\">        out.writeString(<span class=\"string\">\"\\u0000\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出字符串值 */</span></span><br><span class=\"line\">        out.writeString(value.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"IntegerCodec序列化\"><a href=\"#IntegerCodec序列化\" class=\"headerlink\" title=\"IntegerCodec序列化\"></a>IntegerCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    Number value = (Number) object;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是整形值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判断整形或者长整型，直接输出 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Long) &#123;</span><br><span class=\"line\">        out.writeLong(value.longValue());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        out.writeInt(value.intValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果开启WriteClassName特性，输出具体值类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; clazz = value.getClass();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == Byte.class) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz == Short.class) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">'S'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LongCodec序列化\"><a href=\"#LongCodec序列化\" class=\"headerlink\" title=\"LongCodec序列化\"></a>LongCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是长整形值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> value = ((Long) object).longValue();</span><br><span class=\"line\">        out.writeLong(value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果长整型值范围和整型相同，显示添加L 标识为long */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)</span><br><span class=\"line\">            &amp;&amp; value &lt;= Integer.MAX_VALUE &amp;&amp; value &gt;= Integer.MIN_VALUE</span><br><span class=\"line\">            &amp;&amp; fieldType != Long.class</span><br><span class=\"line\">            &amp;&amp; fieldType != <span class=\"keyword\">long</span>.class) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">'L'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Long</code>类型序列化会特殊标识值落在整数范围内，如果开启<code>WriteClassName</code>序列化特性，会追加L字符。</p>\n<h3 id=\"FloatCodec序列化\"><a href=\"#FloatCodec序列化\" class=\"headerlink\" title=\"FloatCodec序列化\"></a>FloatCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是float值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> floatValue = ((Float) object).floatValue();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (decimalFormat != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换一下浮点数值格式 */</span></span><br><span class=\"line\">        String floatText = decimalFormat.format(floatValue);</span><br><span class=\"line\">        out.write(floatText);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        out.writeFloat(floatValue, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"BigDecimalCodec序列化\"><a href=\"#BigDecimalCodec序列化\" class=\"headerlink\" title=\"BigDecimalCodec序列化\"></a>BigDecimalCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是BigDecimal值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        BigDecimal val = (BigDecimal) object;</span><br><span class=\"line\"></span><br><span class=\"line\">        String outText;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果序列化开启WriteBigDecimalAsPlain特性，搞定度输出不会包含指数e */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteBigDecimalAsPlain)) &#123;</span><br><span class=\"line\">            outText = val.toPlainString();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            outText = val.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(outText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName) &amp;&amp; fieldType != BigDecimal.class &amp;&amp; val.scale() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"BigIntegerCodec序列化\"><a href=\"#BigIntegerCodec序列化\" class=\"headerlink\" title=\"BigIntegerCodec序列化\"></a>BigIntegerCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是BigInteger值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    BigInteger val = (BigInteger) object;</span><br><span class=\"line\">    out.write(val.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"StringCodec序列化\"><a href=\"#StringCodec序列化\" class=\"headerlink\" title=\"StringCodec序列化\"></a>StringCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, String value)</span> </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是string值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullStringAsEmpty特性, 输出空串\"\"</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullStringAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    out.writeString(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"PrimitiveArraySerializer序列化\"><a href=\"#PrimitiveArraySerializer序列化\" class=\"headerlink\" title=\"PrimitiveArraySerializer序列化\"></a>PrimitiveArraySerializer序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 当前object是数组值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">         *  并且序列化开启WriteNullListAsEmpty特性, 输出空串\"\"</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写int数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">int</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = (<span class=\"keyword\">int</span>[]) object;</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.writeInt(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写short数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">short</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">short</span>[] array = (<span class=\"keyword\">short</span>[]) object;</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.writeInt(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写long数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">long</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span>[] array = (<span class=\"keyword\">long</span>[]) object;</span><br><span class=\"line\"></span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.writeLong(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写boolean数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">boolean</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] array = (<span class=\"keyword\">boolean</span>[]) object;</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.write(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写float数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">float</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span>[] array = (<span class=\"keyword\">float</span>[]) object;</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">float</span> item = array[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Float.isNaN(item)) &#123;</span><br><span class=\"line\">                out.writeNull();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                out.append(Float.toString(item));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写double数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">double</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span>[] array = (<span class=\"keyword\">double</span>[]) object;</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">double</span> item = array[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Double.isNaN(item)) &#123;</span><br><span class=\"line\">                out.writeNull();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                out.append(Double.toString(item));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 写字节数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">byte</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] array = (<span class=\"keyword\">byte</span>[]) object;</span><br><span class=\"line\">        out.writeByteArray(array);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** char数组当做字符串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = (<span class=\"keyword\">char</span>[]) object;</span><br><span class=\"line\">    out.writeString(chars);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ObjectArrayCodec序列化\"><a href=\"#ObjectArrayCodec序列化\" class=\"headerlink\" title=\"ObjectArrayCodec序列化\"></a>ObjectArrayCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span></span></span><br><span class=\"line\"><span class=\"function\">                                                                                                   <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object[] array = (Object[]) object;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是数组对象, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullListAsEmpty特性, 输出空串[]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = array.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = size - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是数组对象, 如果为没有元素, 输出空串[] */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (end == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        out.append(<span class=\"string\">\"[]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext context = serializer.context;</span><br><span class=\"line\">    serializer.setContext(context, object, fieldName, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Class&lt;?&gt; preClazz = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ObjectSerializer preWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        out.append(<span class=\"string\">'['</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  如果开启json格式化，循环输出数组对象，</span></span><br><span class=\"line\"><span class=\"comment\">         *  会根据数组元素class类型查找序列化实例输出</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">            serializer.incrementIndent();</span><br><span class=\"line\">            serializer.println();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">                    serializer.println();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                serializer.write(array[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            serializer.decrementIdent();</span><br><span class=\"line\">            serializer.println();</span><br><span class=\"line\">            out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; end; ++i) &#123;</span><br><span class=\"line\">            Object item = array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                out.append(<span class=\"string\">\"null,\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (serializer.containsReference(item)) &#123;</span><br><span class=\"line\">                    serializer.writeReference(item);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    Class&lt;?&gt; clazz = item.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">/** 如果当前序列化元素和前一次class类型相同，避免再一次class类型查找序列化实例 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (clazz == preClazz) &#123;</span><br><span class=\"line\">                        preWriter.write(serializer, item, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        preClazz = clazz;</span><br><span class=\"line\">                        <span class=\"comment\">/** 查找数组元素class类型的序列化器 序列化item */</span></span><br><span class=\"line\">                        preWriter = serializer.getObjectWriter(clazz);</span><br><span class=\"line\">                        preWriter.write(serializer, item, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                out.append(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Object item = array[end];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            out.append(<span class=\"string\">\"null]\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (serializer.containsReference(item)) &#123;</span><br><span class=\"line\">                serializer.writeReference(item);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                serializer.writeWithFieldName(item, end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.append(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        serializer.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ObjectArrayCodec</code>序列化主要判断是否开启格式化输出json，\b如果是输出添加适当的缩进。针对数组元素不一样会根据元素class类型查找具体的序列化器输出，这里优化了如果元素相同的元素避免冗余的\b查找序列化器。</p>\n<h3 id=\"MiscCodec序列化\"><a href=\"#MiscCodec序列化\" class=\"headerlink\" title=\"MiscCodec序列化\"></a>MiscCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; objClass = object.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">    String strVal;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (objClass == SimpleDateFormat.class) &#123;</span><br><span class=\"line\">        String pattern = ((SimpleDateFormat) object).toPattern();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 输出SimpleDateFormat类型的类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (object.getClass() != fieldType) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">'&#123;'</span>);</span><br><span class=\"line\">                out.writeFieldName(JSON.DEFAULT_TYPE_KEY);</span><br><span class=\"line\">                serializer.write(object.getClass().getName());</span><br><span class=\"line\">                out.writeFieldValue(<span class=\"string\">','</span>, <span class=\"string\">\"val\"</span>, pattern);</span><br><span class=\"line\">                out.write(<span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 转换SimpleDateFormat对象成pattern字符串 */</span></span><br><span class=\"line\">        strVal = pattern;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (objClass == Class.class) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; clazz = (Class&lt;?&gt;) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换Class对象成name字符串 */</span></span><br><span class=\"line\">        strVal = clazz.getName();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (objClass == InetSocketAddress.class) &#123;</span><br><span class=\"line\">        InetSocketAddress address = (InetSocketAddress) object;</span><br><span class=\"line\"></span><br><span class=\"line\">        InetAddress inetAddress = address.getAddress();</span><br><span class=\"line\">        <span class=\"comment\">/** 转换InetSocketAddress对象成地址和端口字符串 */</span></span><br><span class=\"line\">        out.write(<span class=\"string\">'&#123;'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inetAddress != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            out.writeFieldName(<span class=\"string\">\"address\"</span>);</span><br><span class=\"line\">            serializer.write(inetAddress);</span><br><span class=\"line\">            out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.writeFieldName(<span class=\"string\">\"port\"</span>);</span><br><span class=\"line\">        out.writeInt(address.getPort());</span><br><span class=\"line\">        out.write(<span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> File) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换File对象成文件路径字符串 */</span></span><br><span class=\"line\">        strVal = ((File) object).getPath();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> InetAddress) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换InetAddress对象成主机地址字符串 */</span></span><br><span class=\"line\">        strVal = ((InetAddress) object).getHostAddress();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> TimeZone) &#123;</span><br><span class=\"line\">        TimeZone timeZone = (TimeZone) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换TimeZone对象成时区id字符串 */</span></span><br><span class=\"line\">        strVal = timeZone.getID();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Currency) &#123;</span><br><span class=\"line\">        Currency currency = (Currency) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换Currency对象成币别编码字符串 */</span></span><br><span class=\"line\">        strVal = currency.getCurrencyCode();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> JSONStreamAware) &#123;</span><br><span class=\"line\">        JSONStreamAware aware = (JSONStreamAware) object;</span><br><span class=\"line\">        aware.writeJSONString(out);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Iterator) &#123;</span><br><span class=\"line\">        Iterator&lt;?&gt; it = ((Iterator&lt;?&gt;) object);</span><br><span class=\"line\">        <span class=\"comment\">/** 迭代器转换成数组码字符串 [,,,] */</span></span><br><span class=\"line\">        writeIterator(serializer, out, it);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Iterable) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 迭代器转换成数组码字符串 [,,,] */</span></span><br><span class=\"line\">        Iterator&lt;?&gt; it = ((Iterable&lt;?&gt;) object).iterator();</span><br><span class=\"line\">        writeIterator(serializer, out, it);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</span><br><span class=\"line\">        Map.Entry entry = (Map.Entry) object;</span><br><span class=\"line\">        Object objKey = entry.getKey();</span><br><span class=\"line\">        Object objVal = entry.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 输出map的Entry值 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (objKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">            String key = (String) objKey;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (objVal <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                String value = (String) objVal;</span><br><span class=\"line\">                out.writeFieldValueStringWithDoubleQuoteCheck(<span class=\"string\">'&#123;'</span>, key, value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">'&#123;'</span>);</span><br><span class=\"line\">                out.writeFieldName(key);</span><br><span class=\"line\">                <span class=\"comment\">/** 根据value的class类型查找序列化器并输出 */</span></span><br><span class=\"line\">                serializer.write(objVal);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 根据key、value的class类型查找序列化器并输出 */</span></span><br><span class=\"line\">            out.write(<span class=\"string\">'&#123;'</span>);</span><br><span class=\"line\">            serializer.write(objKey);</span><br><span class=\"line\">            out.write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            serializer.write(objVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object.getClass().getName().equals(<span class=\"string\">\"net.sf.json.JSONNull\"</span>)) &#123;</span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"not support class : \"</span> + objClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    out.writeString(strVal);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>MiscCodec</code>序列化的主要思想是吧JDK内部常用的对象简化处理，比如TimeZone只保留id输出，\b极大地降低了输出字节大小。</p>\n<h3 id=\"AppendableSerializer序列化\"><a href=\"#AppendableSerializer序列化\" class=\"headerlink\" title=\"AppendableSerializer序列化\"></a>AppendableSerializer序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object实现了Appendable接口, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullStringAsEmpty特性, 输出空串\"\"</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        SerializeWriter out = serializer.out;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullStringAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出对象toString结果作为json串 */</span></span><br><span class=\"line\">    serializer.write(object.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ToStringSerializer序列化\"><a href=\"#ToStringSerializer序列化\" class=\"headerlink\" title=\"ToStringSerializer序列化\"></a>ToStringSerializer序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果为null, 输出空串\"null\" */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出对象toString结果作为json串 */</span></span><br><span class=\"line\">    String strVal = object.toString();</span><br><span class=\"line\">    out.writeString(strVal);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"AtomicCodec序列化\"><a href=\"#AtomicCodec序列化\" class=\"headerlink\" title=\"AtomicCodec序列化\"></a>AtomicCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> AtomicInteger) &#123;</span><br><span class=\"line\">        AtomicInteger val = (AtomicInteger) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取整数输出 */</span></span><br><span class=\"line\">        out.writeInt(val.get());</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> AtomicLong) &#123;</span><br><span class=\"line\">        AtomicLong val = (AtomicLong) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取长整数输出 */</span></span><br><span class=\"line\">        out.writeLong(val.get());</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> AtomicBoolean) &#123;</span><br><span class=\"line\">        AtomicBoolean val = (AtomicBoolean) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取boolean值输出 */</span></span><br><span class=\"line\">        out.append(val.get() ? <span class=\"string\">\"true\"</span> : <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是原子数组类型, 如果为null，输出[] */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 遍历AtomicIntegerArray，输出int数组类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> AtomicIntegerArray) &#123;</span><br><span class=\"line\">        AtomicIntegerArray array = (AtomicIntegerArray) object;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = array.length();</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> val = array.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.writeInt(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 遍历AtomicLongArray，输出long数组类型 */</span></span><br><span class=\"line\">    AtomicLongArray array = (AtomicLongArray) object;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = array.length();</span><br><span class=\"line\">    out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> val = array.get(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.writeLong(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReferenceCodec序列化\"><a href=\"#ReferenceCodec序列化\" class=\"headerlink\" title=\"ReferenceCodec序列化\"></a>ReferenceCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    Object item;</span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是Reference类型,</span></span><br><span class=\"line\"><span class=\"comment\">     *  调用get()查找对应的class序列化器输出</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> AtomicReference) &#123;</span><br><span class=\"line\">        AtomicReference val = (AtomicReference) object;</span><br><span class=\"line\">        item = val.get();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        item = ((Reference) object).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    serializer.write(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CollectionCodec序列化\"><a href=\"#CollectionCodec序列化\" class=\"headerlink\" title=\"CollectionCodec序列化\"></a>CollectionCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是集合对象, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullListAsEmpty特性, 输出空串[]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Type elementType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)</span><br><span class=\"line\">            || SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取字段泛型类型 */</span></span><br><span class=\"line\">        elementType = TypeUtils.getCollectionItemType(fieldType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Collection&lt;?&gt; collection = (Collection&lt;?&gt;) object;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext context = serializer.context;</span><br><span class=\"line\">    serializer.setContext(context, object, fieldName, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (HashSet.class == collection.getClass()) &#123;</span><br><span class=\"line\">            out.append(<span class=\"string\">\"Set\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TreeSet.class == collection.getClass()) &#123;</span><br><span class=\"line\">            out.append(<span class=\"string\">\"TreeSet\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        out.append(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object item : collection) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i++ != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.append(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                out.writeNull();</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; clazz = item.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 获取整形类型值，输出 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (clazz == Integer.class) &#123;</span><br><span class=\"line\">                out.writeInt(((Integer) item).intValue());</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 获取整形长类型值，输出并添加L标识(如果开启WriteClassName特性) */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (clazz == Long.class) &#123;</span><br><span class=\"line\">                out.writeLong(((Long) item).longValue());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">                    out.write(<span class=\"string\">'L'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 根据集合类型查找序列化实例处理，JavaBeanSerializer后面单独分析 */</span></span><br><span class=\"line\">            ObjectSerializer itemSerializer = serializer.getObjectWriter(clazz);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)</span><br><span class=\"line\">                    &amp;&amp; itemSerializer <span class=\"keyword\">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class=\"line\">                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) itemSerializer;</span><br><span class=\"line\">                javaBeanSerializer.writeNoneASM(serializer, item, i - <span class=\"number\">1</span>, elementType, features);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                itemSerializer.write(serializer, item, i - <span class=\"number\">1</span>, elementType, features);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.append(<span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        serializer.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"序列化回调接口实现分析\"><a href=\"#序列化回调接口实现分析\" class=\"headerlink\" title=\"序列化回调接口实现分析\"></a>序列化回调接口实现分析</h2><h3 id=\"内部注册的序列化\"><a href=\"#内部注册的序列化\" class=\"headerlink\" title=\"内部注册的序列化\"></a>内部注册的序列化</h3><p>fastjson针对常用的类型已经注册了序列化实现方案：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">注册的类型</th>\n<th style=\"text-align:left\">序列化实例</th>\n<th style=\"text-align:center\">是否支持序列化</th>\n<th style=\"text-align:center\">是否支持反序列化</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">BooleanCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Character</td>\n<td style=\"text-align:left\">CharacterCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Byte</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Short</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Integer</td>\n<td style=\"text-align:left\">IntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Long</td>\n<td style=\"text-align:left\">LongCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Float</td>\n<td style=\"text-align:left\">FloatCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Double</td>\n<td style=\"text-align:left\">DoubleSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BigDecimal</td>\n<td style=\"text-align:left\">BigDecimalCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BigInteger</td>\n<td style=\"text-align:left\">BigIntegerCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">StringCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">byte[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">short[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">long[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">float[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">double[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">boolean[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">char[]</td>\n<td style=\"text-align:left\">PrimitiveArraySerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Object[]</td>\n<td style=\"text-align:left\">ObjectArrayCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Class</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SimpleDateFormat</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Currency</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TimeZone</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InetAddress</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inet4Address</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Inet6Address</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">InetSocketAddress</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">File</td>\n<td style=\"text-align:left\">MiscCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Appendable</td>\n<td style=\"text-align:left\">AppendableSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StringBuffer</td>\n<td style=\"text-align:left\">AppendableSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">StringBuilder</td>\n<td style=\"text-align:left\">AppendableSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Charset</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pattern</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Locale</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URI</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URL</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UUID</td>\n<td style=\"text-align:left\">ToStringSerializer</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">-</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicBoolean</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicInteger</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicLong</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicIntegerArray</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AtomicLongArray</td>\n<td style=\"text-align:left\">AtomicCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">WeakReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SoftReference</td>\n<td style=\"text-align:left\">ReferenceCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LinkedList</td>\n<td style=\"text-align:left\">CollectionCodec</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"BooleanCodec序列化\"><a href=\"#BooleanCodec序列化\" class=\"headerlink\" title=\"BooleanCodec序列化\"></a>BooleanCodec序列化</h3><p>其实理解了前面分析<code>SerializeWriter</code>, 接下来的内容比较容易理解, <code>BooleanCodec</code> 序列化实现 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是boolean值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullBooleanAsFalse特性, 输出false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Boolean value = (Boolean) object;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullBooleanAsFalse);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value.booleanValue()) &#123;</span><br><span class=\"line\">        out.write(<span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        out.write(<span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>BooleanCodec</code>序列化实现\b\b主要判断是否开启如果为null值是否输出false，否则输出boolean字面量值。</p>\n<h3 id=\"CharacterCodec序列化\"><a href=\"#CharacterCodec序列化\" class=\"headerlink\" title=\"CharacterCodec序列化\"></a>CharacterCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    Character value = (Character) object;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 字符串为空，输出空字符串 */</span></span><br><span class=\"line\">        out.writeString(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c = value.charValue();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 空白字符，输出unicode空格字符 */</span></span><br><span class=\"line\">        out.writeString(<span class=\"string\">\"\\u0000\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 输出字符串值 */</span></span><br><span class=\"line\">        out.writeString(value.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"IntegerCodec序列化\"><a href=\"#IntegerCodec序列化\" class=\"headerlink\" title=\"IntegerCodec序列化\"></a>IntegerCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    Number value = (Number) object;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是整形值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 判断整形或者长整型，直接输出 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Long) &#123;</span><br><span class=\"line\">        out.writeLong(value.longValue());</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        out.writeInt(value.intValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果开启WriteClassName特性，输出具体值类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; clazz = value.getClass();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clazz == Byte.class) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">'B'</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz == Short.class) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">'S'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"LongCodec序列化\"><a href=\"#LongCodec序列化\" class=\"headerlink\" title=\"LongCodec序列化\"></a>LongCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是长整形值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> value = ((Long) object).longValue();</span><br><span class=\"line\">        out.writeLong(value);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果长整型值范围和整型相同，显示添加L 标识为long */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)</span><br><span class=\"line\">            &amp;&amp; value &lt;= Integer.MAX_VALUE &amp;&amp; value &gt;= Integer.MIN_VALUE</span><br><span class=\"line\">            &amp;&amp; fieldType != Long.class</span><br><span class=\"line\">            &amp;&amp; fieldType != <span class=\"keyword\">long</span>.class) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">'L'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Long</code>类型序列化会特殊标识值落在整数范围内，如果开启<code>WriteClassName</code>序列化特性，会追加L字符。</p>\n<h3 id=\"FloatCodec序列化\"><a href=\"#FloatCodec序列化\" class=\"headerlink\" title=\"FloatCodec序列化\"></a>FloatCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是float值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> floatValue = ((Float) object).floatValue();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (decimalFormat != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换一下浮点数值格式 */</span></span><br><span class=\"line\">        String floatText = decimalFormat.format(floatValue);</span><br><span class=\"line\">        out.write(floatText);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        out.writeFloat(floatValue, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"BigDecimalCodec序列化\"><a href=\"#BigDecimalCodec序列化\" class=\"headerlink\" title=\"BigDecimalCodec序列化\"></a>BigDecimalCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是BigDecimal值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        BigDecimal val = (BigDecimal) object;</span><br><span class=\"line\"></span><br><span class=\"line\">        String outText;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果序列化开启WriteBigDecimalAsPlain特性，搞定度输出不会包含指数e */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteBigDecimalAsPlain)) &#123;</span><br><span class=\"line\">            outText = val.toPlainString();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            outText = val.toString();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(outText);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName) &amp;&amp; fieldType != BigDecimal.class &amp;&amp; val.scale() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"BigIntegerCodec序列化\"><a href=\"#BigIntegerCodec序列化\" class=\"headerlink\" title=\"BigIntegerCodec序列化\"></a>BigIntegerCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是BigInteger值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullNumberAsZero特性, 输出0</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullNumberAsZero);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    BigInteger val = (BigInteger) object;</span><br><span class=\"line\">    out.write(val.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"StringCodec序列化\"><a href=\"#StringCodec序列化\" class=\"headerlink\" title=\"StringCodec序列化\"></a>StringCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, String value)</span> </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是string值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullStringAsEmpty特性, 输出空串\"\"</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullStringAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    out.writeString(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"PrimitiveArraySerializer序列化\"><a href=\"#PrimitiveArraySerializer序列化\" class=\"headerlink\" title=\"PrimitiveArraySerializer序列化\"></a>PrimitiveArraySerializer序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 当前object是数组值, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">         *  并且序列化开启WriteNullListAsEmpty特性, 输出空串\"\"</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写int数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">int</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] array = (<span class=\"keyword\">int</span>[]) object;</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.writeInt(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写short数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">short</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">short</span>[] array = (<span class=\"keyword\">short</span>[]) object;</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.writeInt(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写long数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">long</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span>[] array = (<span class=\"keyword\">long</span>[]) object;</span><br><span class=\"line\"></span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.writeLong(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写boolean数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">boolean</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] array = (<span class=\"keyword\">boolean</span>[]) object;</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.write(array[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写float数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">float</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span>[] array = (<span class=\"keyword\">float</span>[]) object;</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">float</span> item = array[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Float.isNaN(item)) &#123;</span><br><span class=\"line\">                out.writeNull();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                out.append(Float.toString(item));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 循环写double数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">double</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">double</span>[] array = (<span class=\"keyword\">double</span>[]) object;</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; array.length; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">double</span> item = array[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Double.isNaN(item)) &#123;</span><br><span class=\"line\">                out.writeNull();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                out.append(Double.toString(item));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 写字节数组 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"keyword\">byte</span>[]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] array = (<span class=\"keyword\">byte</span>[]) object;</span><br><span class=\"line\">        out.writeByteArray(array);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** char数组当做字符串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>[] chars = (<span class=\"keyword\">char</span>[]) object;</span><br><span class=\"line\">    out.writeString(chars);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ObjectArrayCodec序列化\"><a href=\"#ObjectArrayCodec序列化\" class=\"headerlink\" title=\"ObjectArrayCodec序列化\"></a>ObjectArrayCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span></span></span><br><span class=\"line\"><span class=\"function\">                                                                                                   <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object[] array = (Object[]) object;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是数组对象, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullListAsEmpty特性, 输出空串[]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = array.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> end = size - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是数组对象, 如果为没有元素, 输出空串[] */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (end == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        out.append(<span class=\"string\">\"[]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext context = serializer.context;</span><br><span class=\"line\">    serializer.setContext(context, object, fieldName, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        Class&lt;?&gt; preClazz = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ObjectSerializer preWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        out.append(<span class=\"string\">'['</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *  如果开启json格式化，循环输出数组对象，</span></span><br><span class=\"line\"><span class=\"comment\">         *  会根据数组元素class类型查找序列化实例输出</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">            serializer.incrementIndent();</span><br><span class=\"line\">            serializer.println();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">                    serializer.println();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                serializer.write(array[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            serializer.decrementIdent();</span><br><span class=\"line\">            serializer.println();</span><br><span class=\"line\">            out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; end; ++i) &#123;</span><br><span class=\"line\">            Object item = array[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                out.append(<span class=\"string\">\"null,\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (serializer.containsReference(item)) &#123;</span><br><span class=\"line\">                    serializer.writeReference(item);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    Class&lt;?&gt; clazz = item.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">/** 如果当前序列化元素和前一次class类型相同，避免再一次class类型查找序列化实例 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (clazz == preClazz) &#123;</span><br><span class=\"line\">                        preWriter.write(serializer, item, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        preClazz = clazz;</span><br><span class=\"line\">                        <span class=\"comment\">/** 查找数组元素class类型的序列化器 序列化item */</span></span><br><span class=\"line\">                        preWriter = serializer.getObjectWriter(clazz);</span><br><span class=\"line\">                        preWriter.write(serializer, item, <span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                out.append(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Object item = array[end];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            out.append(<span class=\"string\">\"null]\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (serializer.containsReference(item)) &#123;</span><br><span class=\"line\">                serializer.writeReference(item);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                serializer.writeWithFieldName(item, end);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.append(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        serializer.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ObjectArrayCodec</code>序列化主要判断是否开启格式化输出json，\b如果是输出添加适当的缩进。针对数组元素不一样会根据元素class类型查找具体的序列化器输出，这里优化了如果元素相同的元素避免冗余的\b查找序列化器。</p>\n<h3 id=\"MiscCodec序列化\"><a href=\"#MiscCodec序列化\" class=\"headerlink\" title=\"MiscCodec序列化\"></a>MiscCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; objClass = object.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">    String strVal;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (objClass == SimpleDateFormat.class) &#123;</span><br><span class=\"line\">        String pattern = ((SimpleDateFormat) object).toPattern();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 输出SimpleDateFormat类型的类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (object.getClass() != fieldType) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">'&#123;'</span>);</span><br><span class=\"line\">                out.writeFieldName(JSON.DEFAULT_TYPE_KEY);</span><br><span class=\"line\">                serializer.write(object.getClass().getName());</span><br><span class=\"line\">                out.writeFieldValue(<span class=\"string\">','</span>, <span class=\"string\">\"val\"</span>, pattern);</span><br><span class=\"line\">                out.write(<span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 转换SimpleDateFormat对象成pattern字符串 */</span></span><br><span class=\"line\">        strVal = pattern;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (objClass == Class.class) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; clazz = (Class&lt;?&gt;) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换Class对象成name字符串 */</span></span><br><span class=\"line\">        strVal = clazz.getName();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (objClass == InetSocketAddress.class) &#123;</span><br><span class=\"line\">        InetSocketAddress address = (InetSocketAddress) object;</span><br><span class=\"line\"></span><br><span class=\"line\">        InetAddress inetAddress = address.getAddress();</span><br><span class=\"line\">        <span class=\"comment\">/** 转换InetSocketAddress对象成地址和端口字符串 */</span></span><br><span class=\"line\">        out.write(<span class=\"string\">'&#123;'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inetAddress != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            out.writeFieldName(<span class=\"string\">\"address\"</span>);</span><br><span class=\"line\">            serializer.write(inetAddress);</span><br><span class=\"line\">            out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.writeFieldName(<span class=\"string\">\"port\"</span>);</span><br><span class=\"line\">        out.writeInt(address.getPort());</span><br><span class=\"line\">        out.write(<span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> File) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换File对象成文件路径字符串 */</span></span><br><span class=\"line\">        strVal = ((File) object).getPath();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> InetAddress) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换InetAddress对象成主机地址字符串 */</span></span><br><span class=\"line\">        strVal = ((InetAddress) object).getHostAddress();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> TimeZone) &#123;</span><br><span class=\"line\">        TimeZone timeZone = (TimeZone) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换TimeZone对象成时区id字符串 */</span></span><br><span class=\"line\">        strVal = timeZone.getID();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Currency) &#123;</span><br><span class=\"line\">        Currency currency = (Currency) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换Currency对象成币别编码字符串 */</span></span><br><span class=\"line\">        strVal = currency.getCurrencyCode();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> JSONStreamAware) &#123;</span><br><span class=\"line\">        JSONStreamAware aware = (JSONStreamAware) object;</span><br><span class=\"line\">        aware.writeJSONString(out);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Iterator) &#123;</span><br><span class=\"line\">        Iterator&lt;?&gt; it = ((Iterator&lt;?&gt;) object);</span><br><span class=\"line\">        <span class=\"comment\">/** 迭代器转换成数组码字符串 [,,,] */</span></span><br><span class=\"line\">        writeIterator(serializer, out, it);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Iterable) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 迭代器转换成数组码字符串 [,,,] */</span></span><br><span class=\"line\">        Iterator&lt;?&gt; it = ((Iterable&lt;?&gt;) object).iterator();</span><br><span class=\"line\">        writeIterator(serializer, out, it);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Map.Entry) &#123;</span><br><span class=\"line\">        Map.Entry entry = (Map.Entry) object;</span><br><span class=\"line\">        Object objKey = entry.getKey();</span><br><span class=\"line\">        Object objVal = entry.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 输出map的Entry值 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (objKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">            String key = (String) objKey;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (objVal <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                String value = (String) objVal;</span><br><span class=\"line\">                out.writeFieldValueStringWithDoubleQuoteCheck(<span class=\"string\">'&#123;'</span>, key, value);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">'&#123;'</span>);</span><br><span class=\"line\">                out.writeFieldName(key);</span><br><span class=\"line\">                <span class=\"comment\">/** 根据value的class类型查找序列化器并输出 */</span></span><br><span class=\"line\">                serializer.write(objVal);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 根据key、value的class类型查找序列化器并输出 */</span></span><br><span class=\"line\">            out.write(<span class=\"string\">'&#123;'</span>);</span><br><span class=\"line\">            serializer.write(objKey);</span><br><span class=\"line\">            out.write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            serializer.write(objVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object.getClass().getName().equals(<span class=\"string\">\"net.sf.json.JSONNull\"</span>)) &#123;</span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"not support class : \"</span> + objClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    out.writeString(strVal);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>MiscCodec</code>序列化的主要思想是吧JDK内部常用的对象简化处理，比如TimeZone只保留id输出，\b极大地降低了输出字节大小。</p>\n<h3 id=\"AppendableSerializer序列化\"><a href=\"#AppendableSerializer序列化\" class=\"headerlink\" title=\"AppendableSerializer序列化\"></a>AppendableSerializer序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object实现了Appendable接口, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullStringAsEmpty特性, 输出空串\"\"</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        SerializeWriter out = serializer.out;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullStringAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出对象toString结果作为json串 */</span></span><br><span class=\"line\">    serializer.write(object.toString());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ToStringSerializer序列化\"><a href=\"#ToStringSerializer序列化\" class=\"headerlink\" title=\"ToStringSerializer序列化\"></a>ToStringSerializer序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果为null, 输出空串\"null\" */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 输出对象toString结果作为json串 */</span></span><br><span class=\"line\">    String strVal = object.toString();</span><br><span class=\"line\">    out.writeString(strVal);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"AtomicCodec序列化\"><a href=\"#AtomicCodec序列化\" class=\"headerlink\" title=\"AtomicCodec序列化\"></a>AtomicCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> AtomicInteger) &#123;</span><br><span class=\"line\">        AtomicInteger val = (AtomicInteger) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取整数输出 */</span></span><br><span class=\"line\">        out.writeInt(val.get());</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> AtomicLong) &#123;</span><br><span class=\"line\">        AtomicLong val = (AtomicLong) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取长整数输出 */</span></span><br><span class=\"line\">        out.writeLong(val.get());</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> AtomicBoolean) &#123;</span><br><span class=\"line\">        AtomicBoolean val = (AtomicBoolean) object;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取boolean值输出 */</span></span><br><span class=\"line\">        out.append(val.get() ? <span class=\"string\">\"true\"</span> : <span class=\"string\">\"false\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是原子数组类型, 如果为null，输出[] */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 遍历AtomicIntegerArray，输出int数组类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> AtomicIntegerArray) &#123;</span><br><span class=\"line\">        AtomicIntegerArray array = (AtomicIntegerArray) object;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = array.length();</span><br><span class=\"line\">        out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> val = array.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            out.writeInt(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 遍历AtomicLongArray，输出long数组类型 */</span></span><br><span class=\"line\">    AtomicLongArray array = (AtomicLongArray) object;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = array.length();</span><br><span class=\"line\">    out.write(<span class=\"string\">'['</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> val = array.get(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.writeLong(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out.write(<span class=\"string\">']'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ReferenceCodec序列化\"><a href=\"#ReferenceCodec序列化\" class=\"headerlink\" title=\"ReferenceCodec序列化\"></a>ReferenceCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    Object item;</span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是Reference类型,</span></span><br><span class=\"line\"><span class=\"comment\">     *  调用get()查找对应的class序列化器输出</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> AtomicReference) &#123;</span><br><span class=\"line\">        AtomicReference val = (AtomicReference) object;</span><br><span class=\"line\">        item = val.get();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        item = ((Reference) object).get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    serializer.write(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"CollectionCodec序列化\"><a href=\"#CollectionCodec序列化\" class=\"headerlink\" title=\"CollectionCodec序列化\"></a>CollectionCodec序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 当前object是集合对象, 如果为null,</span></span><br><span class=\"line\"><span class=\"comment\">     *  并且序列化开启WriteNullListAsEmpty特性, 输出空串[]</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Type elementType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)</span><br><span class=\"line\">            || SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取字段泛型类型 */</span></span><br><span class=\"line\">        elementType = TypeUtils.getCollectionItemType(fieldType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Collection&lt;?&gt; collection = (Collection&lt;?&gt;) object;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext context = serializer.context;</span><br><span class=\"line\">    serializer.setContext(context, object, fieldName, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (HashSet.class == collection.getClass()) &#123;</span><br><span class=\"line\">            out.append(<span class=\"string\">\"Set\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (TreeSet.class == collection.getClass()) &#123;</span><br><span class=\"line\">            out.append(<span class=\"string\">\"TreeSet\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        out.append(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Object item : collection) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i++ != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.append(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                out.writeNull();</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; clazz = item.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 获取整形类型值，输出 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (clazz == Integer.class) &#123;</span><br><span class=\"line\">                out.writeInt(((Integer) item).intValue());</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 获取整形长类型值，输出并添加L标识(如果开启WriteClassName特性) */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (clazz == Long.class) &#123;</span><br><span class=\"line\">                out.writeLong(((Long) item).longValue());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">                    out.write(<span class=\"string\">'L'</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 根据集合类型查找序列化实例处理，JavaBeanSerializer后面单独分析 */</span></span><br><span class=\"line\">            ObjectSerializer itemSerializer = serializer.getObjectWriter(clazz);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)</span><br><span class=\"line\">                    &amp;&amp; itemSerializer <span class=\"keyword\">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class=\"line\">                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) itemSerializer;</span><br><span class=\"line\">                javaBeanSerializer.writeNoneASM(serializer, item, i - <span class=\"number\">1</span>, elementType, features);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                itemSerializer.write(serializer, item, i - <span class=\"number\">1</span>, elementType, features);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.append(<span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        serializer.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Dubbo无法处理Spring代理对象","subtitle":"在阿里重启开源之前，基于`dubbo`注解的服务暴露有很多缺陷。公司小伙伴找到我帮他分析一个`dubbo`服务使用`aop`不生效的问题","cover":"/images/spring.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-10-01T05:17:49.000Z","_content":"\n## 背景\n\n在阿里重启开源之前，基于`dubbo`注解的服务暴露有很多缺陷。公司小伙伴找到我帮他分析一个`dubbo`服务使用`aop`不生效的问题，最后分析发现是在使用aop场景下如果接口包含循环依赖，`dubbo`服务暴露是拿不到代理，所以就导致不生效了。\n\n为了简化背景，业务方同学对外暴露`controller`接收`http`请求, 依赖关系：\n\n```\n\tController \n\t\t-> DeliveryOperateService \n\t\t\t-> CancelDistOrderProcessor \n\t\t\t\t-> DeliveryOperateService\n```\n\n这里大家应该发现循环依赖了, `DeliveryOperateService `是应用了aop拦截，这种场景在开源版本`dubbo 2.5.8`之前是无法正确处理的。\n\n\n\n``` java\n// Controller\n@RestController\n@RequestMapping(\"/trade-dc/operate\")\npublic class DeliveryOperateController {\n\n  @Resource\n  private DeliveryOperateService deliveryOperateService;\n  ...\n}\n\n// DeliveryOperateService\n@com.alibaba.dubbo.config.annotation.Service(protocol = {\"dubbo\"}, registry = {\"haunt\"})\npublic class DeliveryOperateServiceImpl implements DeliveryOperateService {\n\n  @Resource\n  private CancelDistOrderProcessor cancelDistOrderProcessor;\n  ...\n}\n\n// CancelDistOrderProcessor\n@Component\npublic class CancelDistOrderProcessor implements IComponent {\n\n  @Resource\n  private DeliveryOperateService deliveryOperateService;\n  ...\n}\n```\n\n在正常情况下，如果使用aop在dubbo暴露服务时会传递正确的spring动态代理后的对象:\n\n<img src=\"https://zonghaishang.github.io/images/1538291854892.png\" class=\"pretty\">\n\n`Dubbo`服务暴露实际持有的对象是代理后的对象。但是因为循环依赖Dubbo提前拿到`DeliveryOperateService`非代理的实例。\n\n### 我们来看下为什么这种场景`Dubbo`无法处理？\n\n<img src=\"https://zonghaishang.github.io/images/1538293549011.png\" class=\"pretty\">\n\n### Step1, `Spring`启动初始化`Controller`, 对属性进行注入\n\n### Step2, `Controller`触发`DeliveryOperateService`创建实例\n\n<img src=\"https://zonghaishang.github.io/images/1538296119277.png\" class=\"pretty\">\n\n第一次依赖注入就会触发bean的实例化并且保存在`exposedObject`中，，注意，这里是非代理对象。\n\n### Step3, `DeliveryOperateService`依赖`CancelDistOrderProcessor`并触发它初始化\n\n<img src=\"https://zonghaishang.github.io/images/1538296756913.png\" class=\"pretty\">\n\n这里也没什么特殊的，在`populateBean`会触发循环依赖`DeliveryOperateService`加载，这时候`earlySingletonExposure`值为true, 代表bean提前暴露。\n\n### Step4, 在前一步触发，`DeliveryOperateService`其实会创建动态代理\n\n<img src=\"https://zonghaishang.github.io/images/1538297025076.png\" class=\"pretty\">\n\n循环引用会导致提前暴露`earlySingletonExposure=true`，这个时候加载的是`getEarlyBeanReference`，在里面创建spring动态代理：\n\n<img src=\"https://zonghaishang.github.io/images/1538297199420.png\" class=\"pretty\">\n\n在创建完动态代理后，`DeliveryOperateService`会加入`earlyProxyReferences`，后面再获取这个`bean`就不会再重复创建代理了。\n\n<img src=\"https://zonghaishang.github.io/images/1538297380747.png\" class=\"pretty\">\n\n到此，`DeliveryOperateService`确实会创建，并且会用在`CancelDistOrderProcessor`对应注入的字段中。\n\n### Step6, 触发Dubbo服务暴露的实例不是代理\n\n因为在`CancelDistOrderProcessor`中已经触发了代理生成，所以第`Step1`中的实例不会再创建代理了。\n\n<img src=\"https://zonghaishang.github.io/images/1538297678652.png\" class=\"pretty\">\n\n在代码`555`会触发`dubbo AnnotationBean`进行服务暴露，但是这个不是代理实例了，但是为什么spring还是正确返回代理后的实例呢？\n\n<img src=\"https://zonghaishang.github.io/images/1538297855578.png\" class=\"pretty\">\n\n因为循环引用触发`earlySingletonExposure=true`, 并且在前面已经生成过动态代理了，可以直接在`getSingleton`拿到动态代理的返回了。\n\n\n好了，基本原因已经分析的够清楚了，我觉的有2点注意事项：\n\n- `dubbo`原来注解实现声明周期没搞清楚\n- `spring`如果能提前判断循环引用获取`exposedObject`也没问题\n\n``` java\nif (earlySingletonExposure) {\n    Object earlySingletonReference = getSingleton(beanName, false);\n\tif (earlySingletonReference != null) {\n\t\tif (exposedObject == bean) {\n\t\t\texposedObject = earlySingletonReference;\n\t\t}\n}\n```\n比如把循环引用逻辑提前到`populateBean`之前判断一下。\n\n### 为什么在开源`dubbo 2.5.8`版本之后没有这个问题？\n\n重写后的注解实现，我深入研究过，新版本实现不会提前使用没有代理的bean，关键代码：\n\n```\n// ServiceAnnotationBeanPostProcessor\n@Override\npublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {\n\n\tSet<String> resolvedPackagesToScan = resolvePackagesToScan(packagesToScan);\n\n\tif (!CollectionUtils.isEmpty(resolvedPackagesToScan)) {\n\t\tregisterServiceBeans(resolvedPackagesToScan, registry);\n\t} else {\n\t\t if (logger.isWarnEnabled()) {\n\t\t\t\t logger.warn(\"packagesToScan is empty , ServiceBean registry will be ignored!\");\n\t\t\t}\n\t}\n}\n\n```\n\n`ServiceAnnotationBeanPostProcessor` 实现`BeanDefinitionRegistryPostProcessor`接口，会在所有`spring bean`真正初始化前完成`dubbo`服务的注册，整个生命周期中不会触碰到代理前的对象。\n\n### 总结\n\n我其实平时不太习惯写文章，但是发现分析后的问题记录下来可以让更多同学收益。\n","source":"_posts/Spring杂谈-循环依赖导致Dubbo服务无法被正确代理.md","raw":"---\ntitle: Dubbo无法处理Spring代理对象\nsubtitle: 在阿里重启开源之前，基于`dubbo`注解的服务暴露有很多缺陷。公司小伙伴找到我帮他分析一个`dubbo`服务使用`aop`不生效的问题\ncover: /images/spring.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n  - Spring杂谈\n  - Dubbo框架问题\ncategories:\n  - Spring杂谈\ndate: 2018-10-01 13:17:49\n---\n\n## 背景\n\n在阿里重启开源之前，基于`dubbo`注解的服务暴露有很多缺陷。公司小伙伴找到我帮他分析一个`dubbo`服务使用`aop`不生效的问题，最后分析发现是在使用aop场景下如果接口包含循环依赖，`dubbo`服务暴露是拿不到代理，所以就导致不生效了。\n\n为了简化背景，业务方同学对外暴露`controller`接收`http`请求, 依赖关系：\n\n```\n\tController \n\t\t-> DeliveryOperateService \n\t\t\t-> CancelDistOrderProcessor \n\t\t\t\t-> DeliveryOperateService\n```\n\n这里大家应该发现循环依赖了, `DeliveryOperateService `是应用了aop拦截，这种场景在开源版本`dubbo 2.5.8`之前是无法正确处理的。\n\n\n\n``` java\n// Controller\n@RestController\n@RequestMapping(\"/trade-dc/operate\")\npublic class DeliveryOperateController {\n\n  @Resource\n  private DeliveryOperateService deliveryOperateService;\n  ...\n}\n\n// DeliveryOperateService\n@com.alibaba.dubbo.config.annotation.Service(protocol = {\"dubbo\"}, registry = {\"haunt\"})\npublic class DeliveryOperateServiceImpl implements DeliveryOperateService {\n\n  @Resource\n  private CancelDistOrderProcessor cancelDistOrderProcessor;\n  ...\n}\n\n// CancelDistOrderProcessor\n@Component\npublic class CancelDistOrderProcessor implements IComponent {\n\n  @Resource\n  private DeliveryOperateService deliveryOperateService;\n  ...\n}\n```\n\n在正常情况下，如果使用aop在dubbo暴露服务时会传递正确的spring动态代理后的对象:\n\n<img src=\"https://zonghaishang.github.io/images/1538291854892.png\" class=\"pretty\">\n\n`Dubbo`服务暴露实际持有的对象是代理后的对象。但是因为循环依赖Dubbo提前拿到`DeliveryOperateService`非代理的实例。\n\n### 我们来看下为什么这种场景`Dubbo`无法处理？\n\n<img src=\"https://zonghaishang.github.io/images/1538293549011.png\" class=\"pretty\">\n\n### Step1, `Spring`启动初始化`Controller`, 对属性进行注入\n\n### Step2, `Controller`触发`DeliveryOperateService`创建实例\n\n<img src=\"https://zonghaishang.github.io/images/1538296119277.png\" class=\"pretty\">\n\n第一次依赖注入就会触发bean的实例化并且保存在`exposedObject`中，，注意，这里是非代理对象。\n\n### Step3, `DeliveryOperateService`依赖`CancelDistOrderProcessor`并触发它初始化\n\n<img src=\"https://zonghaishang.github.io/images/1538296756913.png\" class=\"pretty\">\n\n这里也没什么特殊的，在`populateBean`会触发循环依赖`DeliveryOperateService`加载，这时候`earlySingletonExposure`值为true, 代表bean提前暴露。\n\n### Step4, 在前一步触发，`DeliveryOperateService`其实会创建动态代理\n\n<img src=\"https://zonghaishang.github.io/images/1538297025076.png\" class=\"pretty\">\n\n循环引用会导致提前暴露`earlySingletonExposure=true`，这个时候加载的是`getEarlyBeanReference`，在里面创建spring动态代理：\n\n<img src=\"https://zonghaishang.github.io/images/1538297199420.png\" class=\"pretty\">\n\n在创建完动态代理后，`DeliveryOperateService`会加入`earlyProxyReferences`，后面再获取这个`bean`就不会再重复创建代理了。\n\n<img src=\"https://zonghaishang.github.io/images/1538297380747.png\" class=\"pretty\">\n\n到此，`DeliveryOperateService`确实会创建，并且会用在`CancelDistOrderProcessor`对应注入的字段中。\n\n### Step6, 触发Dubbo服务暴露的实例不是代理\n\n因为在`CancelDistOrderProcessor`中已经触发了代理生成，所以第`Step1`中的实例不会再创建代理了。\n\n<img src=\"https://zonghaishang.github.io/images/1538297678652.png\" class=\"pretty\">\n\n在代码`555`会触发`dubbo AnnotationBean`进行服务暴露，但是这个不是代理实例了，但是为什么spring还是正确返回代理后的实例呢？\n\n<img src=\"https://zonghaishang.github.io/images/1538297855578.png\" class=\"pretty\">\n\n因为循环引用触发`earlySingletonExposure=true`, 并且在前面已经生成过动态代理了，可以直接在`getSingleton`拿到动态代理的返回了。\n\n\n好了，基本原因已经分析的够清楚了，我觉的有2点注意事项：\n\n- `dubbo`原来注解实现声明周期没搞清楚\n- `spring`如果能提前判断循环引用获取`exposedObject`也没问题\n\n``` java\nif (earlySingletonExposure) {\n    Object earlySingletonReference = getSingleton(beanName, false);\n\tif (earlySingletonReference != null) {\n\t\tif (exposedObject == bean) {\n\t\t\texposedObject = earlySingletonReference;\n\t\t}\n}\n```\n比如把循环引用逻辑提前到`populateBean`之前判断一下。\n\n### 为什么在开源`dubbo 2.5.8`版本之后没有这个问题？\n\n重写后的注解实现，我深入研究过，新版本实现不会提前使用没有代理的bean，关键代码：\n\n```\n// ServiceAnnotationBeanPostProcessor\n@Override\npublic void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException {\n\n\tSet<String> resolvedPackagesToScan = resolvePackagesToScan(packagesToScan);\n\n\tif (!CollectionUtils.isEmpty(resolvedPackagesToScan)) {\n\t\tregisterServiceBeans(resolvedPackagesToScan, registry);\n\t} else {\n\t\t if (logger.isWarnEnabled()) {\n\t\t\t\t logger.warn(\"packagesToScan is empty , ServiceBean registry will be ignored!\");\n\t\t\t}\n\t}\n}\n\n```\n\n`ServiceAnnotationBeanPostProcessor` 实现`BeanDefinitionRegistryPostProcessor`接口，会在所有`spring bean`真正初始化前完成`dubbo`服务的注册，整个生命周期中不会触碰到代理前的对象。\n\n### 总结\n\n我其实平时不太习惯写文章，但是发现分析后的问题记录下来可以让更多同学收益。\n","slug":"Spring杂谈-循环依赖导致Dubbo服务无法被正确代理","published":1,"updated":"2018-10-11T16:53:04.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4ete000pxat82wzgsv5z","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在阿里重启开源之前，基于<code>dubbo</code>注解的服务暴露有很多缺陷。公司小伙伴找到我帮他分析一个<code>dubbo</code>服务使用<code>aop</code>不生效的问题，最后分析发现是在使用aop场景下如果接口包含循环依赖，<code>dubbo</code>服务暴露是拿不到代理，所以就导致不生效了。</p>\n<p>为了简化背景，业务方同学对外暴露<code>controller</code>接收<code>http</code>请求, 依赖关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Controller </span><br><span class=\"line\">\t-&gt; DeliveryOperateService </span><br><span class=\"line\">\t\t-&gt; CancelDistOrderProcessor </span><br><span class=\"line\">\t\t\t-&gt; DeliveryOperateService</span><br></pre></td></tr></table></figure>\n<p>这里大家应该发现循环依赖了, <code>DeliveryOperateService</code>是应用了aop拦截，这种场景在开源版本<code>dubbo 2.5.8</code>之前是无法正确处理的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/trade-dc/operate\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeliveryOperateController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Resource</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> DeliveryOperateService deliveryOperateService;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DeliveryOperateService</span></span><br><span class=\"line\"><span class=\"meta\">@com</span>.alibaba.dubbo.config.annotation.Service(protocol = &#123;<span class=\"string\">\"dubbo\"</span>&#125;, registry = &#123;<span class=\"string\">\"haunt\"</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeliveryOperateServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DeliveryOperateService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Resource</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> CancelDistOrderProcessor cancelDistOrderProcessor;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CancelDistOrderProcessor</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CancelDistOrderProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">IComponent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Resource</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> DeliveryOperateService deliveryOperateService;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在正常情况下，如果使用aop在dubbo暴露服务时会传递正确的spring动态代理后的对象:</p>\n<p><img src=\"https://zonghaishang.github.io/images/1538291854892.png\" class=\"pretty\"></p>\n<p><code>Dubbo</code>服务暴露实际持有的对象是代理后的对象。但是因为循环依赖Dubbo提前拿到<code>DeliveryOperateService</code>非代理的实例。</p>\n<h3 id=\"我们来看下为什么这种场景Dubbo无法处理？\"><a href=\"#我们来看下为什么这种场景Dubbo无法处理？\" class=\"headerlink\" title=\"我们来看下为什么这种场景Dubbo无法处理？\"></a>我们来看下为什么这种场景<code>Dubbo</code>无法处理？</h3><p><img src=\"https://zonghaishang.github.io/images/1538293549011.png\" class=\"pretty\"></p>\n<h3 id=\"Step1-Spring启动初始化Controller-对属性进行注入\"><a href=\"#Step1-Spring启动初始化Controller-对属性进行注入\" class=\"headerlink\" title=\"Step1, Spring启动初始化Controller, 对属性进行注入\"></a>Step1, <code>Spring</code>启动初始化<code>Controller</code>, 对属性进行注入</h3><h3 id=\"Step2-Controller触发DeliveryOperateService创建实例\"><a href=\"#Step2-Controller触发DeliveryOperateService创建实例\" class=\"headerlink\" title=\"Step2, Controller触发DeliveryOperateService创建实例\"></a>Step2, <code>Controller</code>触发<code>DeliveryOperateService</code>创建实例</h3><p><img src=\"https://zonghaishang.github.io/images/1538296119277.png\" class=\"pretty\"></p>\n<p>第一次依赖注入就会触发bean的实例化并且保存在<code>exposedObject</code>中，，注意，这里是非代理对象。</p>\n<h3 id=\"Step3-DeliveryOperateService依赖CancelDistOrderProcessor并触发它初始化\"><a href=\"#Step3-DeliveryOperateService依赖CancelDistOrderProcessor并触发它初始化\" class=\"headerlink\" title=\"Step3, DeliveryOperateService依赖CancelDistOrderProcessor并触发它初始化\"></a>Step3, <code>DeliveryOperateService</code>依赖<code>CancelDistOrderProcessor</code>并触发它初始化</h3><p><img src=\"https://zonghaishang.github.io/images/1538296756913.png\" class=\"pretty\"></p>\n<p>这里也没什么特殊的，在<code>populateBean</code>会触发循环依赖<code>DeliveryOperateService</code>加载，这时候<code>earlySingletonExposure</code>值为true, 代表bean提前暴露。</p>\n<h3 id=\"Step4-在前一步触发，DeliveryOperateService其实会创建动态代理\"><a href=\"#Step4-在前一步触发，DeliveryOperateService其实会创建动态代理\" class=\"headerlink\" title=\"Step4, 在前一步触发，DeliveryOperateService其实会创建动态代理\"></a>Step4, 在前一步触发，<code>DeliveryOperateService</code>其实会创建动态代理</h3><p><img src=\"https://zonghaishang.github.io/images/1538297025076.png\" class=\"pretty\"></p>\n<p>循环引用会导致提前暴露<code>earlySingletonExposure=true</code>，这个时候加载的是<code>getEarlyBeanReference</code>，在里面创建spring动态代理：</p>\n<p><img src=\"https://zonghaishang.github.io/images/1538297199420.png\" class=\"pretty\"></p>\n<p>在创建完动态代理后，<code>DeliveryOperateService</code>会加入<code>earlyProxyReferences</code>，后面再获取这个<code>bean</code>就不会再重复创建代理了。</p>\n<p><img src=\"https://zonghaishang.github.io/images/1538297380747.png\" class=\"pretty\"></p>\n<p>到此，<code>DeliveryOperateService</code>确实会创建，并且会用在<code>CancelDistOrderProcessor</code>对应注入的字段中。</p>\n<h3 id=\"Step6-触发Dubbo服务暴露的实例不是代理\"><a href=\"#Step6-触发Dubbo服务暴露的实例不是代理\" class=\"headerlink\" title=\"Step6, 触发Dubbo服务暴露的实例不是代理\"></a>Step6, 触发Dubbo服务暴露的实例不是代理</h3><p>因为在<code>CancelDistOrderProcessor</code>中已经触发了代理生成，所以第<code>Step1</code>中的实例不会再创建代理了。</p>\n<p><img src=\"https://zonghaishang.github.io/images/1538297678652.png\" class=\"pretty\"></p>\n<p>在代码<code>555</code>会触发<code>dubbo AnnotationBean</code>进行服务暴露，但是这个不是代理实例了，但是为什么spring还是正确返回代理后的实例呢？</p>\n<p><img src=\"https://zonghaishang.github.io/images/1538297855578.png\" class=\"pretty\"></p>\n<p>因为循环引用触发<code>earlySingletonExposure=true</code>, 并且在前面已经生成过动态代理了，可以直接在<code>getSingleton</code>拿到动态代理的返回了。</p>\n<p>好了，基本原因已经分析的够清楚了，我觉的有2点注意事项：</p>\n<ul>\n<li><code>dubbo</code>原来注解实现声明周期没搞清楚</li>\n<li><code>spring</code>如果能提前判断循环引用获取<code>exposedObject</code>也没问题</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">    Object earlySingletonReference = getSingleton(beanName, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (earlySingletonReference != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exposedObject == bean) &#123;</span><br><span class=\"line\">\t\t\texposedObject = earlySingletonReference;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如把循环引用逻辑提前到<code>populateBean</code>之前判断一下。</p>\n<h3 id=\"为什么在开源dubbo-2-5-8版本之后没有这个问题？\"><a href=\"#为什么在开源dubbo-2-5-8版本之后没有这个问题？\" class=\"headerlink\" title=\"为什么在开源dubbo 2.5.8版本之后没有这个问题？\"></a>为什么在开源<code>dubbo 2.5.8</code>版本之后没有这个问题？</h3><p>重写后的注解实现，我深入研究过，新版本实现不会提前使用没有代理的bean，关键代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ServiceAnnotationBeanPostProcessor</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSet&lt;String&gt; resolvedPackagesToScan = resolvePackagesToScan(packagesToScan);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (!CollectionUtils.isEmpty(resolvedPackagesToScan)) &#123;</span><br><span class=\"line\">\t\tregisterServiceBeans(resolvedPackagesToScan, registry);</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\t if (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t logger.warn(&quot;packagesToScan is empty , ServiceBean registry will be ignored!&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ServiceAnnotationBeanPostProcessor</code> 实现<code>BeanDefinitionRegistryPostProcessor</code>接口，会在所有<code>spring bean</code>真正初始化前完成<code>dubbo</code>服务的注册，整个生命周期中不会触碰到代理前的对象。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>我其实平时不太习惯写文章，但是发现分析后的问题记录下来可以让更多同学收益。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在阿里重启开源之前，基于<code>dubbo</code>注解的服务暴露有很多缺陷。公司小伙伴找到我帮他分析一个<code>dubbo</code>服务使用<code>aop</code>不生效的问题，最后分析发现是在使用aop场景下如果接口包含循环依赖，<code>dubbo</code>服务暴露是拿不到代理，所以就导致不生效了。</p>\n<p>为了简化背景，业务方同学对外暴露<code>controller</code>接收<code>http</code>请求, 依赖关系：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Controller </span><br><span class=\"line\">\t-&gt; DeliveryOperateService </span><br><span class=\"line\">\t\t-&gt; CancelDistOrderProcessor </span><br><span class=\"line\">\t\t\t-&gt; DeliveryOperateService</span><br></pre></td></tr></table></figure>\n<p>这里大家应该发现循环依赖了, <code>DeliveryOperateService</code>是应用了aop拦截，这种场景在开源版本<code>dubbo 2.5.8</code>之前是无法正确处理的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/trade-dc/operate\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeliveryOperateController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Resource</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> DeliveryOperateService deliveryOperateService;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DeliveryOperateService</span></span><br><span class=\"line\"><span class=\"meta\">@com</span>.alibaba.dubbo.config.annotation.Service(protocol = &#123;<span class=\"string\">\"dubbo\"</span>&#125;, registry = &#123;<span class=\"string\">\"haunt\"</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DeliveryOperateServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DeliveryOperateService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Resource</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> CancelDistOrderProcessor cancelDistOrderProcessor;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CancelDistOrderProcessor</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CancelDistOrderProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">IComponent</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Resource</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> DeliveryOperateService deliveryOperateService;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在正常情况下，如果使用aop在dubbo暴露服务时会传递正确的spring动态代理后的对象:</p>\n<p><img src=\"https://zonghaishang.github.io/images/1538291854892.png\" class=\"pretty\"></p>\n<p><code>Dubbo</code>服务暴露实际持有的对象是代理后的对象。但是因为循环依赖Dubbo提前拿到<code>DeliveryOperateService</code>非代理的实例。</p>\n<h3 id=\"我们来看下为什么这种场景Dubbo无法处理？\"><a href=\"#我们来看下为什么这种场景Dubbo无法处理？\" class=\"headerlink\" title=\"我们来看下为什么这种场景Dubbo无法处理？\"></a>我们来看下为什么这种场景<code>Dubbo</code>无法处理？</h3><p><img src=\"https://zonghaishang.github.io/images/1538293549011.png\" class=\"pretty\"></p>\n<h3 id=\"Step1-Spring启动初始化Controller-对属性进行注入\"><a href=\"#Step1-Spring启动初始化Controller-对属性进行注入\" class=\"headerlink\" title=\"Step1, Spring启动初始化Controller, 对属性进行注入\"></a>Step1, <code>Spring</code>启动初始化<code>Controller</code>, 对属性进行注入</h3><h3 id=\"Step2-Controller触发DeliveryOperateService创建实例\"><a href=\"#Step2-Controller触发DeliveryOperateService创建实例\" class=\"headerlink\" title=\"Step2, Controller触发DeliveryOperateService创建实例\"></a>Step2, <code>Controller</code>触发<code>DeliveryOperateService</code>创建实例</h3><p><img src=\"https://zonghaishang.github.io/images/1538296119277.png\" class=\"pretty\"></p>\n<p>第一次依赖注入就会触发bean的实例化并且保存在<code>exposedObject</code>中，，注意，这里是非代理对象。</p>\n<h3 id=\"Step3-DeliveryOperateService依赖CancelDistOrderProcessor并触发它初始化\"><a href=\"#Step3-DeliveryOperateService依赖CancelDistOrderProcessor并触发它初始化\" class=\"headerlink\" title=\"Step3, DeliveryOperateService依赖CancelDistOrderProcessor并触发它初始化\"></a>Step3, <code>DeliveryOperateService</code>依赖<code>CancelDistOrderProcessor</code>并触发它初始化</h3><p><img src=\"https://zonghaishang.github.io/images/1538296756913.png\" class=\"pretty\"></p>\n<p>这里也没什么特殊的，在<code>populateBean</code>会触发循环依赖<code>DeliveryOperateService</code>加载，这时候<code>earlySingletonExposure</code>值为true, 代表bean提前暴露。</p>\n<h3 id=\"Step4-在前一步触发，DeliveryOperateService其实会创建动态代理\"><a href=\"#Step4-在前一步触发，DeliveryOperateService其实会创建动态代理\" class=\"headerlink\" title=\"Step4, 在前一步触发，DeliveryOperateService其实会创建动态代理\"></a>Step4, 在前一步触发，<code>DeliveryOperateService</code>其实会创建动态代理</h3><p><img src=\"https://zonghaishang.github.io/images/1538297025076.png\" class=\"pretty\"></p>\n<p>循环引用会导致提前暴露<code>earlySingletonExposure=true</code>，这个时候加载的是<code>getEarlyBeanReference</code>，在里面创建spring动态代理：</p>\n<p><img src=\"https://zonghaishang.github.io/images/1538297199420.png\" class=\"pretty\"></p>\n<p>在创建完动态代理后，<code>DeliveryOperateService</code>会加入<code>earlyProxyReferences</code>，后面再获取这个<code>bean</code>就不会再重复创建代理了。</p>\n<p><img src=\"https://zonghaishang.github.io/images/1538297380747.png\" class=\"pretty\"></p>\n<p>到此，<code>DeliveryOperateService</code>确实会创建，并且会用在<code>CancelDistOrderProcessor</code>对应注入的字段中。</p>\n<h3 id=\"Step6-触发Dubbo服务暴露的实例不是代理\"><a href=\"#Step6-触发Dubbo服务暴露的实例不是代理\" class=\"headerlink\" title=\"Step6, 触发Dubbo服务暴露的实例不是代理\"></a>Step6, 触发Dubbo服务暴露的实例不是代理</h3><p>因为在<code>CancelDistOrderProcessor</code>中已经触发了代理生成，所以第<code>Step1</code>中的实例不会再创建代理了。</p>\n<p><img src=\"https://zonghaishang.github.io/images/1538297678652.png\" class=\"pretty\"></p>\n<p>在代码<code>555</code>会触发<code>dubbo AnnotationBean</code>进行服务暴露，但是这个不是代理实例了，但是为什么spring还是正确返回代理后的实例呢？</p>\n<p><img src=\"https://zonghaishang.github.io/images/1538297855578.png\" class=\"pretty\"></p>\n<p>因为循环引用触发<code>earlySingletonExposure=true</code>, 并且在前面已经生成过动态代理了，可以直接在<code>getSingleton</code>拿到动态代理的返回了。</p>\n<p>好了，基本原因已经分析的够清楚了，我觉的有2点注意事项：</p>\n<ul>\n<li><code>dubbo</code>原来注解实现声明周期没搞清楚</li>\n<li><code>spring</code>如果能提前判断循环引用获取<code>exposedObject</code>也没问题</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (earlySingletonExposure) &#123;</span><br><span class=\"line\">    Object earlySingletonReference = getSingleton(beanName, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (earlySingletonReference != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exposedObject == bean) &#123;</span><br><span class=\"line\">\t\t\texposedObject = earlySingletonReference;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如把循环引用逻辑提前到<code>populateBean</code>之前判断一下。</p>\n<h3 id=\"为什么在开源dubbo-2-5-8版本之后没有这个问题？\"><a href=\"#为什么在开源dubbo-2-5-8版本之后没有这个问题？\" class=\"headerlink\" title=\"为什么在开源dubbo 2.5.8版本之后没有这个问题？\"></a>为什么在开源<code>dubbo 2.5.8</code>版本之后没有这个问题？</h3><p>重写后的注解实现，我深入研究过，新版本实现不会提前使用没有代理的bean，关键代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ServiceAnnotationBeanPostProcessor</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) throws BeansException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSet&lt;String&gt; resolvedPackagesToScan = resolvePackagesToScan(packagesToScan);</span><br><span class=\"line\"></span><br><span class=\"line\">\tif (!CollectionUtils.isEmpty(resolvedPackagesToScan)) &#123;</span><br><span class=\"line\">\t\tregisterServiceBeans(resolvedPackagesToScan, registry);</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\t if (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\t logger.warn(&quot;packagesToScan is empty , ServiceBean registry will be ignored!&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ServiceAnnotationBeanPostProcessor</code> 实现<code>BeanDefinitionRegistryPostProcessor</code>接口，会在所有<code>spring bean</code>真正初始化前完成<code>dubbo</code>服务的注册，整个生命周期中不会触碰到代理前的对象。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>我其实平时不太习惯写文章，但是发现分析后的问题记录下来可以让更多同学收益。</p>\n"},{"title":"源码编译openjdk8","subtitle":"openjdk 的模块，部分使用 C/C++ 编写实现，部分使用 Java 实现。因此除了需要 C/C++ 相关编译工具外，还需要有一个 JDK (Bootstrap JDK)。编译 openjdk8 时可使用jdk1.7 作为 Bootstrap JDK 。","cover":"/images/jdk.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:00:19.000Z","_content":"\n## macOS High Sierra 编译openjdk 8\n\n本次编译使用的系统是 `macOS High Sierra`，版本为 `10.13.2`。使用的 jdk 是 openjdk 8 。\n\n### 概述\n\nopenjdk 的模块，部分使用 C/C++ 编写实现，部分使用 Java 实现。因此除了需要 C/C++ 相关编译工具外，还需要有一个 JDK (Bootstrap JDK)。编译 openjdk8 时可使用 jdk1.7 作为 Bootstrap JDK 。\n\n我当前系统已经安装了jdk1.7 ：\n\n```\n$ java -version\njava version \"1.7.0_79\"\nJava(TM) SE Runtime Environment (build 1.7.0_79-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)\n```\n\n### 安装准备\n\n#### 源码下载\n\n因为代码比较大，国内采用镜像下载：\n\n```\ngit clone https://gitee.com/gorden5566/jdk8u.git\ncd jdk8u/\ngit checkout --track origin/fix\nsh ./getModules.sh\n```\n\n### 安装依赖\n\n* 安装freetype\n\n```\nbrew install freetype\n```\n或者进入官网[XQuartx](https://www.xquartz.org/)下载dmg安装。\n\n* 安装xcode\n\n直接从 `App Store` 中下载安装 或命令行安装 `xcode-select --install` \n\n* 安装gcc编译器\n\n不要安装编译器版本高于5的，因为默认启用c++14 导致编译中断\n```\nbrew install gcc@4.9\n```\n\n* 链接gcc编译器(4.9版本)\n\n```\nsudo ln -s /usr/local/Cellar/gcc@4.9/4.9.4/bin/gcc-4.9 /usr/bin/gcc\nsudo ln -s /usr/local/Cellar/gcc@4.9/4.9.4/bin/g++-4.9 /usr/bin/g++\n```\n\n如果安装gcc版本和我的不一样，需要自行替换。\n\n* 添加环境变量(~/.bash_profile)\n\n```\nexport LFLAGS='-Xlinker -lstdc++'\n```\n\n添加执行命令生效：\n\n```\nsource ~/.bash_profile\n```\n\n* 源码修改\n\n修改openjdk/hotspot/src/share/vm/opto/loopPredicate.cpp 第775行\n```\n assert(rng->Opcode() == Op_LoadRange || _igvn.type(rng)->is_int()->_lo >= 0, \"must be\");\n```\n\n 在is_int()后在添加 ->_lo 。\n\n 修改openjdk/jdk/src/macosx/native/sun/osxapp/ThreadUtilities.m 第一个函数\n\n ```\n static inline void attachCurrentThread(void** env);\n ```\n\n函数名前面添加static 关键字。\n\n## 开始编译\n\n为了方便我直接指定我当前bootstrap jdk1.7的版本，我的~/.bash_profile :\n\n```\nexport ANT_HOME=/Users/Jason/tools/apache-ant-1.10.1\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home\n# export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JAVA_HOME}/jre/lib:${ANT_HOME}/lib\n```\n\n### 生成配置\n\n```\nexport MACOSX_DEPLOYMENT_TARGET=10.13.2\n\nbash ./configure --with-target-bits=64 --enable-ccache --with-boot-jdk-jvmargs=\"-Xlint:deprecation -Xlint:unchecked\"  --disable-zip-debug-info --with-freetype-include=/usr/local/Cellar/freetype/2.9/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.9/lib --with-debug-level=slowdebug \n```\n 其中freetype是前面安装的路径，可以进/usr/local/Cellar目录查看自己\b对应版本\n\n 执行命令后我电脑输出：\n\n```\n====================================================\nA new configuration has been successfully created in\n/Users/Jason/openjdk/jdk8u-default/build/macosx-x86_64-normal-server-slowdebug\nusing configure arguments '--with-target-bits=64 --enable-ccache --with-boot-jdk-jvmargs=-Xlint:deprecation -Xlint:unchecked --disable-zip-debug-info --with-freetype-include=/usr/local/Cellar/freetype/2.9/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.9/lib --with-debug-level=slowdebug'.\n\nConfiguration summary:\n* Debug level:    slowdebug\n* JDK variant:    normal\n* JVM variants:   server\n* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64\n\nTools summary:\n* Boot JDK:       java version \"1.7.0_79\" Java(TM) SE Runtime Environment (build 1.7.0_79-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)  (at /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home)\n* C Compiler:      version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 (at /Applications/Xcode.app/Contents/Developer/usr/bin/gcc)\n* C++ Compiler:    version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 (at /Applications/Xcode.app/Contents/Developer/usr/bin/gcc)\n\nBuild performance summary:\n* Cores to use:   4\n* Memory limit:   16384 MB\n* ccache status:  installed, but disabled (version older than 3.1.4)\n\nWARNING: The result of this configuration has overridden an older\nconfiguration. You *should* run 'make clean' to make sure you get a\nproper build. Failure to do so might result in strange build problems.\n```\n\n### 生成jdk8\n\n```\nmake all COMPILER_WARNINGS_FATAL=false\n```\n\n生成jdk8\b成功会输出耗时信息：\n\n```\n## Finished docs (build time 00:01:59)\n\n----- Build times -------\nStart 2018-01-25 11:08:51\nEnd   2018-01-25 11:22:23\n00:00:22 corba\n00:00:28 demos\n00:01:59 docs\n00:05:21 hotspot\n00:00:59 images\n00:00:14 jaxp\n00:00:23 jaxws\n00:02:50 jdk\n00:00:41 langtools\n00:00:12 nashorn\n00:13:32 TOTAL\n-------------------------\nFinished building OpenJDK for target 'all'\n```\n\n## 使用openjdk8\n\n1. 生成的jdk Home 在源码\b目录build ：\n\n```\nbuild/macosx-x86_64-normal-server-slowdebug/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home\n```\n\n直接在intellij idea 或者 eclipse 中指定上面的Home即可。\n\n2. 验证jdk版本\n\n```\n$ cd build/macosx-x86_64-normal-server-slowdebug/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home\n$ ./bin/java -version -version\nopenjdk version \"1.8.0-internal-debug\"\nOpenJDK Runtime Environment (build 1.8.0-internal-debug-jason_2018_01_25_11_07-b00)\nOpenJDK 64-Bit Server VM (build 25.71-b00-debug, mixed mode)\n```\n\n### \b为什么要编译JDK源码\n\n1. 已发布jdk版本去除了调试信息和运行时信息，降低内存占用提升运行速度，但是不适合开发者调试jdk代码\n\n2. 深入jvm细节，自己动手编译为深入学习打基础\n","source":"_posts/源码编译openjdk8.md","raw":"---\ntitle: 源码编译openjdk8\nsubtitle: openjdk 的模块，部分使用 C/C++ 编写实现，部分使用 Java 实现。因此除了需要 C/C++ 相关编译工具外，还需要有一个 JDK (Bootstrap JDK)。编译 openjdk8 时可使用jdk1.7 作为 Bootstrap JDK 。\ncover: /images/jdk.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n - OpenJDK\ncategories:\n - OpenJDK\ndate: 2018-09-30 23:00:19\n---\n\n## macOS High Sierra 编译openjdk 8\n\n本次编译使用的系统是 `macOS High Sierra`，版本为 `10.13.2`。使用的 jdk 是 openjdk 8 。\n\n### 概述\n\nopenjdk 的模块，部分使用 C/C++ 编写实现，部分使用 Java 实现。因此除了需要 C/C++ 相关编译工具外，还需要有一个 JDK (Bootstrap JDK)。编译 openjdk8 时可使用 jdk1.7 作为 Bootstrap JDK 。\n\n我当前系统已经安装了jdk1.7 ：\n\n```\n$ java -version\njava version \"1.7.0_79\"\nJava(TM) SE Runtime Environment (build 1.7.0_79-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)\n```\n\n### 安装准备\n\n#### 源码下载\n\n因为代码比较大，国内采用镜像下载：\n\n```\ngit clone https://gitee.com/gorden5566/jdk8u.git\ncd jdk8u/\ngit checkout --track origin/fix\nsh ./getModules.sh\n```\n\n### 安装依赖\n\n* 安装freetype\n\n```\nbrew install freetype\n```\n或者进入官网[XQuartx](https://www.xquartz.org/)下载dmg安装。\n\n* 安装xcode\n\n直接从 `App Store` 中下载安装 或命令行安装 `xcode-select --install` \n\n* 安装gcc编译器\n\n不要安装编译器版本高于5的，因为默认启用c++14 导致编译中断\n```\nbrew install gcc@4.9\n```\n\n* 链接gcc编译器(4.9版本)\n\n```\nsudo ln -s /usr/local/Cellar/gcc@4.9/4.9.4/bin/gcc-4.9 /usr/bin/gcc\nsudo ln -s /usr/local/Cellar/gcc@4.9/4.9.4/bin/g++-4.9 /usr/bin/g++\n```\n\n如果安装gcc版本和我的不一样，需要自行替换。\n\n* 添加环境变量(~/.bash_profile)\n\n```\nexport LFLAGS='-Xlinker -lstdc++'\n```\n\n添加执行命令生效：\n\n```\nsource ~/.bash_profile\n```\n\n* 源码修改\n\n修改openjdk/hotspot/src/share/vm/opto/loopPredicate.cpp 第775行\n```\n assert(rng->Opcode() == Op_LoadRange || _igvn.type(rng)->is_int()->_lo >= 0, \"must be\");\n```\n\n 在is_int()后在添加 ->_lo 。\n\n 修改openjdk/jdk/src/macosx/native/sun/osxapp/ThreadUtilities.m 第一个函数\n\n ```\n static inline void attachCurrentThread(void** env);\n ```\n\n函数名前面添加static 关键字。\n\n## 开始编译\n\n为了方便我直接指定我当前bootstrap jdk1.7的版本，我的~/.bash_profile :\n\n```\nexport ANT_HOME=/Users/Jason/tools/apache-ant-1.10.1\nexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home\n# export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JAVA_HOME}/jre/lib:${ANT_HOME}/lib\n```\n\n### 生成配置\n\n```\nexport MACOSX_DEPLOYMENT_TARGET=10.13.2\n\nbash ./configure --with-target-bits=64 --enable-ccache --with-boot-jdk-jvmargs=\"-Xlint:deprecation -Xlint:unchecked\"  --disable-zip-debug-info --with-freetype-include=/usr/local/Cellar/freetype/2.9/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.9/lib --with-debug-level=slowdebug \n```\n 其中freetype是前面安装的路径，可以进/usr/local/Cellar目录查看自己\b对应版本\n\n 执行命令后我电脑输出：\n\n```\n====================================================\nA new configuration has been successfully created in\n/Users/Jason/openjdk/jdk8u-default/build/macosx-x86_64-normal-server-slowdebug\nusing configure arguments '--with-target-bits=64 --enable-ccache --with-boot-jdk-jvmargs=-Xlint:deprecation -Xlint:unchecked --disable-zip-debug-info --with-freetype-include=/usr/local/Cellar/freetype/2.9/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.9/lib --with-debug-level=slowdebug'.\n\nConfiguration summary:\n* Debug level:    slowdebug\n* JDK variant:    normal\n* JVM variants:   server\n* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64\n\nTools summary:\n* Boot JDK:       java version \"1.7.0_79\" Java(TM) SE Runtime Environment (build 1.7.0_79-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)  (at /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home)\n* C Compiler:      version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 (at /Applications/Xcode.app/Contents/Developer/usr/bin/gcc)\n* C++ Compiler:    version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 (at /Applications/Xcode.app/Contents/Developer/usr/bin/gcc)\n\nBuild performance summary:\n* Cores to use:   4\n* Memory limit:   16384 MB\n* ccache status:  installed, but disabled (version older than 3.1.4)\n\nWARNING: The result of this configuration has overridden an older\nconfiguration. You *should* run 'make clean' to make sure you get a\nproper build. Failure to do so might result in strange build problems.\n```\n\n### 生成jdk8\n\n```\nmake all COMPILER_WARNINGS_FATAL=false\n```\n\n生成jdk8\b成功会输出耗时信息：\n\n```\n## Finished docs (build time 00:01:59)\n\n----- Build times -------\nStart 2018-01-25 11:08:51\nEnd   2018-01-25 11:22:23\n00:00:22 corba\n00:00:28 demos\n00:01:59 docs\n00:05:21 hotspot\n00:00:59 images\n00:00:14 jaxp\n00:00:23 jaxws\n00:02:50 jdk\n00:00:41 langtools\n00:00:12 nashorn\n00:13:32 TOTAL\n-------------------------\nFinished building OpenJDK for target 'all'\n```\n\n## 使用openjdk8\n\n1. 生成的jdk Home 在源码\b目录build ：\n\n```\nbuild/macosx-x86_64-normal-server-slowdebug/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home\n```\n\n直接在intellij idea 或者 eclipse 中指定上面的Home即可。\n\n2. 验证jdk版本\n\n```\n$ cd build/macosx-x86_64-normal-server-slowdebug/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home\n$ ./bin/java -version -version\nopenjdk version \"1.8.0-internal-debug\"\nOpenJDK Runtime Environment (build 1.8.0-internal-debug-jason_2018_01_25_11_07-b00)\nOpenJDK 64-Bit Server VM (build 25.71-b00-debug, mixed mode)\n```\n\n### \b为什么要编译JDK源码\n\n1. 已发布jdk版本去除了调试信息和运行时信息，降低内存占用提升运行速度，但是不适合开发者调试jdk代码\n\n2. 深入jvm细节，自己动手编译为深入学习打基础\n","slug":"源码编译openjdk8","published":1,"updated":"2018-10-16T16:57:30.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4etg000sxat8tdeyra3z","content":"<h2 id=\"macOS-High-Sierra-编译openjdk-8\"><a href=\"#macOS-High-Sierra-编译openjdk-8\" class=\"headerlink\" title=\"macOS High Sierra 编译openjdk 8\"></a>macOS High Sierra 编译openjdk 8</h2><p>本次编译使用的系统是 <code>macOS High Sierra</code>，版本为 <code>10.13.2</code>。使用的 jdk 是 openjdk 8 。</p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>openjdk 的模块，部分使用 C/C++ 编写实现，部分使用 Java 实现。因此除了需要 C/C++ 相关编译工具外，还需要有一个 JDK (Bootstrap JDK)。编译 openjdk8 时可使用 jdk1.7 作为 Bootstrap JDK 。</p>\n<p>我当前系统已经安装了jdk1.7 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -version</span><br><span class=\"line\">java version &quot;1.7.0_79&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.7.0_79-b15)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><h4 id=\"源码下载\"><a href=\"#源码下载\" class=\"headerlink\" title=\"源码下载\"></a>源码下载</h4><p>因为代码比较大，国内采用镜像下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://gitee.com/gorden5566/jdk8u.git</span><br><span class=\"line\">cd jdk8u/</span><br><span class=\"line\">git checkout --track origin/fix</span><br><span class=\"line\">sh ./getModules.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><ul>\n<li>安装freetype</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install freetype</span><br></pre></td></tr></table></figure>\n<p>或者进入官网<a href=\"https://www.xquartz.org/\" target=\"_blank\" rel=\"noopener\">XQuartx</a>下载dmg安装。</p>\n<ul>\n<li>安装xcode</li>\n</ul>\n<p>直接从 <code>App Store</code> 中下载安装 或命令行安装 <code>xcode-select --install</code> </p>\n<ul>\n<li>安装gcc编译器</li>\n</ul>\n<p>不要安装编译器版本高于5的，因为默认启用c++14 导致编译中断<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gcc@4.9</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>链接gcc编译器(4.9版本)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/local/Cellar/gcc@4.9/4.9.4/bin/gcc-4.9 /usr/bin/gcc</span><br><span class=\"line\">sudo ln -s /usr/local/Cellar/gcc@4.9/4.9.4/bin/g++-4.9 /usr/bin/g++</span><br></pre></td></tr></table></figure>\n<p>如果安装gcc版本和我的不一样，需要自行替换。</p>\n<ul>\n<li>添加环境变量(~/.bash_profile)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LFLAGS=&apos;-Xlinker -lstdc++&apos;</span><br></pre></td></tr></table></figure>\n<p>添加执行命令生效：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<ul>\n<li>源码修改</li>\n</ul>\n<p>修改openjdk/hotspot/src/share/vm/opto/loopPredicate.cpp 第775行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert(rng-&gt;Opcode() == Op_LoadRange || _igvn.type(rng)-&gt;is_int()-&gt;_lo &gt;= 0, &quot;must be&quot;);</span><br></pre></td></tr></table></figure></p>\n<p> 在is_int()后在添加 -&gt;_lo 。</p>\n<p> 修改openjdk/jdk/src/macosx/native/sun/osxapp/ThreadUtilities.m 第一个函数</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline void attachCurrentThread(void** env);</span><br></pre></td></tr></table></figure>\n<p>函数名前面添加static 关键字。</p>\n<h2 id=\"开始编译\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译</h2><p>为了方便我直接指定我当前bootstrap jdk1.7的版本，我的~/.bash_profile :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ANT_HOME=/Users/Jason/tools/apache-ant-1.10.1</span><br><span class=\"line\">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home</span><br><span class=\"line\"># export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JAVA_HOME&#125;/jre/lib:$&#123;ANT_HOME&#125;/lib</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成配置\"><a href=\"#生成配置\" class=\"headerlink\" title=\"生成配置\"></a>生成配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MACOSX_DEPLOYMENT_TARGET=10.13.2</span><br><span class=\"line\"></span><br><span class=\"line\">bash ./configure --with-target-bits=64 --enable-ccache --with-boot-jdk-jvmargs=&quot;-Xlint:deprecation -Xlint:unchecked&quot;  --disable-zip-debug-info --with-freetype-include=/usr/local/Cellar/freetype/2.9/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.9/lib --with-debug-level=slowdebug</span><br></pre></td></tr></table></figure>\n<p> 其中freetype是前面安装的路径，可以进/usr/local/Cellar目录查看自己\b对应版本</p>\n<p> 执行命令后我电脑输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====================================================</span><br><span class=\"line\">A new configuration has been successfully created in</span><br><span class=\"line\">/Users/Jason/openjdk/jdk8u-default/build/macosx-x86_64-normal-server-slowdebug</span><br><span class=\"line\">using configure arguments &apos;--with-target-bits=64 --enable-ccache --with-boot-jdk-jvmargs=-Xlint:deprecation -Xlint:unchecked --disable-zip-debug-info --with-freetype-include=/usr/local/Cellar/freetype/2.9/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.9/lib --with-debug-level=slowdebug&apos;.</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration summary:</span><br><span class=\"line\">* Debug level:    slowdebug</span><br><span class=\"line\">* JDK variant:    normal</span><br><span class=\"line\">* JVM variants:   server</span><br><span class=\"line\">* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64</span><br><span class=\"line\"></span><br><span class=\"line\">Tools summary:</span><br><span class=\"line\">* Boot JDK:       java version &quot;1.7.0_79&quot; Java(TM) SE Runtime Environment (build 1.7.0_79-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)  (at /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home)</span><br><span class=\"line\">* C Compiler:      version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 (at /Applications/Xcode.app/Contents/Developer/usr/bin/gcc)</span><br><span class=\"line\">* C++ Compiler:    version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 (at /Applications/Xcode.app/Contents/Developer/usr/bin/gcc)</span><br><span class=\"line\"></span><br><span class=\"line\">Build performance summary:</span><br><span class=\"line\">* Cores to use:   4</span><br><span class=\"line\">* Memory limit:   16384 MB</span><br><span class=\"line\">* ccache status:  installed, but disabled (version older than 3.1.4)</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: The result of this configuration has overridden an older</span><br><span class=\"line\">configuration. You *should* run &apos;make clean&apos; to make sure you get a</span><br><span class=\"line\">proper build. Failure to do so might result in strange build problems.</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成jdk8\"><a href=\"#生成jdk8\" class=\"headerlink\" title=\"生成jdk8\"></a>生成jdk8</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make all COMPILER_WARNINGS_FATAL=false</span><br></pre></td></tr></table></figure>\n<p>生成jdk8\b成功会输出耗时信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## Finished docs (build time 00:01:59)</span><br><span class=\"line\"></span><br><span class=\"line\">----- Build times -------</span><br><span class=\"line\">Start 2018-01-25 11:08:51</span><br><span class=\"line\">End   2018-01-25 11:22:23</span><br><span class=\"line\">00:00:22 corba</span><br><span class=\"line\">00:00:28 demos</span><br><span class=\"line\">00:01:59 docs</span><br><span class=\"line\">00:05:21 hotspot</span><br><span class=\"line\">00:00:59 images</span><br><span class=\"line\">00:00:14 jaxp</span><br><span class=\"line\">00:00:23 jaxws</span><br><span class=\"line\">00:02:50 jdk</span><br><span class=\"line\">00:00:41 langtools</span><br><span class=\"line\">00:00:12 nashorn</span><br><span class=\"line\">00:13:32 TOTAL</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">Finished building OpenJDK for target &apos;all&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用openjdk8\"><a href=\"#使用openjdk8\" class=\"headerlink\" title=\"使用openjdk8\"></a>使用openjdk8</h2><ol>\n<li>生成的jdk Home 在源码\b目录build ：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build/macosx-x86_64-normal-server-slowdebug/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n<p>直接在intellij idea 或者 eclipse 中指定上面的Home即可。</p>\n<ol start=\"2\">\n<li>验证jdk版本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd build/macosx-x86_64-normal-server-slowdebug/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home</span><br><span class=\"line\">$ ./bin/java -version -version</span><br><span class=\"line\">openjdk version &quot;1.8.0-internal-debug&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0-internal-debug-jason_2018_01_25_11_07-b00)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.71-b00-debug, mixed mode)</span><br></pre></td></tr></table></figure>\n<h3 id=\"为什么要编译JDK源码\"><a href=\"#为什么要编译JDK源码\" class=\"headerlink\" title=\"\b为什么要编译JDK源码\"></a>\b为什么要编译JDK源码</h3><ol>\n<li><p>已发布jdk版本去除了调试信息和运行时信息，降低内存占用提升运行速度，但是不适合开发者调试jdk代码</p>\n</li>\n<li><p>深入jvm细节，自己动手编译为深入学习打基础</p>\n</li>\n</ol>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"macOS-High-Sierra-编译openjdk-8\"><a href=\"#macOS-High-Sierra-编译openjdk-8\" class=\"headerlink\" title=\"macOS High Sierra 编译openjdk 8\"></a>macOS High Sierra 编译openjdk 8</h2><p>本次编译使用的系统是 <code>macOS High Sierra</code>，版本为 <code>10.13.2</code>。使用的 jdk 是 openjdk 8 。</p>\n<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>openjdk 的模块，部分使用 C/C++ 编写实现，部分使用 Java 实现。因此除了需要 C/C++ 相关编译工具外，还需要有一个 JDK (Bootstrap JDK)。编译 openjdk8 时可使用 jdk1.7 作为 Bootstrap JDK 。</p>\n<p>我当前系统已经安装了jdk1.7 ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -version</span><br><span class=\"line\">java version &quot;1.7.0_79&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.7.0_79-b15)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装准备\"><a href=\"#安装准备\" class=\"headerlink\" title=\"安装准备\"></a>安装准备</h3><h4 id=\"源码下载\"><a href=\"#源码下载\" class=\"headerlink\" title=\"源码下载\"></a>源码下载</h4><p>因为代码比较大，国内采用镜像下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://gitee.com/gorden5566/jdk8u.git</span><br><span class=\"line\">cd jdk8u/</span><br><span class=\"line\">git checkout --track origin/fix</span><br><span class=\"line\">sh ./getModules.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><ul>\n<li>安装freetype</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install freetype</span><br></pre></td></tr></table></figure>\n<p>或者进入官网<a href=\"https://www.xquartz.org/\" target=\"_blank\" rel=\"noopener\">XQuartx</a>下载dmg安装。</p>\n<ul>\n<li>安装xcode</li>\n</ul>\n<p>直接从 <code>App Store</code> 中下载安装 或命令行安装 <code>xcode-select --install</code> </p>\n<ul>\n<li>安装gcc编译器</li>\n</ul>\n<p>不要安装编译器版本高于5的，因为默认启用c++14 导致编译中断<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gcc@4.9</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>链接gcc编译器(4.9版本)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/local/Cellar/gcc@4.9/4.9.4/bin/gcc-4.9 /usr/bin/gcc</span><br><span class=\"line\">sudo ln -s /usr/local/Cellar/gcc@4.9/4.9.4/bin/g++-4.9 /usr/bin/g++</span><br></pre></td></tr></table></figure>\n<p>如果安装gcc版本和我的不一样，需要自行替换。</p>\n<ul>\n<li>添加环境变量(~/.bash_profile)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export LFLAGS=&apos;-Xlinker -lstdc++&apos;</span><br></pre></td></tr></table></figure>\n<p>添加执行命令生效：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n<ul>\n<li>源码修改</li>\n</ul>\n<p>修改openjdk/hotspot/src/share/vm/opto/loopPredicate.cpp 第775行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">assert(rng-&gt;Opcode() == Op_LoadRange || _igvn.type(rng)-&gt;is_int()-&gt;_lo &gt;= 0, &quot;must be&quot;);</span><br></pre></td></tr></table></figure></p>\n<p> 在is_int()后在添加 -&gt;_lo 。</p>\n<p> 修改openjdk/jdk/src/macosx/native/sun/osxapp/ThreadUtilities.m 第一个函数</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static inline void attachCurrentThread(void** env);</span><br></pre></td></tr></table></figure>\n<p>函数名前面添加static 关键字。</p>\n<h2 id=\"开始编译\"><a href=\"#开始编译\" class=\"headerlink\" title=\"开始编译\"></a>开始编译</h2><p>为了方便我直接指定我当前bootstrap jdk1.7的版本，我的~/.bash_profile :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export ANT_HOME=/Users/Jason/tools/apache-ant-1.10.1</span><br><span class=\"line\">export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home</span><br><span class=\"line\"># export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JAVA_HOME&#125;/jre/lib:$&#123;ANT_HOME&#125;/lib</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成配置\"><a href=\"#生成配置\" class=\"headerlink\" title=\"生成配置\"></a>生成配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export MACOSX_DEPLOYMENT_TARGET=10.13.2</span><br><span class=\"line\"></span><br><span class=\"line\">bash ./configure --with-target-bits=64 --enable-ccache --with-boot-jdk-jvmargs=&quot;-Xlint:deprecation -Xlint:unchecked&quot;  --disable-zip-debug-info --with-freetype-include=/usr/local/Cellar/freetype/2.9/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.9/lib --with-debug-level=slowdebug</span><br></pre></td></tr></table></figure>\n<p> 其中freetype是前面安装的路径，可以进/usr/local/Cellar目录查看自己\b对应版本</p>\n<p> 执行命令后我电脑输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">====================================================</span><br><span class=\"line\">A new configuration has been successfully created in</span><br><span class=\"line\">/Users/Jason/openjdk/jdk8u-default/build/macosx-x86_64-normal-server-slowdebug</span><br><span class=\"line\">using configure arguments &apos;--with-target-bits=64 --enable-ccache --with-boot-jdk-jvmargs=-Xlint:deprecation -Xlint:unchecked --disable-zip-debug-info --with-freetype-include=/usr/local/Cellar/freetype/2.9/include/freetype2 --with-freetype-lib=/usr/local/Cellar/freetype/2.9/lib --with-debug-level=slowdebug&apos;.</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration summary:</span><br><span class=\"line\">* Debug level:    slowdebug</span><br><span class=\"line\">* JDK variant:    normal</span><br><span class=\"line\">* JVM variants:   server</span><br><span class=\"line\">* OpenJDK target: OS: macosx, CPU architecture: x86, address length: 64</span><br><span class=\"line\"></span><br><span class=\"line\">Tools summary:</span><br><span class=\"line\">* Boot JDK:       java version &quot;1.7.0_79&quot; Java(TM) SE Runtime Environment (build 1.7.0_79-b15) Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)  (at /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home)</span><br><span class=\"line\">* C Compiler:      version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 (at /Applications/Xcode.app/Contents/Developer/usr/bin/gcc)</span><br><span class=\"line\">* C++ Compiler:    version Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1 (at /Applications/Xcode.app/Contents/Developer/usr/bin/gcc)</span><br><span class=\"line\"></span><br><span class=\"line\">Build performance summary:</span><br><span class=\"line\">* Cores to use:   4</span><br><span class=\"line\">* Memory limit:   16384 MB</span><br><span class=\"line\">* ccache status:  installed, but disabled (version older than 3.1.4)</span><br><span class=\"line\"></span><br><span class=\"line\">WARNING: The result of this configuration has overridden an older</span><br><span class=\"line\">configuration. You *should* run &apos;make clean&apos; to make sure you get a</span><br><span class=\"line\">proper build. Failure to do so might result in strange build problems.</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成jdk8\"><a href=\"#生成jdk8\" class=\"headerlink\" title=\"生成jdk8\"></a>生成jdk8</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make all COMPILER_WARNINGS_FATAL=false</span><br></pre></td></tr></table></figure>\n<p>生成jdk8\b成功会输出耗时信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## Finished docs (build time 00:01:59)</span><br><span class=\"line\"></span><br><span class=\"line\">----- Build times -------</span><br><span class=\"line\">Start 2018-01-25 11:08:51</span><br><span class=\"line\">End   2018-01-25 11:22:23</span><br><span class=\"line\">00:00:22 corba</span><br><span class=\"line\">00:00:28 demos</span><br><span class=\"line\">00:01:59 docs</span><br><span class=\"line\">00:05:21 hotspot</span><br><span class=\"line\">00:00:59 images</span><br><span class=\"line\">00:00:14 jaxp</span><br><span class=\"line\">00:00:23 jaxws</span><br><span class=\"line\">00:02:50 jdk</span><br><span class=\"line\">00:00:41 langtools</span><br><span class=\"line\">00:00:12 nashorn</span><br><span class=\"line\">00:13:32 TOTAL</span><br><span class=\"line\">-------------------------</span><br><span class=\"line\">Finished building OpenJDK for target &apos;all&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用openjdk8\"><a href=\"#使用openjdk8\" class=\"headerlink\" title=\"使用openjdk8\"></a>使用openjdk8</h2><ol>\n<li>生成的jdk Home 在源码\b目录build ：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">build/macosx-x86_64-normal-server-slowdebug/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home</span><br></pre></td></tr></table></figure>\n<p>直接在intellij idea 或者 eclipse 中指定上面的Home即可。</p>\n<ol start=\"2\">\n<li>验证jdk版本</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd build/macosx-x86_64-normal-server-slowdebug/images/j2sdk-bundle/jdk1.8.0.jdk/Contents/Home</span><br><span class=\"line\">$ ./bin/java -version -version</span><br><span class=\"line\">openjdk version &quot;1.8.0-internal-debug&quot;</span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0-internal-debug-jason_2018_01_25_11_07-b00)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.71-b00-debug, mixed mode)</span><br></pre></td></tr></table></figure>\n<h3 id=\"为什么要编译JDK源码\"><a href=\"#为什么要编译JDK源码\" class=\"headerlink\" title=\"\b为什么要编译JDK源码\"></a>\b为什么要编译JDK源码</h3><ol>\n<li><p>已发布jdk版本去除了调试信息和运行时信息，降低内存占用提升运行速度，但是不适合开发者调试jdk代码</p>\n</li>\n<li><p>深入jvm细节，自己动手编译为深入学习打基础</p>\n</li>\n</ol>\n"},{"title":"工作经历","subtitle":"商宗海，花名诣极，开源dubbo核心开发者之一。曾就职于阿里巴巴、金蝶中国。现就职于有赞科技，担任dubbo框架技术负责人，参与中间件开发，长期活跃在dubbo社区。","cover":"/images/working.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-10-01T05:06:32.000Z","_content":"\n## 商宗海 | 资深开发工程师 | 男 | 硕士 | 杭州 | yiji@apache.org\n\n花名诣极，资深开发工程师，开源dubbo核心开发者之一。1991年11月出生，居住在浙江省杭州市，曾就职于阿里巴巴、金蝶中国。现就职于有赞科技，担任dubbo框架技术负责人，参与中间件开发，长期活跃在dubbo社区。\n\n`E-mail`：yiji@apache.org\n`Github`:  https://github.com/zonghaishang/\n`Website`: https://zonghaishang.github.io/\n\n\n\n## 专业技能\n\n- 服务端:\n  1.擅长Dubbo中间件开发，深入理解其特性和原理。\n  2.熟练使用 Java，理解Java 集合、并发和锁，并深入理解其特性和原理。\n  3.熟悉 JVM 虚拟机和字 节码指令、多线程、NIO 和 Netty。\n  4.熟读主流开源框架 Spring/Dubbo/Hessian/Fastjson 源码并理解原理，熟悉设计模式。\n  5.熟悉微服务开发技术(Docker/Zookeeper/Mesos/Marathon) 。\n\n- 前端：\n\t1.熟练使用 JavaScript 语言编程;熟悉 HTML+CSS。\n\t2.熟悉 jQuery、D3.js、CodeMirror 和 Bootstrap 等主流前端框架或类库的实际项目经验。\n\n## 项目及工作经历\n\n### 2018年1月—至今（有赞-云框架）\n\nDubbo框架Owner, 负责框架迭代和性能优化，电商云项目底层技术支撑, 线上疑难问题排查等答疑。 \n\n- 项目职责和工作成果:\n1.Dubbo-http2协议、Etcd3注册中心、单元化、服务注解、Maven 插件等设计和开发。 \n2.解决线上优雅停机、平滑升级、Hessian2序列化等遗留问题。\n3.负责团队招聘，内部技术分享。\n4.参与开源 Dubbo 框架贡献。github: https://github.com/zonghaishang 。\n\n### 2017年5月—2018年1月 (阿里巴巴-财税技术)\n税务平台是阿里内部使用的系统，支持线上开具电子发票，支持海外发票(俄罗斯)业务进军国际化领 域。TP 计算平台业务是阿里集团内部合理降低税务开支开发的系统，用来调节公司利润率和定价转移。\n\n- 项目职责和工作成果:\n  1.完成海外电子发票接入详细设计、编码、项目进度推进和1c 系统部署落地。\n  2.完成 TP 详细设计和开发，外包管理和线上问题分析处理。\n  3.完成双十一限流方案的设计和开发，税务系统、协同、财务首页等系统维护工作。\n\n### 2014年12月—2017年3月 (金蝶-架构组)\n\n金蝶下一代云 ERP 是基于金蝶统一云平台的 Saas 化企业管理服务。系统后台采用微服务架构，提供脚 本引擎、配置服务、缓存、容器和 SDK 等服务，采用开源 RPC 框架 Dubbo，Docker 容器等一系列技术保证 服务可以弹性二级扩容。\n\n- 项目职责和工作成果:\n 1.Dubbo框架扩展，提供 JSON 上下文解析器和配置中心开发。\n 2.采用 Netty开发图片服务器，支持金蝶云图片上传和预览。\n 3.开发云平台脚本调试功能, 提供单步调试、方法返回、查看变量、调用堆栈和控制台。\n 4.开发邮件服务组件，支持金蝶邮件服务器和腾讯邮箱发送服务，目前用于扩容通知。\n 5.开发监控组件，提供小部件实时监控图、柱状图和折线图等等，支持自适应。\n 6.优化 ERP 会计审计接口导出问题，修复引发金蝶集群实例宕机严重问题。\n 7.开发附件支持高拍仪设备上传，附件上传安全验证拦截校验功能。\n","source":"_posts/诣极的工作经历.md","raw":"---\ntitle: 工作经历\nsubtitle:  商宗海，花名诣极，开源dubbo核心开发者之一。曾就职于阿里巴巴、金蝶中国。现就职于有赞科技，担任dubbo框架技术负责人，参与中间件开发，长期活跃在dubbo社区。\ncover: /images/working.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n- 工作经历\ncategories:\n- 工作经历\ndate: 2018-10-01 13:06:32\n---\n\n## 商宗海 | 资深开发工程师 | 男 | 硕士 | 杭州 | yiji@apache.org\n\n花名诣极，资深开发工程师，开源dubbo核心开发者之一。1991年11月出生，居住在浙江省杭州市，曾就职于阿里巴巴、金蝶中国。现就职于有赞科技，担任dubbo框架技术负责人，参与中间件开发，长期活跃在dubbo社区。\n\n`E-mail`：yiji@apache.org\n`Github`:  https://github.com/zonghaishang/\n`Website`: https://zonghaishang.github.io/\n\n\n\n## 专业技能\n\n- 服务端:\n  1.擅长Dubbo中间件开发，深入理解其特性和原理。\n  2.熟练使用 Java，理解Java 集合、并发和锁，并深入理解其特性和原理。\n  3.熟悉 JVM 虚拟机和字 节码指令、多线程、NIO 和 Netty。\n  4.熟读主流开源框架 Spring/Dubbo/Hessian/Fastjson 源码并理解原理，熟悉设计模式。\n  5.熟悉微服务开发技术(Docker/Zookeeper/Mesos/Marathon) 。\n\n- 前端：\n\t1.熟练使用 JavaScript 语言编程;熟悉 HTML+CSS。\n\t2.熟悉 jQuery、D3.js、CodeMirror 和 Bootstrap 等主流前端框架或类库的实际项目经验。\n\n## 项目及工作经历\n\n### 2018年1月—至今（有赞-云框架）\n\nDubbo框架Owner, 负责框架迭代和性能优化，电商云项目底层技术支撑, 线上疑难问题排查等答疑。 \n\n- 项目职责和工作成果:\n1.Dubbo-http2协议、Etcd3注册中心、单元化、服务注解、Maven 插件等设计和开发。 \n2.解决线上优雅停机、平滑升级、Hessian2序列化等遗留问题。\n3.负责团队招聘，内部技术分享。\n4.参与开源 Dubbo 框架贡献。github: https://github.com/zonghaishang 。\n\n### 2017年5月—2018年1月 (阿里巴巴-财税技术)\n税务平台是阿里内部使用的系统，支持线上开具电子发票，支持海外发票(俄罗斯)业务进军国际化领 域。TP 计算平台业务是阿里集团内部合理降低税务开支开发的系统，用来调节公司利润率和定价转移。\n\n- 项目职责和工作成果:\n  1.完成海外电子发票接入详细设计、编码、项目进度推进和1c 系统部署落地。\n  2.完成 TP 详细设计和开发，外包管理和线上问题分析处理。\n  3.完成双十一限流方案的设计和开发，税务系统、协同、财务首页等系统维护工作。\n\n### 2014年12月—2017年3月 (金蝶-架构组)\n\n金蝶下一代云 ERP 是基于金蝶统一云平台的 Saas 化企业管理服务。系统后台采用微服务架构，提供脚 本引擎、配置服务、缓存、容器和 SDK 等服务，采用开源 RPC 框架 Dubbo，Docker 容器等一系列技术保证 服务可以弹性二级扩容。\n\n- 项目职责和工作成果:\n 1.Dubbo框架扩展，提供 JSON 上下文解析器和配置中心开发。\n 2.采用 Netty开发图片服务器，支持金蝶云图片上传和预览。\n 3.开发云平台脚本调试功能, 提供单步调试、方法返回、查看变量、调用堆栈和控制台。\n 4.开发邮件服务组件，支持金蝶邮件服务器和腾讯邮箱发送服务，目前用于扩容通知。\n 5.开发监控组件，提供小部件实时监控图、柱状图和折线图等等，支持自适应。\n 6.优化 ERP 会计审计接口导出问题，修复引发金蝶集群实例宕机严重问题。\n 7.开发附件支持高拍仪设备上传，附件上传安全验证拦截校验功能。\n","slug":"诣极的工作经历","published":1,"updated":"2018-10-12T03:42:44.545Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4eth000xxat8g7i62ryg","content":"<h2 id=\"商宗海-资深开发工程师-男-硕士-杭州-yiji-apache-org\"><a href=\"#商宗海-资深开发工程师-男-硕士-杭州-yiji-apache-org\" class=\"headerlink\" title=\"商宗海 | 资深开发工程师 | 男 | 硕士 | 杭州 | yiji@apache.org\"></a>商宗海 | 资深开发工程师 | 男 | 硕士 | 杭州 | <a href=\"mailto:yiji@apache.org\" target=\"_blank\" rel=\"noopener\">yiji@apache.org</a></h2><p>花名诣极，资深开发工程师，开源dubbo核心开发者之一。1991年11月出生，居住在浙江省杭州市，曾就职于阿里巴巴、金蝶中国。现就职于有赞科技，担任dubbo框架技术负责人，参与中间件开发，长期活跃在dubbo社区。</p>\n<p><code>E-mail</code>：<a href=\"mailto:yiji@apache.org\" target=\"_blank\" rel=\"noopener\">yiji@apache.org</a><br><code>Github</code>:  <a href=\"https://github.com/zonghaishang/\" target=\"_blank\" rel=\"noopener\">https://github.com/zonghaishang/</a><br><code>Website</code>: <a href=\"https://zonghaishang.github.io/\">https://zonghaishang.github.io/</a></p>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ul>\n<li><p>服务端:<br>1.擅长Dubbo中间件开发，深入理解其特性和原理。<br>2.熟练使用 Java，理解Java 集合、并发和锁，并深入理解其特性和原理。<br>3.熟悉 JVM 虚拟机和字 节码指令、多线程、NIO 和 Netty。<br>4.熟读主流开源框架 Spring/Dubbo/Hessian/Fastjson 源码并理解原理，熟悉设计模式。<br>5.熟悉微服务开发技术(Docker/Zookeeper/Mesos/Marathon) 。</p>\n</li>\n<li><p>前端：<br>  1.熟练使用 JavaScript 语言编程;熟悉 HTML+CSS。<br>  2.熟悉 jQuery、D3.js、CodeMirror 和 Bootstrap 等主流前端框架或类库的实际项目经验。</p>\n</li>\n</ul>\n<h2 id=\"项目及工作经历\"><a href=\"#项目及工作经历\" class=\"headerlink\" title=\"项目及工作经历\"></a>项目及工作经历</h2><h3 id=\"2018年1月—至今（有赞-云框架）\"><a href=\"#2018年1月—至今（有赞-云框架）\" class=\"headerlink\" title=\"2018年1月—至今（有赞-云框架）\"></a>2018年1月—至今（有赞-云框架）</h3><p>Dubbo框架Owner, 负责框架迭代和性能优化，电商云项目底层技术支撑, 线上疑难问题排查等答疑。 </p>\n<ul>\n<li>项目职责和工作成果:<br>1.Dubbo-http2协议、Etcd3注册中心、单元化、服务注解、Maven 插件等设计和开发。<br>2.解决线上优雅停机、平滑升级、Hessian2序列化等遗留问题。<br>3.负责团队招聘，内部技术分享。<br>4.参与开源 Dubbo 框架贡献。github: <a href=\"https://github.com/zonghaishang\" target=\"_blank\" rel=\"noopener\">https://github.com/zonghaishang</a> 。</li>\n</ul>\n<h3 id=\"2017年5月—2018年1月-阿里巴巴-财税技术\"><a href=\"#2017年5月—2018年1月-阿里巴巴-财税技术\" class=\"headerlink\" title=\"2017年5月—2018年1月 (阿里巴巴-财税技术)\"></a>2017年5月—2018年1月 (阿里巴巴-财税技术)</h3><p>税务平台是阿里内部使用的系统，支持线上开具电子发票，支持海外发票(俄罗斯)业务进军国际化领 域。TP 计算平台业务是阿里集团内部合理降低税务开支开发的系统，用来调节公司利润率和定价转移。</p>\n<ul>\n<li>项目职责和工作成果:<br>1.完成海外电子发票接入详细设计、编码、项目进度推进和1c 系统部署落地。<br>2.完成 TP 详细设计和开发，外包管理和线上问题分析处理。<br>3.完成双十一限流方案的设计和开发，税务系统、协同、财务首页等系统维护工作。</li>\n</ul>\n<h3 id=\"2014年12月—2017年3月-金蝶-架构组\"><a href=\"#2014年12月—2017年3月-金蝶-架构组\" class=\"headerlink\" title=\"2014年12月—2017年3月 (金蝶-架构组)\"></a>2014年12月—2017年3月 (金蝶-架构组)</h3><p>金蝶下一代云 ERP 是基于金蝶统一云平台的 Saas 化企业管理服务。系统后台采用微服务架构，提供脚 本引擎、配置服务、缓存、容器和 SDK 等服务，采用开源 RPC 框架 Dubbo，Docker 容器等一系列技术保证 服务可以弹性二级扩容。</p>\n<ul>\n<li>项目职责和工作成果:<br>1.Dubbo框架扩展，提供 JSON 上下文解析器和配置中心开发。<br>2.采用 Netty开发图片服务器，支持金蝶云图片上传和预览。<br>3.开发云平台脚本调试功能, 提供单步调试、方法返回、查看变量、调用堆栈和控制台。<br>4.开发邮件服务组件，支持金蝶邮件服务器和腾讯邮箱发送服务，目前用于扩容通知。<br>5.开发监控组件，提供小部件实时监控图、柱状图和折线图等等，支持自适应。<br>6.优化 ERP 会计审计接口导出问题，修复引发金蝶集群实例宕机严重问题。<br>7.开发附件支持高拍仪设备上传，附件上传安全验证拦截校验功能。</li>\n</ul>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"商宗海-资深开发工程师-男-硕士-杭州-yiji-apache-org\"><a href=\"#商宗海-资深开发工程师-男-硕士-杭州-yiji-apache-org\" class=\"headerlink\" title=\"商宗海 | 资深开发工程师 | 男 | 硕士 | 杭州 | yiji@apache.org\"></a>商宗海 | 资深开发工程师 | 男 | 硕士 | 杭州 | <a href=\"mailto:yiji@apache.org\" target=\"_blank\" rel=\"noopener\">yiji@apache.org</a></h2><p>花名诣极，资深开发工程师，开源dubbo核心开发者之一。1991年11月出生，居住在浙江省杭州市，曾就职于阿里巴巴、金蝶中国。现就职于有赞科技，担任dubbo框架技术负责人，参与中间件开发，长期活跃在dubbo社区。</p>\n<p><code>E-mail</code>：<a href=\"mailto:yiji@apache.org\" target=\"_blank\" rel=\"noopener\">yiji@apache.org</a><br><code>Github</code>:  <a href=\"https://github.com/zonghaishang/\" target=\"_blank\" rel=\"noopener\">https://github.com/zonghaishang/</a><br><code>Website</code>: <a href=\"https://zonghaishang.github.io/\">https://zonghaishang.github.io/</a></p>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ul>\n<li><p>服务端:<br>1.擅长Dubbo中间件开发，深入理解其特性和原理。<br>2.熟练使用 Java，理解Java 集合、并发和锁，并深入理解其特性和原理。<br>3.熟悉 JVM 虚拟机和字 节码指令、多线程、NIO 和 Netty。<br>4.熟读主流开源框架 Spring/Dubbo/Hessian/Fastjson 源码并理解原理，熟悉设计模式。<br>5.熟悉微服务开发技术(Docker/Zookeeper/Mesos/Marathon) 。</p>\n</li>\n<li><p>前端：<br>  1.熟练使用 JavaScript 语言编程;熟悉 HTML+CSS。<br>  2.熟悉 jQuery、D3.js、CodeMirror 和 Bootstrap 等主流前端框架或类库的实际项目经验。</p>\n</li>\n</ul>\n<h2 id=\"项目及工作经历\"><a href=\"#项目及工作经历\" class=\"headerlink\" title=\"项目及工作经历\"></a>项目及工作经历</h2><h3 id=\"2018年1月—至今（有赞-云框架）\"><a href=\"#2018年1月—至今（有赞-云框架）\" class=\"headerlink\" title=\"2018年1月—至今（有赞-云框架）\"></a>2018年1月—至今（有赞-云框架）</h3><p>Dubbo框架Owner, 负责框架迭代和性能优化，电商云项目底层技术支撑, 线上疑难问题排查等答疑。 </p>\n<ul>\n<li>项目职责和工作成果:<br>1.Dubbo-http2协议、Etcd3注册中心、单元化、服务注解、Maven 插件等设计和开发。<br>2.解决线上优雅停机、平滑升级、Hessian2序列化等遗留问题。<br>3.负责团队招聘，内部技术分享。<br>4.参与开源 Dubbo 框架贡献。github: <a href=\"https://github.com/zonghaishang\" target=\"_blank\" rel=\"noopener\">https://github.com/zonghaishang</a> 。</li>\n</ul>\n<h3 id=\"2017年5月—2018年1月-阿里巴巴-财税技术\"><a href=\"#2017年5月—2018年1月-阿里巴巴-财税技术\" class=\"headerlink\" title=\"2017年5月—2018年1月 (阿里巴巴-财税技术)\"></a>2017年5月—2018年1月 (阿里巴巴-财税技术)</h3><p>税务平台是阿里内部使用的系统，支持线上开具电子发票，支持海外发票(俄罗斯)业务进军国际化领 域。TP 计算平台业务是阿里集团内部合理降低税务开支开发的系统，用来调节公司利润率和定价转移。</p>\n<ul>\n<li>项目职责和工作成果:<br>1.完成海外电子发票接入详细设计、编码、项目进度推进和1c 系统部署落地。<br>2.完成 TP 详细设计和开发，外包管理和线上问题分析处理。<br>3.完成双十一限流方案的设计和开发，税务系统、协同、财务首页等系统维护工作。</li>\n</ul>\n<h3 id=\"2014年12月—2017年3月-金蝶-架构组\"><a href=\"#2014年12月—2017年3月-金蝶-架构组\" class=\"headerlink\" title=\"2014年12月—2017年3月 (金蝶-架构组)\"></a>2014年12月—2017年3月 (金蝶-架构组)</h3><p>金蝶下一代云 ERP 是基于金蝶统一云平台的 Saas 化企业管理服务。系统后台采用微服务架构，提供脚 本引擎、配置服务、缓存、容器和 SDK 等服务，采用开源 RPC 框架 Dubbo，Docker 容器等一系列技术保证 服务可以弹性二级扩容。</p>\n<ul>\n<li>项目职责和工作成果:<br>1.Dubbo框架扩展，提供 JSON 上下文解析器和配置中心开发。<br>2.采用 Netty开发图片服务器，支持金蝶云图片上传和预览。<br>3.开发云平台脚本调试功能, 提供单步调试、方法返回、查看变量、调用堆栈和控制台。<br>4.开发邮件服务组件，支持金蝶邮件服务器和腾讯邮箱发送服务，目前用于扩容通知。<br>5.开发监控组件，提供小部件实时监控图、柱状图和折线图等等，支持自适应。<br>6.优化 ERP 会计审计接口导出问题，修复引发金蝶集群实例宕机严重问题。<br>7.开发附件支持高拍仪设备上传，附件上传安全验证拦截校验功能。</li>\n</ul>\n"},{"title":"词法和语法解析（八）","subtitle":"JSONLexerBase定义并实现了json串实现解析机制的基础，在理解后面反序列化之前，我们先来看看并理解重要的属性","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:09:14.000Z","_content":"\n\n### JSON Token解析\n\n`JSONLexerBase`定义并实现了`json`串实现解析机制的基础，在理解后面反序列化之前，我们先来看看并理解重要的属性：\n\n```java\n    /** 当前token含义 */\n    protected int                            token;\n    /** 记录当前扫描字符位置 */\n    protected int                            pos;\n    protected int                            features;\n\n    /** 当前有效字符 */\n    protected char                           ch;\n    /** 流(或者json字符串)中当前的位置，每次读取字符会递增 */\n    protected int                            bp;\n\n    protected int                            eofPos;\n\n    /** 字符缓冲区 */\n    protected char[]                         sbuf;\n\n    /** 字符缓冲区的索引，指向下一个可写\n     *  字符的位置，也代表字符缓冲区字符数量\n     */\n    protected int                            sp;\n\n    /**\n     * number start position\n     * 可以理解为 找到token时 token的首字符位置\n     * 和bp不一样，这个不会递增，会在开始token前记录一次\n     */\n    protected int                            np;\n```\n\n### JSONLexerBase成员函数\n\n在开始分析词法分析实现过程中，我发现中解析存在大量重复代码实现或极其类似实现，重复代码主要解决类似c++内联调用，极其相似代码实现我会挑选\b有代表性的来说明（一般实现较为复杂），没有说明的成员函数可以参考代码注释。\n\n### 推断token类型\n\n`fastjson` token类型推断当前`json`字符串\b是那种类型的token, 比如是字符串、花括号和逗号等等。\n\n```java\n    public final void nextToken() {\n        /** 将字符buffer pos设置为初始0 */\n        sp = 0;\n\n        for (;;) {\n            /** pos记录为流的当前位置 */\n            pos = bp;\n\n            if (ch == '/') {\n                /** 如果是注释// 或者 \\/* *\\/ 注释，跳过注释 */\n                skipComment();\n                continue;\n            }\n\n            if (ch == '\"') {\n                /** 读取引号内的字符串 */\n                scanString();\n                return;\n            }\n\n            if (ch == ',') {\n                /** 跳过当前，读取下一个字符 */\n                next();\n                token = COMMA;\n                return;\n            }\n\n            if (ch >= '0' && ch <= '9') {\n                /** 读取整数 */\n                scanNumber();\n                return;\n            }\n\n            if (ch == '-') {\n                /** 读取负数 */\n                scanNumber();\n                return;\n            }\n\n            switch (ch) {\n                /** 读取单引号后面的字符串，和scanString逻辑一致 */\n                case '\\'':\n                    if (!isEnabled(Feature.AllowSingleQuotes)) {\n                        throw new JSONException(\"Feature.AllowSingleQuotes is false\");\n                    }\n                    scanStringSingleQuote();\n                    return;\n                case ' ':\n                case '\\t':\n                case '\\b':\n                case '\\f':\n                case '\\n':\n                case '\\r':\n                    next();\n                    break;\n                case 't': // true\n                    /** 读取字符true */\n                    scanTrue();\n                    return;\n                case 'f': // false\n                    /** 读取字符false */\n                    scanFalse();\n                    return;\n                case 'n': // new,null\n                    /** 读取为new或者null的token */\n                    scanNullOrNew();\n                    return;\n                case 'T':\n                case 'N': // NULL\n                case 'S':\n                case 'u': // undefined\n                    /** 读取标识符，已经自动预读了下一个字符 */\n                    scanIdent();\n                    return;\n                case '(':\n                    /** 读取下一个字符 */\n                    next();\n                    token = LPAREN;\n                    return;\n                case ')':\n                    next();\n                    token = RPAREN;\n                    return;\n                case '[':\n                    next();\n                    token = LBRACKET;\n                    return;\n                case ']':\n                    next();\n                    token = RBRACKET;\n                    return;\n                case '{':\n                    next();\n                    token = LBRACE;\n                    return;\n                case '}':\n                    next();\n                    token = RBRACE;\n                    return;\n                case ':':\n                    next();\n                    token = COLON;\n                    return;\n                case ';':\n                    next();\n                    token = SEMI;\n                    return;\n                case '.':\n                    next();\n                    token = DOT;\n                    return;\n                case '+':\n                    next();\n                    scanNumber();\n                    return;\n                case 'x':\n                    scanHex();\n                    return;\n                default:\n                    if (isEOF()) { // JLS\n                        if (token == EOF) {\n                            throw new JSONException(\"EOF error\");\n                        }\n\n                        token = EOF;\n                        pos = bp = eofPos;\n                    } else {\n                        /** 忽略控制字符或者删除字符 */\n                        if (ch <= 31 || ch == 127) {\n                            next();\n                            break;\n                        }\n\n                        lexError(\"illegal.char\", String.valueOf((int) ch));\n                        next();\n                    }\n\n                    return;\n            }\n        }\n\n    }\n```\n\n### 跳过注释\n\n```java\n    protected void skipComment() {\n        /** 读下一个字符 */\n        next();\n        /** 连续遇到左反斜杠/ */\n        if (ch == '/') {\n            for (;;) {\n                /** 读下一个字符 */\n                next();\n                if (ch == '\\n') {\n                    /** 如果遇到换行符，继续读取下一个字符并返回 */\n                    next();\n                    return;\n                    /** 如果已经遇到流结束，返回 */\n                } else if (ch == EOI) {\n                    return;\n                }\n            }\n            /** 遇到`/*` 注释的格式 */\n        } else if (ch == '*') {\n            /** 读下一个字符 */\n            next();\n            for (; ch != EOI;) {\n                if (ch == '*') {\n                    /** 如果遇到*,继续尝试读取下一个字符，看看是否是/字符 */\n                    next();\n                    if (ch == '/') {\n                        /** 如果确实是/字符，提前预读下一个有效字符后终止 */\n                        next();\n                        return;\n                    } else {\n                        /** 遇到非/ 继续跳过度下一个字符 */\n                        continue;\n                    }\n                }\n                /** 如果没有遇到`*\\` 注释格式, 继续读下一个字符 */\n                next();\n            }\n        } else {\n            /** 不符合// 或者 \\/* *\\/ 注释格式 */\n            throw new JSONException(\"invalid comment\");\n        }\n    }\n```\n\n解析注释主要分为2中，支持`//` 或者 `/* */` 注释格式。\n\n\n### 扫描字符串\n\n当解析`json`字符串是`\"`时，会调用扫描字符串方法。\n\n```java\n    public final void scanString() {\n        /** 记录当前流中token的开始位置, np指向引号的索引 */\n        np = bp;\n        hasSpecial = false;\n        char ch;\n        for (;;) {\n\n            /** 读取当前字符串的字符 */\n            ch = next();\n\n            /** 如果遇到字符串结束符\"， 则结束 */\n            if (ch == '\\\"') {\n                break;\n            }\n\n            if (ch == EOI) {\n                /** 如果遇到了结束符EOI，但是没有遇到流的结尾，添加EOI结束符 */\n                if (!isEOF()) {\n                    putChar((char) EOI);\n                    continue;\n                }\n                throw new JSONException(\"unclosed string : \" + ch);\n            }\n\n            /** 处理转译字符逻辑 */\n            if (ch == '\\\\') {\n                if (!hasSpecial) {\n                    /** 第一次遇到\\认为是特殊符号 */\n                    hasSpecial = true;\n\n                    /** 如果buffer空间不够，执行2倍扩容 */\n                    if (sp >= sbuf.length) {\n                        int newCapcity = sbuf.length * 2;\n                        if (sp > newCapcity) {\n                            newCapcity = sp;\n                        }\n                        char[] newsbuf = new char[newCapcity];\n                        System.arraycopy(sbuf, 0, newsbuf, 0, sbuf.length);\n                        sbuf = newsbuf;\n                    }\n\n                    /** 复制有效字符串到buffer中，不包括引号 */\n                    copyTo(np + 1, sp, sbuf);\n                    // text.getChars(np + 1, np + 1 + sp, sbuf, 0);\n                    // System.arraycopy(buf, np + 1, sbuf, 0, sp);\n                }\n\n                /** 读取转译字符\\下一个字符 */\n                ch = next();\n\n                /** 转换ascii字符，请参考：https://baike.baidu.com/item/ASCII/309296?fr=aladdin */\n                switch (ch) {\n                    case '0':\n                        /** 空字符 */\n                        putChar('\\0');\n                        break;\n                    case '1':\n                        /** 标题开始 */\n                        putChar('\\1');\n                        break;\n                    case '2':\n                        /** 正文开始 */\n                        putChar('\\2');\n                        break;\n                    case '3':\n                        /** 正文结束 */\n                        putChar('\\3');\n                        break;\n                    case '4':\n                        /** 传输结束 */\n                        putChar('\\4');\n                        break;\n                    case '5':\n                        /** 请求 */\n                        putChar('\\5');\n                        break;\n                    case '6':\n                        /** 收到通知 */\n                        putChar('\\6');\n                        break;\n                    case '7':\n                        /** 响铃 */\n                        putChar('\\7');\n                        break;\n                    case 'b': // 8\n                        /** 退格 */\n                        putChar('\\b');\n                        break;\n                    case 't': // 9\n                        /** 水平制表符 */\n                        putChar('\\t');\n                        break;\n                    case 'n': // 10\n                        /** 换行键 */\n                        putChar('\\n');\n                        break;\n                    case 'v': // 11\n                        /** 垂直制表符 */\n                        putChar('\\u000B');\n                        break;\n                    case 'f': // 12\n                        /** 换页键 */\n                    case 'F':\n                        /** 换页键 */\n                        putChar('\\f');\n                        break;\n                    case 'r': // 13\n                        /** 回车键 */\n                        putChar('\\r');\n                        break;\n                    case '\"': // 34\n                        /** 双引号 */\n                        putChar('\"');\n                        break;\n                    case '\\'': // 39\n                        /** 闭单引号 */\n                        putChar('\\'');\n                        break;\n                    case '/': // 47\n                        /** 斜杠 */\n                        putChar('/');\n                        break;\n                    case '\\\\': // 92\n                        /** 反斜杠 */\n                        putChar('\\\\');\n                        break;\n                    case 'x':\n                        /** 小写字母x, 标识一个字符 */\n                        char x1 = ch = next();\n                        char x2 = ch = next();\n\n                        /** x1 左移4位 + x2 */\n                        int x_val = digits[x1] * 16 + digits[x2];\n                        char x_char = (char) x_val;\n                        putChar(x_char);\n                        break;\n                    case 'u':\n                        /** 小写字母u, 标识一个字符 */\n                        char u1 = ch = next();\n                        char u2 = ch = next();\n                        char u3 = ch = next();\n                        char u4 = ch = next();\n                        int val = Integer.parseInt(new String(new char[] { u1, u2, u3, u4 }), 16);\n                        putChar((char) val);\n                        break;\n                    default:\n                        this.ch = ch;\n                        throw new JSONException(\"unclosed string : \" + ch);\n                }\n                continue;\n            }\n\n            /** 没有转译字符，递增buffer字符位置 */\n            if (!hasSpecial) {\n                sp++;\n                continue;\n            }\n\n            /** 继续读取转译字符后面的字符 */\n            if (sp == sbuf.length) {\n                putChar(ch);\n            } else {\n                sbuf[sp++] = ch;\n            }\n        }\n\n        token = JSONToken.LITERAL_STRING;\n        /** 自动预读下一个字符 */\n        this.ch = next();\n    }\n```\n解析到字符串的时候会写入buffer。\n\n### 扫描数字类型\n\n```java\n    public final void scanNumber() {\n        /** 记录当前流中token的开始位置, np指向数字字符索引 */\n        np = bp;\n\n        /** 兼容处理负数 */\n        if (ch == '-') {\n            sp++;\n            next();\n        }\n\n        for (;;) {\n            if (ch >= '0' && ch <= '9') {\n                /** 如果是数字字符，递增索引位置 */\n                sp++;\n            } else {\n                break;\n            }\n            next();\n        }\n\n        boolean isDouble = false;\n\n        /** 如果遇到小数点字符 */\n        if (ch == '.') {\n            sp++;\n            /** 继续读小数点后面字符 */\n            next();\n            isDouble = true;\n\n            for (;;) {\n                if (ch >= '0' && ch <= '9') {\n                    sp++;\n                } else {\n                    break;\n                }\n                next();\n            }\n        }\n\n        /** 继续读取数字后面的类型 */\n        if (ch == 'L') {\n            sp++;\n            next();\n        } else if (ch == 'S') {\n            sp++;\n            next();\n        } else if (ch == 'B') {\n            sp++;\n            next();\n        } else if (ch == 'F') {\n            sp++;\n            next();\n            isDouble = true;\n        } else if (ch == 'D') {\n            sp++;\n            next();\n            isDouble = true;\n        } else if (ch == 'e' || ch == 'E') {\n\n            /** 扫描科学计数法 */\n            sp++;\n            next();\n\n            if (ch == '+' || ch == '-') {\n                sp++;\n                next();\n            }\n\n            for (;;) {\n                if (ch >= '0' && ch <= '9') {\n                    sp++;\n                } else {\n                    break;\n                }\n                next();\n            }\n\n            if (ch == 'D' || ch == 'F') {\n                sp++;\n                next();\n            }\n\n            isDouble = true;\n        }\n\n        if (isDouble) {\n            token = JSONToken.LITERAL_FLOAT;\n        } else {\n            token = JSONToken.LITERAL_INT;\n        }\n    }\n```\n\n### 扫描Boolean\n\n```java\n    public final void scanTrue() {\n        if (ch != 't') {\n            throw new JSONException(\"error parse true\");\n        }\n        next();\n\n        if (ch != 'r') {\n            throw new JSONException(\"error parse true\");\n        }\n        next();\n\n        if (ch != 'u') {\n            throw new JSONException(\"error parse true\");\n        }\n        next();\n\n        if (ch != 'e') {\n            throw new JSONException(\"error parse true\");\n        }\n        next();\n\n        if (ch == ' ' || ch == ',' || ch == '}' || ch == ']' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == EOI\n                || ch == '\\f' || ch == '\\b' || ch == ':' || ch == '/') {\n            /** 兼容性防御，标记是true的token */\n            token = JSONToken.TRUE;\n        } else {\n            throw new JSONException(\"scan true error\");\n        }\n    }\n```\n\n### 扫描标识符\n\n```java\n    public final void scanIdent() {\n        /** 记录当前流中token的开始位置, np指向当前token前一个字符 */\n        np = bp - 1;\n        hasSpecial = false;\n\n        for (;;) {\n            sp++;\n\n            next();\n            /** 如果是字母或数字，继续读取 */\n            if (Character.isLetterOrDigit(ch)) {\n                continue;\n            }\n\n            /** 获取字符串值 */\n            String ident = stringVal();\n\n            if (\"null\".equalsIgnoreCase(ident)) {\n                token = JSONToken.NULL;\n            } else if (\"new\".equals(ident)) {\n                token = JSONToken.NEW;\n            } else if (\"true\".equals(ident)) {\n                token = JSONToken.TRUE;\n            } else if (\"false\".equals(ident)) {\n                token = JSONToken.FALSE;\n            } else if (\"undefined\".equals(ident)) {\n                token = JSONToken.UNDEFINED;\n            } else if (\"Set\".equals(ident)) {\n                token = JSONToken.SET;\n            } else if (\"TreeSet\".equals(ident)) {\n                token = JSONToken.TREE_SET;\n            } else {\n                token = JSONToken.IDENTIFIER;\n            }\n            return;\n        }\n    }\n```\n\n#### 扫描十六进制数\n\n```java\n    public final void scanHex() {\n        if (ch != 'x') {\n            throw new JSONException(\"illegal state. \" + ch);\n        }\n        next();\n        /** 十六进制x紧跟着单引号 */\n        /** @see com.alibaba.fastjson.serializer.SerializeWriter#writeHex(byte[]) */\n        if (ch != '\\'') {\n            throw new JSONException(\"illegal state. \" + ch);\n        }\n\n        np = bp;\n        /** 这里一次next, for循环也读一次next, 因为十六进制被写成2个字节的单字符 */\n        next();\n\n        for (int i = 0;;++i) {\n            char ch = next();\n            if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F')) {\n                sp++;\n                continue;\n            } else if (ch == '\\'') {\n                sp++;\n                /** 遇到结束符号，自动预读下一个字符 */\n                next();\n                break;\n            } else {\n                throw new JSONException(\"illegal state. \" + ch);\n            }\n        }\n        token = JSONToken.HEX;\n    }\n\n```\n\n### 根据期望\b字符扫描token\n\n```java\n    public final void nextToken(int expect) {\n        /** 将字符buffer pos设置为初始0 */\n        sp = 0;\n\n        for (;;) {\n\n            switch (expect) {\n                case JSONToken.LBRACE:\n                    if (ch == '{') {\n                        token = JSONToken.LBRACE;\n                        next();\n                        return;\n                    }\n                    if (ch == '[') {\n                        token = JSONToken.LBRACKET;\n                        next();\n                        return;\n                    }\n                    break;\n                case JSONToken.COMMA:\n                    if (ch == ',') {\n                        token = JSONToken.COMMA;\n                        next();\n                        return;\n                    }\n\n                    if (ch == '}') {\n                        token = JSONToken.RBRACE;\n                        next();\n                        return;\n                    }\n\n                    if (ch == ']') {\n                        token = JSONToken.RBRACKET;\n                        next();\n                        return;\n                    }\n\n                    if (ch == EOI) {\n                        token = JSONToken.EOF;\n                        return;\n                    }\n                    break;\n                case JSONToken.LITERAL_INT:\n                    if (ch >= '0' && ch <= '9') {\n                        pos = bp;\n                        scanNumber();\n                        return;\n                    }\n\n                    if (ch == '\"') {\n                        pos = bp;\n                        scanString();\n                        return;\n                    }\n\n                    if (ch == '[') {\n                        token = JSONToken.LBRACKET;\n                        next();\n                        return;\n                    }\n\n                    if (ch == '{') {\n                        token = JSONToken.LBRACE;\n                        next();\n                        return;\n                    }\n\n                    break;\n                case JSONToken.LITERAL_STRING:\n                    if (ch == '\"') {\n                        pos = bp;\n                        /** 扫描字符串, pos指向字符串引号索引 */\n                        scanString();\n                        return;\n                    }\n\n                    if (ch >= '0' && ch <= '9') {\n                        pos = bp;\n                        /** 扫描数字, 前面已经分析过 */\n                        scanNumber();\n                        return;\n                    }\n\n                    if (ch == '[') {\n                        token = JSONToken.LBRACKET;\n                        next();\n                        return;\n                    }\n\n                    if (ch == '{') {\n                        token = JSONToken.LBRACE;\n                        next();\n                        return;\n                    }\n                    break;\n                case JSONToken.LBRACKET:\n                    if (ch == '[') {\n                        token = JSONToken.LBRACKET;\n                        next();\n                        return;\n                    }\n\n                    if (ch == '{') {\n                        token = JSONToken.LBRACE;\n                        next();\n                        return;\n                    }\n                    break;\n                case JSONToken.RBRACKET:\n                    if (ch == ']') {\n                        token = JSONToken.RBRACKET;\n                        next();\n                        return;\n                    }\n                case JSONToken.EOF:\n                    if (ch == EOI) {\n                        token = JSONToken.EOF;\n                        return;\n                    }\n                    break;\n                case JSONToken.IDENTIFIER:\n                    /** 跳过空白字符，如果是标识符_、$和字母开头，否则自动获取下一个token */\n                    nextIdent();\n                    return;\n                default:\n                    break;\n            }\n\n            /** 跳过空白字符 */\n            if (ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == '\\f' || ch == '\\b') {\n                next();\n                continue;\n            }\n\n            /** 针对其他token自动读取下一个, 比如遇到冒号：,自动下一个token */\n            nextToken();\n            break;\n        }\n    }\n```\n\n这个方法主要是根据期望的字符expect，判定expect对应的token, 接下来主要分析解析对象字段的相关api实现。","source":"_posts/Fastjson源码解析-词法和语法解析-(二)-基础类型实现解析.md","raw":"---\ntitle: 词法和语法解析（八）\nsubtitle:  JSONLexerBase定义并实现了json串实现解析机制的基础，在理解后面反序列化之前，我们先来看看并理解重要的属性\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n- Fastjson源码解析\ncategories:\n- Fastjson源码解析\ndate: 2018-09-30 23:09:14\n---\n\n\n### JSON Token解析\n\n`JSONLexerBase`定义并实现了`json`串实现解析机制的基础，在理解后面反序列化之前，我们先来看看并理解重要的属性：\n\n```java\n    /** 当前token含义 */\n    protected int                            token;\n    /** 记录当前扫描字符位置 */\n    protected int                            pos;\n    protected int                            features;\n\n    /** 当前有效字符 */\n    protected char                           ch;\n    /** 流(或者json字符串)中当前的位置，每次读取字符会递增 */\n    protected int                            bp;\n\n    protected int                            eofPos;\n\n    /** 字符缓冲区 */\n    protected char[]                         sbuf;\n\n    /** 字符缓冲区的索引，指向下一个可写\n     *  字符的位置，也代表字符缓冲区字符数量\n     */\n    protected int                            sp;\n\n    /**\n     * number start position\n     * 可以理解为 找到token时 token的首字符位置\n     * 和bp不一样，这个不会递增，会在开始token前记录一次\n     */\n    protected int                            np;\n```\n\n### JSONLexerBase成员函数\n\n在开始分析词法分析实现过程中，我发现中解析存在大量重复代码实现或极其类似实现，重复代码主要解决类似c++内联调用，极其相似代码实现我会挑选\b有代表性的来说明（一般实现较为复杂），没有说明的成员函数可以参考代码注释。\n\n### 推断token类型\n\n`fastjson` token类型推断当前`json`字符串\b是那种类型的token, 比如是字符串、花括号和逗号等等。\n\n```java\n    public final void nextToken() {\n        /** 将字符buffer pos设置为初始0 */\n        sp = 0;\n\n        for (;;) {\n            /** pos记录为流的当前位置 */\n            pos = bp;\n\n            if (ch == '/') {\n                /** 如果是注释// 或者 \\/* *\\/ 注释，跳过注释 */\n                skipComment();\n                continue;\n            }\n\n            if (ch == '\"') {\n                /** 读取引号内的字符串 */\n                scanString();\n                return;\n            }\n\n            if (ch == ',') {\n                /** 跳过当前，读取下一个字符 */\n                next();\n                token = COMMA;\n                return;\n            }\n\n            if (ch >= '0' && ch <= '9') {\n                /** 读取整数 */\n                scanNumber();\n                return;\n            }\n\n            if (ch == '-') {\n                /** 读取负数 */\n                scanNumber();\n                return;\n            }\n\n            switch (ch) {\n                /** 读取单引号后面的字符串，和scanString逻辑一致 */\n                case '\\'':\n                    if (!isEnabled(Feature.AllowSingleQuotes)) {\n                        throw new JSONException(\"Feature.AllowSingleQuotes is false\");\n                    }\n                    scanStringSingleQuote();\n                    return;\n                case ' ':\n                case '\\t':\n                case '\\b':\n                case '\\f':\n                case '\\n':\n                case '\\r':\n                    next();\n                    break;\n                case 't': // true\n                    /** 读取字符true */\n                    scanTrue();\n                    return;\n                case 'f': // false\n                    /** 读取字符false */\n                    scanFalse();\n                    return;\n                case 'n': // new,null\n                    /** 读取为new或者null的token */\n                    scanNullOrNew();\n                    return;\n                case 'T':\n                case 'N': // NULL\n                case 'S':\n                case 'u': // undefined\n                    /** 读取标识符，已经自动预读了下一个字符 */\n                    scanIdent();\n                    return;\n                case '(':\n                    /** 读取下一个字符 */\n                    next();\n                    token = LPAREN;\n                    return;\n                case ')':\n                    next();\n                    token = RPAREN;\n                    return;\n                case '[':\n                    next();\n                    token = LBRACKET;\n                    return;\n                case ']':\n                    next();\n                    token = RBRACKET;\n                    return;\n                case '{':\n                    next();\n                    token = LBRACE;\n                    return;\n                case '}':\n                    next();\n                    token = RBRACE;\n                    return;\n                case ':':\n                    next();\n                    token = COLON;\n                    return;\n                case ';':\n                    next();\n                    token = SEMI;\n                    return;\n                case '.':\n                    next();\n                    token = DOT;\n                    return;\n                case '+':\n                    next();\n                    scanNumber();\n                    return;\n                case 'x':\n                    scanHex();\n                    return;\n                default:\n                    if (isEOF()) { // JLS\n                        if (token == EOF) {\n                            throw new JSONException(\"EOF error\");\n                        }\n\n                        token = EOF;\n                        pos = bp = eofPos;\n                    } else {\n                        /** 忽略控制字符或者删除字符 */\n                        if (ch <= 31 || ch == 127) {\n                            next();\n                            break;\n                        }\n\n                        lexError(\"illegal.char\", String.valueOf((int) ch));\n                        next();\n                    }\n\n                    return;\n            }\n        }\n\n    }\n```\n\n### 跳过注释\n\n```java\n    protected void skipComment() {\n        /** 读下一个字符 */\n        next();\n        /** 连续遇到左反斜杠/ */\n        if (ch == '/') {\n            for (;;) {\n                /** 读下一个字符 */\n                next();\n                if (ch == '\\n') {\n                    /** 如果遇到换行符，继续读取下一个字符并返回 */\n                    next();\n                    return;\n                    /** 如果已经遇到流结束，返回 */\n                } else if (ch == EOI) {\n                    return;\n                }\n            }\n            /** 遇到`/*` 注释的格式 */\n        } else if (ch == '*') {\n            /** 读下一个字符 */\n            next();\n            for (; ch != EOI;) {\n                if (ch == '*') {\n                    /** 如果遇到*,继续尝试读取下一个字符，看看是否是/字符 */\n                    next();\n                    if (ch == '/') {\n                        /** 如果确实是/字符，提前预读下一个有效字符后终止 */\n                        next();\n                        return;\n                    } else {\n                        /** 遇到非/ 继续跳过度下一个字符 */\n                        continue;\n                    }\n                }\n                /** 如果没有遇到`*\\` 注释格式, 继续读下一个字符 */\n                next();\n            }\n        } else {\n            /** 不符合// 或者 \\/* *\\/ 注释格式 */\n            throw new JSONException(\"invalid comment\");\n        }\n    }\n```\n\n解析注释主要分为2中，支持`//` 或者 `/* */` 注释格式。\n\n\n### 扫描字符串\n\n当解析`json`字符串是`\"`时，会调用扫描字符串方法。\n\n```java\n    public final void scanString() {\n        /** 记录当前流中token的开始位置, np指向引号的索引 */\n        np = bp;\n        hasSpecial = false;\n        char ch;\n        for (;;) {\n\n            /** 读取当前字符串的字符 */\n            ch = next();\n\n            /** 如果遇到字符串结束符\"， 则结束 */\n            if (ch == '\\\"') {\n                break;\n            }\n\n            if (ch == EOI) {\n                /** 如果遇到了结束符EOI，但是没有遇到流的结尾，添加EOI结束符 */\n                if (!isEOF()) {\n                    putChar((char) EOI);\n                    continue;\n                }\n                throw new JSONException(\"unclosed string : \" + ch);\n            }\n\n            /** 处理转译字符逻辑 */\n            if (ch == '\\\\') {\n                if (!hasSpecial) {\n                    /** 第一次遇到\\认为是特殊符号 */\n                    hasSpecial = true;\n\n                    /** 如果buffer空间不够，执行2倍扩容 */\n                    if (sp >= sbuf.length) {\n                        int newCapcity = sbuf.length * 2;\n                        if (sp > newCapcity) {\n                            newCapcity = sp;\n                        }\n                        char[] newsbuf = new char[newCapcity];\n                        System.arraycopy(sbuf, 0, newsbuf, 0, sbuf.length);\n                        sbuf = newsbuf;\n                    }\n\n                    /** 复制有效字符串到buffer中，不包括引号 */\n                    copyTo(np + 1, sp, sbuf);\n                    // text.getChars(np + 1, np + 1 + sp, sbuf, 0);\n                    // System.arraycopy(buf, np + 1, sbuf, 0, sp);\n                }\n\n                /** 读取转译字符\\下一个字符 */\n                ch = next();\n\n                /** 转换ascii字符，请参考：https://baike.baidu.com/item/ASCII/309296?fr=aladdin */\n                switch (ch) {\n                    case '0':\n                        /** 空字符 */\n                        putChar('\\0');\n                        break;\n                    case '1':\n                        /** 标题开始 */\n                        putChar('\\1');\n                        break;\n                    case '2':\n                        /** 正文开始 */\n                        putChar('\\2');\n                        break;\n                    case '3':\n                        /** 正文结束 */\n                        putChar('\\3');\n                        break;\n                    case '4':\n                        /** 传输结束 */\n                        putChar('\\4');\n                        break;\n                    case '5':\n                        /** 请求 */\n                        putChar('\\5');\n                        break;\n                    case '6':\n                        /** 收到通知 */\n                        putChar('\\6');\n                        break;\n                    case '7':\n                        /** 响铃 */\n                        putChar('\\7');\n                        break;\n                    case 'b': // 8\n                        /** 退格 */\n                        putChar('\\b');\n                        break;\n                    case 't': // 9\n                        /** 水平制表符 */\n                        putChar('\\t');\n                        break;\n                    case 'n': // 10\n                        /** 换行键 */\n                        putChar('\\n');\n                        break;\n                    case 'v': // 11\n                        /** 垂直制表符 */\n                        putChar('\\u000B');\n                        break;\n                    case 'f': // 12\n                        /** 换页键 */\n                    case 'F':\n                        /** 换页键 */\n                        putChar('\\f');\n                        break;\n                    case 'r': // 13\n                        /** 回车键 */\n                        putChar('\\r');\n                        break;\n                    case '\"': // 34\n                        /** 双引号 */\n                        putChar('\"');\n                        break;\n                    case '\\'': // 39\n                        /** 闭单引号 */\n                        putChar('\\'');\n                        break;\n                    case '/': // 47\n                        /** 斜杠 */\n                        putChar('/');\n                        break;\n                    case '\\\\': // 92\n                        /** 反斜杠 */\n                        putChar('\\\\');\n                        break;\n                    case 'x':\n                        /** 小写字母x, 标识一个字符 */\n                        char x1 = ch = next();\n                        char x2 = ch = next();\n\n                        /** x1 左移4位 + x2 */\n                        int x_val = digits[x1] * 16 + digits[x2];\n                        char x_char = (char) x_val;\n                        putChar(x_char);\n                        break;\n                    case 'u':\n                        /** 小写字母u, 标识一个字符 */\n                        char u1 = ch = next();\n                        char u2 = ch = next();\n                        char u3 = ch = next();\n                        char u4 = ch = next();\n                        int val = Integer.parseInt(new String(new char[] { u1, u2, u3, u4 }), 16);\n                        putChar((char) val);\n                        break;\n                    default:\n                        this.ch = ch;\n                        throw new JSONException(\"unclosed string : \" + ch);\n                }\n                continue;\n            }\n\n            /** 没有转译字符，递增buffer字符位置 */\n            if (!hasSpecial) {\n                sp++;\n                continue;\n            }\n\n            /** 继续读取转译字符后面的字符 */\n            if (sp == sbuf.length) {\n                putChar(ch);\n            } else {\n                sbuf[sp++] = ch;\n            }\n        }\n\n        token = JSONToken.LITERAL_STRING;\n        /** 自动预读下一个字符 */\n        this.ch = next();\n    }\n```\n解析到字符串的时候会写入buffer。\n\n### 扫描数字类型\n\n```java\n    public final void scanNumber() {\n        /** 记录当前流中token的开始位置, np指向数字字符索引 */\n        np = bp;\n\n        /** 兼容处理负数 */\n        if (ch == '-') {\n            sp++;\n            next();\n        }\n\n        for (;;) {\n            if (ch >= '0' && ch <= '9') {\n                /** 如果是数字字符，递增索引位置 */\n                sp++;\n            } else {\n                break;\n            }\n            next();\n        }\n\n        boolean isDouble = false;\n\n        /** 如果遇到小数点字符 */\n        if (ch == '.') {\n            sp++;\n            /** 继续读小数点后面字符 */\n            next();\n            isDouble = true;\n\n            for (;;) {\n                if (ch >= '0' && ch <= '9') {\n                    sp++;\n                } else {\n                    break;\n                }\n                next();\n            }\n        }\n\n        /** 继续读取数字后面的类型 */\n        if (ch == 'L') {\n            sp++;\n            next();\n        } else if (ch == 'S') {\n            sp++;\n            next();\n        } else if (ch == 'B') {\n            sp++;\n            next();\n        } else if (ch == 'F') {\n            sp++;\n            next();\n            isDouble = true;\n        } else if (ch == 'D') {\n            sp++;\n            next();\n            isDouble = true;\n        } else if (ch == 'e' || ch == 'E') {\n\n            /** 扫描科学计数法 */\n            sp++;\n            next();\n\n            if (ch == '+' || ch == '-') {\n                sp++;\n                next();\n            }\n\n            for (;;) {\n                if (ch >= '0' && ch <= '9') {\n                    sp++;\n                } else {\n                    break;\n                }\n                next();\n            }\n\n            if (ch == 'D' || ch == 'F') {\n                sp++;\n                next();\n            }\n\n            isDouble = true;\n        }\n\n        if (isDouble) {\n            token = JSONToken.LITERAL_FLOAT;\n        } else {\n            token = JSONToken.LITERAL_INT;\n        }\n    }\n```\n\n### 扫描Boolean\n\n```java\n    public final void scanTrue() {\n        if (ch != 't') {\n            throw new JSONException(\"error parse true\");\n        }\n        next();\n\n        if (ch != 'r') {\n            throw new JSONException(\"error parse true\");\n        }\n        next();\n\n        if (ch != 'u') {\n            throw new JSONException(\"error parse true\");\n        }\n        next();\n\n        if (ch != 'e') {\n            throw new JSONException(\"error parse true\");\n        }\n        next();\n\n        if (ch == ' ' || ch == ',' || ch == '}' || ch == ']' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == EOI\n                || ch == '\\f' || ch == '\\b' || ch == ':' || ch == '/') {\n            /** 兼容性防御，标记是true的token */\n            token = JSONToken.TRUE;\n        } else {\n            throw new JSONException(\"scan true error\");\n        }\n    }\n```\n\n### 扫描标识符\n\n```java\n    public final void scanIdent() {\n        /** 记录当前流中token的开始位置, np指向当前token前一个字符 */\n        np = bp - 1;\n        hasSpecial = false;\n\n        for (;;) {\n            sp++;\n\n            next();\n            /** 如果是字母或数字，继续读取 */\n            if (Character.isLetterOrDigit(ch)) {\n                continue;\n            }\n\n            /** 获取字符串值 */\n            String ident = stringVal();\n\n            if (\"null\".equalsIgnoreCase(ident)) {\n                token = JSONToken.NULL;\n            } else if (\"new\".equals(ident)) {\n                token = JSONToken.NEW;\n            } else if (\"true\".equals(ident)) {\n                token = JSONToken.TRUE;\n            } else if (\"false\".equals(ident)) {\n                token = JSONToken.FALSE;\n            } else if (\"undefined\".equals(ident)) {\n                token = JSONToken.UNDEFINED;\n            } else if (\"Set\".equals(ident)) {\n                token = JSONToken.SET;\n            } else if (\"TreeSet\".equals(ident)) {\n                token = JSONToken.TREE_SET;\n            } else {\n                token = JSONToken.IDENTIFIER;\n            }\n            return;\n        }\n    }\n```\n\n#### 扫描十六进制数\n\n```java\n    public final void scanHex() {\n        if (ch != 'x') {\n            throw new JSONException(\"illegal state. \" + ch);\n        }\n        next();\n        /** 十六进制x紧跟着单引号 */\n        /** @see com.alibaba.fastjson.serializer.SerializeWriter#writeHex(byte[]) */\n        if (ch != '\\'') {\n            throw new JSONException(\"illegal state. \" + ch);\n        }\n\n        np = bp;\n        /** 这里一次next, for循环也读一次next, 因为十六进制被写成2个字节的单字符 */\n        next();\n\n        for (int i = 0;;++i) {\n            char ch = next();\n            if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F')) {\n                sp++;\n                continue;\n            } else if (ch == '\\'') {\n                sp++;\n                /** 遇到结束符号，自动预读下一个字符 */\n                next();\n                break;\n            } else {\n                throw new JSONException(\"illegal state. \" + ch);\n            }\n        }\n        token = JSONToken.HEX;\n    }\n\n```\n\n### 根据期望\b字符扫描token\n\n```java\n    public final void nextToken(int expect) {\n        /** 将字符buffer pos设置为初始0 */\n        sp = 0;\n\n        for (;;) {\n\n            switch (expect) {\n                case JSONToken.LBRACE:\n                    if (ch == '{') {\n                        token = JSONToken.LBRACE;\n                        next();\n                        return;\n                    }\n                    if (ch == '[') {\n                        token = JSONToken.LBRACKET;\n                        next();\n                        return;\n                    }\n                    break;\n                case JSONToken.COMMA:\n                    if (ch == ',') {\n                        token = JSONToken.COMMA;\n                        next();\n                        return;\n                    }\n\n                    if (ch == '}') {\n                        token = JSONToken.RBRACE;\n                        next();\n                        return;\n                    }\n\n                    if (ch == ']') {\n                        token = JSONToken.RBRACKET;\n                        next();\n                        return;\n                    }\n\n                    if (ch == EOI) {\n                        token = JSONToken.EOF;\n                        return;\n                    }\n                    break;\n                case JSONToken.LITERAL_INT:\n                    if (ch >= '0' && ch <= '9') {\n                        pos = bp;\n                        scanNumber();\n                        return;\n                    }\n\n                    if (ch == '\"') {\n                        pos = bp;\n                        scanString();\n                        return;\n                    }\n\n                    if (ch == '[') {\n                        token = JSONToken.LBRACKET;\n                        next();\n                        return;\n                    }\n\n                    if (ch == '{') {\n                        token = JSONToken.LBRACE;\n                        next();\n                        return;\n                    }\n\n                    break;\n                case JSONToken.LITERAL_STRING:\n                    if (ch == '\"') {\n                        pos = bp;\n                        /** 扫描字符串, pos指向字符串引号索引 */\n                        scanString();\n                        return;\n                    }\n\n                    if (ch >= '0' && ch <= '9') {\n                        pos = bp;\n                        /** 扫描数字, 前面已经分析过 */\n                        scanNumber();\n                        return;\n                    }\n\n                    if (ch == '[') {\n                        token = JSONToken.LBRACKET;\n                        next();\n                        return;\n                    }\n\n                    if (ch == '{') {\n                        token = JSONToken.LBRACE;\n                        next();\n                        return;\n                    }\n                    break;\n                case JSONToken.LBRACKET:\n                    if (ch == '[') {\n                        token = JSONToken.LBRACKET;\n                        next();\n                        return;\n                    }\n\n                    if (ch == '{') {\n                        token = JSONToken.LBRACE;\n                        next();\n                        return;\n                    }\n                    break;\n                case JSONToken.RBRACKET:\n                    if (ch == ']') {\n                        token = JSONToken.RBRACKET;\n                        next();\n                        return;\n                    }\n                case JSONToken.EOF:\n                    if (ch == EOI) {\n                        token = JSONToken.EOF;\n                        return;\n                    }\n                    break;\n                case JSONToken.IDENTIFIER:\n                    /** 跳过空白字符，如果是标识符_、$和字母开头，否则自动获取下一个token */\n                    nextIdent();\n                    return;\n                default:\n                    break;\n            }\n\n            /** 跳过空白字符 */\n            if (ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t' || ch == '\\f' || ch == '\\b') {\n                next();\n                continue;\n            }\n\n            /** 针对其他token自动读取下一个, 比如遇到冒号：,自动下一个token */\n            nextToken();\n            break;\n        }\n    }\n```\n\n这个方法主要是根据期望的字符expect，判定expect对应的token, 接下来主要分析解析对象字段的相关api实现。","slug":"Fastjson源码解析-词法和语法解析-(二)-基础类型实现解析","published":1,"updated":"2018-10-12T02:14:59.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4eti0010xat8lbvo06xa","content":"<h3 id=\"JSON-Token解析\"><a href=\"#JSON-Token解析\" class=\"headerlink\" title=\"JSON Token解析\"></a>JSON Token解析</h3><p><code>JSONLexerBase</code>定义并实现了<code>json</code>串实现解析机制的基础，在理解后面反序列化之前，我们先来看看并理解重要的属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 当前token含义 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            token;</span><br><span class=\"line\"><span class=\"comment\">/** 记录当前扫描字符位置 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            pos;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            features;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 当前有效字符 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">char</span>                           ch;</span><br><span class=\"line\"><span class=\"comment\">/** 流(或者json字符串)中当前的位置，每次读取字符会递增 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            bp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            eofPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 字符缓冲区 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">char</span>[]                         sbuf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 字符缓冲区的索引，指向下一个可写</span></span><br><span class=\"line\"><span class=\"comment\"> *  字符的位置，也代表字符缓冲区字符数量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            sp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * number start position</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以理解为 找到token时 token的首字符位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 和bp不一样，这个不会递增，会在开始token前记录一次</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            np;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JSONLexerBase成员函数\"><a href=\"#JSONLexerBase成员函数\" class=\"headerlink\" title=\"JSONLexerBase成员函数\"></a>JSONLexerBase成员函数</h3><p>在开始分析词法分析实现过程中，我发现中解析存在大量重复代码实现或极其类似实现，重复代码主要解决类似c++内联调用，极其相似代码实现我会挑选\b有代表性的来说明（一般实现较为复杂），没有说明的成员函数可以参考代码注释。</p>\n<h3 id=\"推断token类型\"><a href=\"#推断token类型\" class=\"headerlink\" title=\"推断token类型\"></a>推断token类型</h3><p><code>fastjson</code> token类型推断当前<code>json</code>字符串\b是那种类型的token, 比如是字符串、花括号和逗号等等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">nextToken</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 将字符buffer pos设置为初始0 */</span></span><br><span class=\"line\">    sp = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** pos记录为流的当前位置 */</span></span><br><span class=\"line\">        pos = bp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果是注释// 或者 \\/* *\\/ 注释，跳过注释 */</span></span><br><span class=\"line\">            skipComment();</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读取引号内的字符串 */</span></span><br><span class=\"line\">            scanString();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 跳过当前，读取下一个字符 */</span></span><br><span class=\"line\">            next();</span><br><span class=\"line\">            token = COMMA;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读取整数 */</span></span><br><span class=\"line\">            scanNumber();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读取负数 */</span></span><br><span class=\"line\">            scanNumber();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (ch) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读取单引号后面的字符串，和scanString逻辑一致 */</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\''</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isEnabled(Feature.AllowSingleQuotes)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"Feature.AllowSingleQuotes is false\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                scanStringSingleQuote();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">' '</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\t'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\b'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\f'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\n'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\r'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'t'</span>: <span class=\"comment\">// true</span></span><br><span class=\"line\">                <span class=\"comment\">/** 读取字符true */</span></span><br><span class=\"line\">                scanTrue();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>: <span class=\"comment\">// false</span></span><br><span class=\"line\">                <span class=\"comment\">/** 读取字符false */</span></span><br><span class=\"line\">                scanFalse();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'n'</span>: <span class=\"comment\">// new,null</span></span><br><span class=\"line\">                <span class=\"comment\">/** 读取为new或者null的token */</span></span><br><span class=\"line\">                scanNullOrNew();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'T'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'N'</span>: <span class=\"comment\">// NULL</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'S'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'u'</span>: <span class=\"comment\">// undefined</span></span><br><span class=\"line\">                <span class=\"comment\">/** 读取标识符，已经自动预读了下一个字符 */</span></span><br><span class=\"line\">                scanIdent();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'('</span>:</span><br><span class=\"line\">                <span class=\"comment\">/** 读取下一个字符 */</span></span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = LPAREN;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">')'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = RPAREN;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'['</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = LBRACKET;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">']'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = RBRACKET;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'&#123;'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = LBRACE;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'&#125;'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = RBRACE;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">':'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = COLON;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">';'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = SEMI;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'.'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = DOT;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'+'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                scanNumber();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'x'</span>:</span><br><span class=\"line\">                scanHex();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isEOF()) &#123; <span class=\"comment\">// JLS</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (token == EOF) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"EOF error\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    token = EOF;</span><br><span class=\"line\">                    pos = bp = eofPos;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 忽略控制字符或者删除字符 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch &lt;= <span class=\"number\">31</span> || ch == <span class=\"number\">127</span>) &#123;</span><br><span class=\"line\">                        next();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    lexError(<span class=\"string\">\"illegal.char\"</span>, String.valueOf((<span class=\"keyword\">int</span>) ch));</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"跳过注释\"><a href=\"#跳过注释\" class=\"headerlink\" title=\"跳过注释\"></a>跳过注释</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">skipComment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 读下一个字符 */</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">    <span class=\"comment\">/** 连续遇到左反斜杠/ */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读下一个字符 */</span></span><br><span class=\"line\">            next();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果遇到换行符，继续读取下一个字符并返回 */</span></span><br><span class=\"line\">                next();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果已经遇到流结束，返回 */</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == EOI) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 遇到`/*` 注释的格式 */</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 读下一个字符 */</span></span><br><span class=\"line\">        next();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; ch != EOI;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果遇到*,继续尝试读取下一个字符，看看是否是/字符 */</span></span><br><span class=\"line\">                next();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果确实是/字符，提前预读下一个有效字符后终止 */</span></span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 遇到非/ 继续跳过度下一个字符 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果没有遇到`*\\` 注释格式, 继续读下一个字符 */</span></span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 不符合// 或者 \\/* *\\/ 注释格式 */</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"invalid comment\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解析注释主要分为2中，支持<code>//</code> 或者 <code>/* */</code> 注释格式。</p>\n<h3 id=\"扫描字符串\"><a href=\"#扫描字符串\" class=\"headerlink\" title=\"扫描字符串\"></a>扫描字符串</h3><p>当解析<code>json</code>字符串是<code>&quot;</code>时，会调用扫描字符串方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scanString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 记录当前流中token的开始位置, np指向引号的索引 */</span></span><br><span class=\"line\">    np = bp;</span><br><span class=\"line\">    hasSpecial = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 读取当前字符串的字符 */</span></span><br><span class=\"line\">        ch = next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果遇到字符串结束符\"， 则结束 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\\"'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == EOI) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果遇到了结束符EOI，但是没有遇到流的结尾，添加EOI结束符 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isEOF()) &#123;</span><br><span class=\"line\">                putChar((<span class=\"keyword\">char</span>) EOI);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"unclosed string : \"</span> + ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 处理转译字符逻辑 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\\\'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!hasSpecial) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 第一次遇到\\认为是特殊符号 */</span></span><br><span class=\"line\">                hasSpecial = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 如果buffer空间不够，执行2倍扩容 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sp &gt;= sbuf.length) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> newCapcity = sbuf.length * <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (sp &gt; newCapcity) &#123;</span><br><span class=\"line\">                        newCapcity = sp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span>[] newsbuf = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[newCapcity];</span><br><span class=\"line\">                    System.arraycopy(sbuf, <span class=\"number\">0</span>, newsbuf, <span class=\"number\">0</span>, sbuf.length);</span><br><span class=\"line\">                    sbuf = newsbuf;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 复制有效字符串到buffer中，不包括引号 */</span></span><br><span class=\"line\">                copyTo(np + <span class=\"number\">1</span>, sp, sbuf);</span><br><span class=\"line\">                <span class=\"comment\">// text.getChars(np + 1, np + 1 + sp, sbuf, 0);</span></span><br><span class=\"line\">                <span class=\"comment\">// System.arraycopy(buf, np + 1, sbuf, 0, sp);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 读取转译字符\\下一个字符 */</span></span><br><span class=\"line\">            ch = next();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 转换ascii字符，请参考：https://baike.baidu.com/item/ASCII/309296?fr=aladdin */</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (ch) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'0'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 空字符 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\0'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 标题开始 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\1'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'2'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 正文开始 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\2'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'3'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 正文结束 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\3'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'4'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 传输结束 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\4'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'5'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 请求 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\5'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'6'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 收到通知 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\6'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'7'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 响铃 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\7'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'b'</span>: <span class=\"comment\">// 8</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 退格 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\b'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'t'</span>: <span class=\"comment\">// 9</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 水平制表符 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\t'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'n'</span>: <span class=\"comment\">// 10</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 换行键 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'v'</span>: <span class=\"comment\">// 11</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 垂直制表符 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\u000B'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>: <span class=\"comment\">// 12</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 换页键 */</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'F'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 换页键 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\f'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'r'</span>: <span class=\"comment\">// 13</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 回车键 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\r'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'\"'</span>: <span class=\"comment\">// 34</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 双引号 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'\\''</span>: <span class=\"comment\">// 39</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 闭单引号 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>: <span class=\"comment\">// 47</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 斜杠 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'\\\\'</span>: <span class=\"comment\">// 92</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 反斜杠 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'x'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 小写字母x, 标识一个字符 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">char</span> x1 = ch = next();</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> x2 = ch = next();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">/** x1 左移4位 + x2 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> x_val = digits[x1] * <span class=\"number\">16</span> + digits[x2];</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> x_char = (<span class=\"keyword\">char</span>) x_val;</span><br><span class=\"line\">                    putChar(x_char);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'u'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 小写字母u, 标识一个字符 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">char</span> u1 = ch = next();</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> u2 = ch = next();</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> u3 = ch = next();</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> u4 = ch = next();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> val = Integer.parseInt(<span class=\"keyword\">new</span> String(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; u1, u2, u3, u4 &#125;), <span class=\"number\">16</span>);</span><br><span class=\"line\">                    putChar((<span class=\"keyword\">char</span>) val);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.ch = ch;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"unclosed string : \"</span> + ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 没有转译字符，递增buffer字符位置 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasSpecial) &#123;</span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 继续读取转译字符后面的字符 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sp == sbuf.length) &#123;</span><br><span class=\"line\">            putChar(ch);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sbuf[sp++] = ch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    token = JSONToken.LITERAL_STRING;</span><br><span class=\"line\">    <span class=\"comment\">/** 自动预读下一个字符 */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ch = next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解析到字符串的时候会写入buffer。</p>\n<h3 id=\"扫描数字类型\"><a href=\"#扫描数字类型\" class=\"headerlink\" title=\"扫描数字类型\"></a>扫描数字类型</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scanNumber</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 记录当前流中token的开始位置, np指向数字字符索引 */</span></span><br><span class=\"line\">    np = bp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 兼容处理负数 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果是数字字符，递增索引位置 */</span></span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isDouble = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果遇到小数点字符 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        <span class=\"comment\">/** 继续读小数点后面字符 */</span></span><br><span class=\"line\">        next();</span><br><span class=\"line\">        isDouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                sp++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 继续读取数字后面的类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'L'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'S'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'F'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        isDouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'D'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        isDouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'e'</span> || ch == <span class=\"string\">'E'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 扫描科学计数法 */</span></span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'+'</span> || ch == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                sp++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'D'</span> || ch == <span class=\"string\">'F'</span>) &#123;</span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        isDouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDouble) &#123;</span><br><span class=\"line\">        token = JSONToken.LITERAL_FLOAT;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        token = JSONToken.LITERAL_INT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"扫描Boolean\"><a href=\"#扫描Boolean\" class=\"headerlink\" title=\"扫描Boolean\"></a>扫描Boolean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scanTrue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'t'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"error parse true\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'r'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"error parse true\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'u'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"error parse true\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'e'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"error parse true\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">' '</span> || ch == <span class=\"string\">','</span> || ch == <span class=\"string\">'&#125;'</span> || ch == <span class=\"string\">']'</span> || ch == <span class=\"string\">'\\n'</span> || ch == <span class=\"string\">'\\r'</span> || ch == <span class=\"string\">'\\t'</span> || ch == EOI</span><br><span class=\"line\">            || ch == <span class=\"string\">'\\f'</span> || ch == <span class=\"string\">'\\b'</span> || ch == <span class=\"string\">':'</span> || ch == <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 兼容性防御，标记是true的token */</span></span><br><span class=\"line\">        token = JSONToken.TRUE;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"scan true error\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"扫描标识符\"><a href=\"#扫描标识符\" class=\"headerlink\" title=\"扫描标识符\"></a>扫描标识符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scanIdent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 记录当前流中token的开始位置, np指向当前token前一个字符 */</span></span><br><span class=\"line\">    np = bp - <span class=\"number\">1</span>;</span><br><span class=\"line\">    hasSpecial = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\"></span><br><span class=\"line\">        next();</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是字母或数字，继续读取 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.isLetterOrDigit(ch)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 获取字符串值 */</span></span><br><span class=\"line\">        String ident = stringVal();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"null\"</span>.equalsIgnoreCase(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.NULL;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"new\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.NEW;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"true\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.TRUE;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"false\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.FALSE;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"undefined\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.UNDEFINED;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"Set\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.SET;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"TreeSet\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.TREE_SET;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            token = JSONToken.IDENTIFIER;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"扫描十六进制数\"><a href=\"#扫描十六进制数\" class=\"headerlink\" title=\"扫描十六进制数\"></a>扫描十六进制数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scanHex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'x'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"illegal state. \"</span> + ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">    <span class=\"comment\">/** 十六进制x紧跟着单引号 */</span></span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@see</span> com.alibaba.fastjson.serializer.SerializeWriter#writeHex(byte[]) */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'\\''</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"illegal state. \"</span> + ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    np = bp;</span><br><span class=\"line\">    <span class=\"comment\">/** 这里一次next, for循环也读一次next, 因为十六进制被写成2个字节的单字符 */</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;;++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = next();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) || (ch &gt;= <span class=\"string\">'A'</span> &amp;&amp; ch &lt;= <span class=\"string\">'F'</span>)) &#123;</span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\''</span>) &#123;</span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">            <span class=\"comment\">/** 遇到结束符号，自动预读下一个字符 */</span></span><br><span class=\"line\">            next();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"illegal state. \"</span> + ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    token = JSONToken.HEX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"根据期望字符扫描token\"><a href=\"#根据期望字符扫描token\" class=\"headerlink\" title=\"根据期望\b字符扫描token\"></a>根据期望\b字符扫描token</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">nextToken</span><span class=\"params\">(<span class=\"keyword\">int</span> expect)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 将字符buffer pos设置为初始0 */</span></span><br><span class=\"line\">    sp = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (expect) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.LBRACE:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACE;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.COMMA:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.COMMA;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.RBRACE;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.RBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == EOI) &#123;</span><br><span class=\"line\">                    token = JSONToken.EOF;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.LITERAL_INT:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                    pos = bp;</span><br><span class=\"line\">                    scanNumber();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">                    pos = bp;</span><br><span class=\"line\">                    scanString();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACE;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.LITERAL_STRING:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">                    pos = bp;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描字符串, pos指向字符串引号索引 */</span></span><br><span class=\"line\">                    scanString();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                    pos = bp;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描数字, 前面已经分析过 */</span></span><br><span class=\"line\">                    scanNumber();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACE;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.LBRACKET:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACE;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.RBRACKET:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.RBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.EOF:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == EOI) &#123;</span><br><span class=\"line\">                    token = JSONToken.EOF;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.IDENTIFIER:</span><br><span class=\"line\">                <span class=\"comment\">/** 跳过空白字符，如果是标识符_、$和字母开头，否则自动获取下一个token */</span></span><br><span class=\"line\">                nextIdent();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 跳过空白字符 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">' '</span> || ch == <span class=\"string\">'\\n'</span> || ch == <span class=\"string\">'\\r'</span> || ch == <span class=\"string\">'\\t'</span> || ch == <span class=\"string\">'\\f'</span> || ch == <span class=\"string\">'\\b'</span>) &#123;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 针对其他token自动读取下一个, 比如遇到冒号：,自动下一个token */</span></span><br><span class=\"line\">        nextToken();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法主要是根据期望的字符expect，判定expect对应的token, 接下来主要分析解析对象字段的相关api实现。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h3 id=\"JSON-Token解析\"><a href=\"#JSON-Token解析\" class=\"headerlink\" title=\"JSON Token解析\"></a>JSON Token解析</h3><p><code>JSONLexerBase</code>定义并实现了<code>json</code>串实现解析机制的基础，在理解后面反序列化之前，我们先来看看并理解重要的属性：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 当前token含义 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            token;</span><br><span class=\"line\"><span class=\"comment\">/** 记录当前扫描字符位置 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            pos;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            features;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 当前有效字符 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">char</span>                           ch;</span><br><span class=\"line\"><span class=\"comment\">/** 流(或者json字符串)中当前的位置，每次读取字符会递增 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            bp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            eofPos;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 字符缓冲区 */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">char</span>[]                         sbuf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** 字符缓冲区的索引，指向下一个可写</span></span><br><span class=\"line\"><span class=\"comment\"> *  字符的位置，也代表字符缓冲区字符数量</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            sp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * number start position</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以理解为 找到token时 token的首字符位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 和bp不一样，这个不会递增，会在开始token前记录一次</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span>                            np;</span><br></pre></td></tr></table></figure>\n<h3 id=\"JSONLexerBase成员函数\"><a href=\"#JSONLexerBase成员函数\" class=\"headerlink\" title=\"JSONLexerBase成员函数\"></a>JSONLexerBase成员函数</h3><p>在开始分析词法分析实现过程中，我发现中解析存在大量重复代码实现或极其类似实现，重复代码主要解决类似c++内联调用，极其相似代码实现我会挑选\b有代表性的来说明（一般实现较为复杂），没有说明的成员函数可以参考代码注释。</p>\n<h3 id=\"推断token类型\"><a href=\"#推断token类型\" class=\"headerlink\" title=\"推断token类型\"></a>推断token类型</h3><p><code>fastjson</code> token类型推断当前<code>json</code>字符串\b是那种类型的token, 比如是字符串、花括号和逗号等等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">nextToken</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 将字符buffer pos设置为初始0 */</span></span><br><span class=\"line\">    sp = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** pos记录为流的当前位置 */</span></span><br><span class=\"line\">        pos = bp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果是注释// 或者 \\/* *\\/ 注释，跳过注释 */</span></span><br><span class=\"line\">            skipComment();</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读取引号内的字符串 */</span></span><br><span class=\"line\">            scanString();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 跳过当前，读取下一个字符 */</span></span><br><span class=\"line\">            next();</span><br><span class=\"line\">            token = COMMA;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读取整数 */</span></span><br><span class=\"line\">            scanNumber();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读取负数 */</span></span><br><span class=\"line\">            scanNumber();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (ch) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读取单引号后面的字符串，和scanString逻辑一致 */</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\''</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isEnabled(Feature.AllowSingleQuotes)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"Feature.AllowSingleQuotes is false\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                scanStringSingleQuote();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">' '</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\t'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\b'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\f'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\n'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'\\r'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'t'</span>: <span class=\"comment\">// true</span></span><br><span class=\"line\">                <span class=\"comment\">/** 读取字符true */</span></span><br><span class=\"line\">                scanTrue();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>: <span class=\"comment\">// false</span></span><br><span class=\"line\">                <span class=\"comment\">/** 读取字符false */</span></span><br><span class=\"line\">                scanFalse();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'n'</span>: <span class=\"comment\">// new,null</span></span><br><span class=\"line\">                <span class=\"comment\">/** 读取为new或者null的token */</span></span><br><span class=\"line\">                scanNullOrNew();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'T'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'N'</span>: <span class=\"comment\">// NULL</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'S'</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'u'</span>: <span class=\"comment\">// undefined</span></span><br><span class=\"line\">                <span class=\"comment\">/** 读取标识符，已经自动预读了下一个字符 */</span></span><br><span class=\"line\">                scanIdent();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'('</span>:</span><br><span class=\"line\">                <span class=\"comment\">/** 读取下一个字符 */</span></span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = LPAREN;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">')'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = RPAREN;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'['</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = LBRACKET;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">']'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = RBRACKET;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'&#123;'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = LBRACE;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'&#125;'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = RBRACE;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">':'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = COLON;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">';'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = SEMI;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'.'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                token = DOT;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'+'</span>:</span><br><span class=\"line\">                next();</span><br><span class=\"line\">                scanNumber();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'x'</span>:</span><br><span class=\"line\">                scanHex();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isEOF()) &#123; <span class=\"comment\">// JLS</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (token == EOF) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"EOF error\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    token = EOF;</span><br><span class=\"line\">                    pos = bp = eofPos;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 忽略控制字符或者删除字符 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (ch &lt;= <span class=\"number\">31</span> || ch == <span class=\"number\">127</span>) &#123;</span><br><span class=\"line\">                        next();</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    lexError(<span class=\"string\">\"illegal.char\"</span>, String.valueOf((<span class=\"keyword\">int</span>) ch));</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"跳过注释\"><a href=\"#跳过注释\" class=\"headerlink\" title=\"跳过注释\"></a>跳过注释</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">skipComment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 读下一个字符 */</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\">    <span class=\"comment\">/** 连续遇到左反斜杠/ */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 读下一个字符 */</span></span><br><span class=\"line\">            next();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\n'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果遇到换行符，继续读取下一个字符并返回 */</span></span><br><span class=\"line\">                next();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果已经遇到流结束，返回 */</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == EOI) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 遇到`/*` 注释的格式 */</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 读下一个字符 */</span></span><br><span class=\"line\">        next();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; ch != EOI;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch == <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果遇到*,继续尝试读取下一个字符，看看是否是/字符 */</span></span><br><span class=\"line\">                next();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果确实是/字符，提前预读下一个有效字符后终止 */</span></span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 遇到非/ 继续跳过度下一个字符 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果没有遇到`*\\` 注释格式, 继续读下一个字符 */</span></span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 不符合// 或者 \\/* *\\/ 注释格式 */</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"invalid comment\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解析注释主要分为2中，支持<code>//</code> 或者 <code>/* */</code> 注释格式。</p>\n<h3 id=\"扫描字符串\"><a href=\"#扫描字符串\" class=\"headerlink\" title=\"扫描字符串\"></a>扫描字符串</h3><p>当解析<code>json</code>字符串是<code>&quot;</code>时，会调用扫描字符串方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scanString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 记录当前流中token的开始位置, np指向引号的索引 */</span></span><br><span class=\"line\">    np = bp;</span><br><span class=\"line\">    hasSpecial = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 读取当前字符串的字符 */</span></span><br><span class=\"line\">        ch = next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果遇到字符串结束符\"， 则结束 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\\"'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == EOI) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果遇到了结束符EOI，但是没有遇到流的结尾，添加EOI结束符 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isEOF()) &#123;</span><br><span class=\"line\">                putChar((<span class=\"keyword\">char</span>) EOI);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"unclosed string : \"</span> + ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 处理转译字符逻辑 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\\\'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!hasSpecial) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 第一次遇到\\认为是特殊符号 */</span></span><br><span class=\"line\">                hasSpecial = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 如果buffer空间不够，执行2倍扩容 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sp &gt;= sbuf.length) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> newCapcity = sbuf.length * <span class=\"number\">2</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (sp &gt; newCapcity) &#123;</span><br><span class=\"line\">                        newCapcity = sp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">char</span>[] newsbuf = <span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[newCapcity];</span><br><span class=\"line\">                    System.arraycopy(sbuf, <span class=\"number\">0</span>, newsbuf, <span class=\"number\">0</span>, sbuf.length);</span><br><span class=\"line\">                    sbuf = newsbuf;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 复制有效字符串到buffer中，不包括引号 */</span></span><br><span class=\"line\">                copyTo(np + <span class=\"number\">1</span>, sp, sbuf);</span><br><span class=\"line\">                <span class=\"comment\">// text.getChars(np + 1, np + 1 + sp, sbuf, 0);</span></span><br><span class=\"line\">                <span class=\"comment\">// System.arraycopy(buf, np + 1, sbuf, 0, sp);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 读取转译字符\\下一个字符 */</span></span><br><span class=\"line\">            ch = next();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 转换ascii字符，请参考：https://baike.baidu.com/item/ASCII/309296?fr=aladdin */</span></span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (ch) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'0'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 空字符 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\0'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'1'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 标题开始 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\1'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'2'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 正文开始 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\2'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'3'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 正文结束 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\3'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'4'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 传输结束 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\4'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'5'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 请求 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\5'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'6'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 收到通知 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\6'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'7'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 响铃 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\7'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'b'</span>: <span class=\"comment\">// 8</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 退格 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\b'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'t'</span>: <span class=\"comment\">// 9</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 水平制表符 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\t'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'n'</span>: <span class=\"comment\">// 10</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 换行键 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'v'</span>: <span class=\"comment\">// 11</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 垂直制表符 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\u000B'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'f'</span>: <span class=\"comment\">// 12</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 换页键 */</span></span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'F'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 换页键 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\f'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'r'</span>: <span class=\"comment\">// 13</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 回车键 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\r'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'\"'</span>: <span class=\"comment\">// 34</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 双引号 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\"'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'\\''</span>: <span class=\"comment\">// 39</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 闭单引号 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\''</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'/'</span>: <span class=\"comment\">// 47</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 斜杠 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'\\\\'</span>: <span class=\"comment\">// 92</span></span><br><span class=\"line\">                    <span class=\"comment\">/** 反斜杠 */</span></span><br><span class=\"line\">                    putChar(<span class=\"string\">'\\\\'</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'x'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 小写字母x, 标识一个字符 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">char</span> x1 = ch = next();</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> x2 = ch = next();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">/** x1 左移4位 + x2 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> x_val = digits[x1] * <span class=\"number\">16</span> + digits[x2];</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> x_char = (<span class=\"keyword\">char</span>) x_val;</span><br><span class=\"line\">                    putChar(x_char);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'u'</span>:</span><br><span class=\"line\">                    <span class=\"comment\">/** 小写字母u, 标识一个字符 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">char</span> u1 = ch = next();</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> u2 = ch = next();</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> u3 = ch = next();</span><br><span class=\"line\">                    <span class=\"keyword\">char</span> u4 = ch = next();</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> val = Integer.parseInt(<span class=\"keyword\">new</span> String(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; u1, u2, u3, u4 &#125;), <span class=\"number\">16</span>);</span><br><span class=\"line\">                    putChar((<span class=\"keyword\">char</span>) val);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.ch = ch;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"unclosed string : \"</span> + ch);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 没有转译字符，递增buffer字符位置 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasSpecial) &#123;</span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 继续读取转译字符后面的字符 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sp == sbuf.length) &#123;</span><br><span class=\"line\">            putChar(ch);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sbuf[sp++] = ch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    token = JSONToken.LITERAL_STRING;</span><br><span class=\"line\">    <span class=\"comment\">/** 自动预读下一个字符 */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.ch = next();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解析到字符串的时候会写入buffer。</p>\n<h3 id=\"扫描数字类型\"><a href=\"#扫描数字类型\" class=\"headerlink\" title=\"扫描数字类型\"></a>扫描数字类型</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scanNumber</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 记录当前流中token的开始位置, np指向数字字符索引 */</span></span><br><span class=\"line\">    np = bp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 兼容处理负数 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果是数字字符，递增索引位置 */</span></span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> isDouble = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果遇到小数点字符 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        <span class=\"comment\">/** 继续读小数点后面字符 */</span></span><br><span class=\"line\">        next();</span><br><span class=\"line\">        isDouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                sp++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 继续读取数字后面的类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">'L'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'S'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'F'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        isDouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'D'</span>) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\">        isDouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'e'</span> || ch == <span class=\"string\">'E'</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 扫描科学计数法 */</span></span><br><span class=\"line\">        sp++;</span><br><span class=\"line\">        next();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'+'</span> || ch == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                sp++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">'D'</span> || ch == <span class=\"string\">'F'</span>) &#123;</span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        isDouble = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isDouble) &#123;</span><br><span class=\"line\">        token = JSONToken.LITERAL_FLOAT;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        token = JSONToken.LITERAL_INT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"扫描Boolean\"><a href=\"#扫描Boolean\" class=\"headerlink\" title=\"扫描Boolean\"></a>扫描Boolean</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scanTrue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'t'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"error parse true\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'r'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"error parse true\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'u'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"error parse true\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'e'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"error parse true\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch == <span class=\"string\">' '</span> || ch == <span class=\"string\">','</span> || ch == <span class=\"string\">'&#125;'</span> || ch == <span class=\"string\">']'</span> || ch == <span class=\"string\">'\\n'</span> || ch == <span class=\"string\">'\\r'</span> || ch == <span class=\"string\">'\\t'</span> || ch == EOI</span><br><span class=\"line\">            || ch == <span class=\"string\">'\\f'</span> || ch == <span class=\"string\">'\\b'</span> || ch == <span class=\"string\">':'</span> || ch == <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 兼容性防御，标记是true的token */</span></span><br><span class=\"line\">        token = JSONToken.TRUE;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"scan true error\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"扫描标识符\"><a href=\"#扫描标识符\" class=\"headerlink\" title=\"扫描标识符\"></a>扫描标识符</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scanIdent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 记录当前流中token的开始位置, np指向当前token前一个字符 */</span></span><br><span class=\"line\">    np = bp - <span class=\"number\">1</span>;</span><br><span class=\"line\">    hasSpecial = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        sp++;</span><br><span class=\"line\"></span><br><span class=\"line\">        next();</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是字母或数字，继续读取 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.isLetterOrDigit(ch)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 获取字符串值 */</span></span><br><span class=\"line\">        String ident = stringVal();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"null\"</span>.equalsIgnoreCase(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.NULL;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"new\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.NEW;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"true\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.TRUE;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"false\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.FALSE;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"undefined\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.UNDEFINED;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"Set\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.SET;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"TreeSet\"</span>.equals(ident)) &#123;</span><br><span class=\"line\">            token = JSONToken.TREE_SET;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            token = JSONToken.IDENTIFIER;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"扫描十六进制数\"><a href=\"#扫描十六进制数\" class=\"headerlink\" title=\"扫描十六进制数\"></a>扫描十六进制数</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">scanHex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'x'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"illegal state. \"</span> + ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">    <span class=\"comment\">/** 十六进制x紧跟着单引号 */</span></span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@see</span> com.alibaba.fastjson.serializer.SerializeWriter#writeHex(byte[]) */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ch != <span class=\"string\">'\\''</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"illegal state. \"</span> + ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    np = bp;</span><br><span class=\"line\">    <span class=\"comment\">/** 这里一次next, for循环也读一次next, 因为十六进制被写成2个字节的单字符 */</span></span><br><span class=\"line\">    next();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;;++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> ch = next();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) || (ch &gt;= <span class=\"string\">'A'</span> &amp;&amp; ch &lt;= <span class=\"string\">'F'</span>)) &#123;</span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\\''</span>) &#123;</span><br><span class=\"line\">            sp++;</span><br><span class=\"line\">            <span class=\"comment\">/** 遇到结束符号，自动预读下一个字符 */</span></span><br><span class=\"line\">            next();</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"illegal state. \"</span> + ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    token = JSONToken.HEX;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"根据期望字符扫描token\"><a href=\"#根据期望字符扫描token\" class=\"headerlink\" title=\"根据期望\b字符扫描token\"></a>根据期望\b字符扫描token</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">nextToken</span><span class=\"params\">(<span class=\"keyword\">int</span> expect)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 将字符buffer pos设置为初始0 */</span></span><br><span class=\"line\">    sp = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (expect) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.LBRACE:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACE;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.COMMA:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.COMMA;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.RBRACE;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.RBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == EOI) &#123;</span><br><span class=\"line\">                    token = JSONToken.EOF;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.LITERAL_INT:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                    pos = bp;</span><br><span class=\"line\">                    scanNumber();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">                    pos = bp;</span><br><span class=\"line\">                    scanString();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACE;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.LITERAL_STRING:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">                    pos = bp;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描字符串, pos指向字符串引号索引 */</span></span><br><span class=\"line\">                    scanString();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch &gt;= <span class=\"string\">'0'</span> &amp;&amp; ch &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                    pos = bp;</span><br><span class=\"line\">                    <span class=\"comment\">/** 扫描数字, 前面已经分析过 */</span></span><br><span class=\"line\">                    scanNumber();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACE;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.LBRACKET:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'['</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">'&#123;'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.LBRACE;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.RBRACKET:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">                    token = JSONToken.RBRACKET;</span><br><span class=\"line\">                    next();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.EOF:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ch == EOI) &#123;</span><br><span class=\"line\">                    token = JSONToken.EOF;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> JSONToken.IDENTIFIER:</span><br><span class=\"line\">                <span class=\"comment\">/** 跳过空白字符，如果是标识符_、$和字母开头，否则自动获取下一个token */</span></span><br><span class=\"line\">                nextIdent();</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 跳过空白字符 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == <span class=\"string\">' '</span> || ch == <span class=\"string\">'\\n'</span> || ch == <span class=\"string\">'\\r'</span> || ch == <span class=\"string\">'\\t'</span> || ch == <span class=\"string\">'\\f'</span> || ch == <span class=\"string\">'\\b'</span>) &#123;</span><br><span class=\"line\">            next();</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 针对其他token自动读取下一个, 比如遇到冒号：,自动下一个token */</span></span><br><span class=\"line\">        nextToken();</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法主要是根据期望的字符expect，判定expect对应的token, 接下来主要分析解析对象字段的相关api实现。</p>\n"},{"title":"词法和语法解析（九）","subtitle":"这个章节主要讨论关于对象字段相关词法解析的api，同时对于极其相似的api不冗余分析，可以参考代码阅读。","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:10:14.000Z","_content":"\n\n### JSON Token解析\n\n这个章节主要讨论关于对象\b字段相关词法解析的api。\n\n### JSONLexerBase成员函数\n\n\b\b这里讲解主要挑选具有代表性的api进行讲解，同时对于极其相似的api不冗余分析，可以参考代码阅读。\n\n#### Int类型字段解析\n\n当反序列化`java`对象遇到整型`int.class`字段会调用该方法解析：\n\n```java\n    public int scanInt(char expectNext) {\n        matchStat = UNKNOWN;\n\n        int offset = 0;\n        char chLocal = charAt(bp + (offset++));\n\n        /** 取整数第一个字符判断是否是引号 */\n        final boolean quote = chLocal == '\"';\n        if (quote) {\n            /** 如果是双引号，取第一个数字字符 */\n            chLocal = charAt(bp + (offset++));\n        }\n\n        final boolean negative = chLocal == '-';\n        if (negative) {\n            /** 如果是负数，继续取下一个字符 */\n            chLocal = charAt(bp + (offset++));\n        }\n\n        int value;\n        /** 是数字类型 */\n        if (chLocal >= '0' && chLocal <= '9') {\n            value = chLocal - '0';\n            for (;;) {\n                /** 循环将字符转换成数字 */\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    value = value * 10 + (chLocal - '0');\n                } else if (chLocal == '.') {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                } else {\n                    break;\n                }\n            }\n            if (value < 0) {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            /** 匹配到null */\n            matchStat = VALUE_NULL;\n            value = 0;\n            offset += 3;\n            /** 读取null后面的一个字符 */\n            chLocal = charAt(bp + offset++);\n\n            if (quote && chLocal == '\"') {\n                chLocal = charAt(bp + offset++);\n            }\n\n            for (;;) {\n                /** 如果读取null后面有逗号，认为结束 */\n                if (chLocal == ',') {\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.COMMA;\n                    return value;\n                } else if (chLocal == ']') {\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.RBRACKET;\n                    return value;\n                    /** 忽略空白字符 */\n                } else if (isWhitespace(chLocal)) {\n                    chLocal = charAt(bp + offset++);\n                    continue;\n                }\n                break;\n            }\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        for (;;) {\n            /** 根据期望字符用于结束匹配 */\n            if (chLocal == expectNext) {\n                bp += offset;\n                this.ch = this.charAt(bp);\n                matchStat = VALUE;\n                token = JSONToken.COMMA;\n                return negative ? -value : value;\n            } else {\n                /** 忽略空白字符 */\n                if (isWhitespace(chLocal)) {\n                    chLocal = charAt(bp + (offset++));\n                    continue;\n                }\n                matchStat = NOT_MATCH;\n                return negative ? -value : value;\n            }\n        }\n    }\n```\n\n`com.alibaba.fastjson.parser.JSONLexerBase#scanInt(char)`方法考虑了数字加引号的情况，当遇到下列情况认为匹配失败：\n\n1. 扫描遇到的数字遇到标点符号\n2. 扫描的数字范围溢出\n3. 扫描到的非数字并且不是null\n4. 忽略\b空白字符的情况下，读取数字后结束符和期望expectNext不一致\n\n`fastjson` 还提供第二种接口，根据token识别数字：\n\n```java\n    public final Number integerValue() throws NumberFormatException {\n        long result = 0;\n        boolean negative = false;\n        if (np == -1) {\n            np = 0;\n        }\n        /** np是token开始索引, sp是buffer索引，也代表buffer字符个数 */\n        int i = np, max = np + sp;\n        long limit;\n        long multmin;\n        int digit;\n\n        char type = ' ';\n\n        /** 探测数字类型最后一位是否带类型 */\n        switch (charAt(max - 1)) {\n            case 'L':\n                max--;\n                type = 'L';\n                break;\n            case 'S':\n                max--;\n                type = 'S';\n                break;\n            case 'B':\n                max--;\n                type = 'B';\n                break;\n            default:\n                break;\n        }\n\n        /** 探测数字首字符是否是符号 */\n        if (charAt(np) == '-') {\n            negative = true;\n            limit = Long.MIN_VALUE;\n            i++;\n        } else {\n            limit = -Long.MAX_VALUE;\n        }\n        multmin = MULTMIN_RADIX_TEN;\n        if (i < max) {\n            /** 数字第一个字母转换成数字 */\n            digit = charAt(i++) - '0';\n            result = -digit;\n        }\n\n        /** 快速处理高精度整数，因为整数最大是10^9次方 */\n        while (i < max) {\n            // Accumulating negatively avoids surprises near MAX_VALUE\n            digit = charAt(i++) - '0';\n            /** multmin 大概10^17 */\n            if (result < multmin) {\n                /** numberString获取到的不包含数字后缀类型，但是包括负数符号(如果有) */\n                return new BigInteger(numberString());\n            }\n            result *= 10;\n            if (result < limit + digit) {\n                return new BigInteger(numberString());\n            }\n            result -= digit;\n        }\n\n        if (negative) {\n            /** 处理完数字 i 是指向数字最后一个字符的下一个字符,\n             *  这里判断 i > np + 1 , 代表在 有效数字字符范围\n             */\n            if (i > np + 1) {\n                /** 这里根据类型具体后缀类型做一次转换 */\n                if (result >= Integer.MIN_VALUE && type != 'L') {\n                    if (type == 'S') {\n                        return (short) result;\n                    }\n\n                    if (type == 'B') {\n                        return (byte) result;\n                    }\n\n                    return (int) result;\n                }\n                return result;\n            } else { /* Only got \"-\" */\n                throw new NumberFormatException(numberString());\n            }\n        } else {\n            /** 这里是整数， 因为前面处理成负数，取反就可以了 */\n            result = -result;\n            /** 这里根据类型具体后缀类型做一次转换 */\n            if (result <= Integer.MAX_VALUE && type != 'L') {\n                if (type == 'S') {\n                    return (short) result;\n                }\n\n                if (type == 'B') {\n                    return (byte) result;\n                }\n\n                return (int) result;\n            }\n            return result;\n        }\n    }\n```\n\n`fastjson` 还提供第三种接口，这个接口严格根据字段名进行匹配`json`字符串，字段名会自动加上双引号和冒号，格式`\"key\":` :\n\n```java\n    public int scanFieldInt(char[] fieldName) {\n        matchStat = UNKNOWN;\n\n        /** 属性不匹配，忽略 */\n        if (!charArrayCompare(fieldName)) {\n            matchStat = NOT_MATCH_NAME;\n            return 0;\n        }\n\n        int offset = fieldName.length;\n        char chLocal = charAt(bp + (offset++));\n\n        final boolean negative = chLocal == '-';\n        if (negative) {\n            /** 如果是负数，读取第一个数字字符 */\n            chLocal = charAt(bp + (offset++));\n        }\n\n        int value;\n        if (chLocal >= '0' && chLocal <= '9') {\n            /** 转换成数字 */\n            value = chLocal - '0';\n            for (;;) {\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    value = value * 10 + (chLocal - '0');\n                } else if (chLocal == '.') {\n                    /** 数字后面有点，不符合整数，标记不匹配 */\n                    matchStat = NOT_MATCH;\n                    return 0;\n                } else {\n                    break;\n                }\n            }\n            /** value < 0 代表整数值溢出了,\n             *  11 + 3 代表了最小负数加了引号(占用2), 剩余\n             *  占用1 是因为读完最后一位数字，offset++ 递增了1\n             */\n            if (value < 0\n                    || offset > 11 + 3 + fieldName.length) {\n                if (value != Integer.MIN_VALUE\n                        || offset != 17\n                        || !negative) {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                }\n            }\n        } else {\n            /** 非数字代表不匹配 */\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        /** 如果遇到逗号，认为结束 */\n        if (chLocal == ',') {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            token = JSONToken.COMMA;\n            return negative ? -value : value;\n        }\n\n        if (chLocal == '}') {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal == ',') {\n                token = JSONToken.COMMA;\n                bp += offset;\n                this.ch = this.charAt(bp);\n            } else if (chLocal == ']') {\n                token = JSONToken.RBRACKET;\n                bp += offset;\n                this.ch = this.charAt(bp);\n            } else if (chLocal == '}') {\n                token = JSONToken.RBRACE;\n                bp += offset;\n                this.ch = this.charAt(bp);\n            } else if (chLocal == EOI) {\n                token = JSONToken.EOF;\n                bp += (offset - 1);\n                ch = EOI;\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n            matchStat = END;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        return negative ? -value : value;\n    }\n```\n\n#### Long类型字段解析\n\n`Long`字段解析和`Int`一样提供3中接口，先看第一种基于字段\b类型解析：\b\n\n```java\n    public long scanLong(char expectNextChar) {\n        matchStat = UNKNOWN;\n\n        int offset = 0;\n        char chLocal = charAt(bp + (offset++));\n        final boolean quote = chLocal == '\"';\n        if (quote) {\n            /** 有引号，继续读下一个字符 */\n            chLocal = charAt(bp + (offset++));\n        }\n\n        final boolean negative = chLocal == '-';\n        if (negative) {\n            /** 有符号，标识是负数 */\n            chLocal = charAt(bp + (offset++));\n        }\n\n        long value;\n        /** 循环将字符转换成数字 */\n        if (chLocal >= '0' && chLocal <= '9') {\n            value = chLocal - '0';\n            for (;;) {\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    value = value * 10 + (chLocal - '0');\n                } else if (chLocal == '.') {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                } else {\n                    break;\n                }\n            }\n            /** 如果偏移量超过最大long的21位，是无效数字 */\n            boolean valid = value >= 0 || (value == -9223372036854775808L && negative);\n            if (!valid) {\n                String val = subString(bp, offset - 1);\n                throw new NumberFormatException(val);\n            }\n        } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            matchStat = VALUE_NULL;\n            value = 0;\n            offset += 3;\n            chLocal = charAt(bp + offset++);\n\n            if (quote && chLocal == '\"') {\n                chLocal = charAt(bp + offset++);\n            }\n\n            for (;;) {\n                if (chLocal == ',') {\n                    /** 如果是null, 紧跟着逗号，认为结束匹配 */\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.COMMA;\n                    return value;\n                } else if (chLocal == ']') {\n                    /** 如果是null, 紧跟着逗号], 认为结束匹配 */\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.RBRACKET;\n                    return value;\n                } else if (isWhitespace(chLocal)) {\n                    chLocal = charAt(bp + offset++);\n                    continue;\n                }\n                break;\n            }\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        if (quote) {\n            if (chLocal != '\"') {\n                matchStat = NOT_MATCH;\n                return 0;\n            } else {\n                chLocal = charAt(bp + (offset++));\n            }\n        }\n\n        /**\n         *  忽略和Int一致的根据期望字符判断\b逻辑\n         */\n    }\n```\n\n因为和`Int`比较相似，这里提供第三个基于字段名字匹配实现：\n\n```java\n    public long scanFieldLong(char[] fieldName) {\n        matchStat = UNKNOWN;\n\n        /**\n         *  从当前json串bp位置开始逐字符比较字段 是否匹配\n         *\n         *  fieldName 格式是 \"name\":\n         *  @see FieldInfo#genFieldNameChars()\n         */\n        if (!charArrayCompare(fieldName)) {\n            matchStat = NOT_MATCH_NAME;\n            return 0;\n        }\n\n        int offset = fieldName.length;\n        char chLocal = charAt(bp + (offset++));\n\n        boolean negative = false;\n        if (chLocal == '-') {\n            /** 有符号，标识是负数 */\n            chLocal = charAt(bp + (offset++));\n            negative = true;\n        }\n\n        long value;\n        if (chLocal >= '0' && chLocal <= '9') {\n            value = chLocal - '0';\n            for (;;) {\n                /** 循环将字符转换成数字 */\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    value = value * 10 + (chLocal - '0');\n                    /** 如果数字带标点符号，认为不是合法整数，匹配失败 */\n                } else if (chLocal == '.') {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                } else {\n                    break;\n                }\n            }\n\n            /** 如果偏移量超过最大long的21位，是无效数字 */\n            boolean valid = offset - fieldName.length < 21\n                    && (value >= 0 || (value == -9223372036854775808L && negative));\n            if (!valid) {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        if (chLocal == ',') {\n            /** 如果数字后面跟着逗号，结束 并预读下一个字符 */\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            token = JSONToken.COMMA;\n            return negative ? -value : value;\n        }\n\n        /**\n         *  忽略和Int一致的判断数字后续的token逻辑\n         */\n\n        return negative ? -value : value;\n    }\n```\n\n#### Float类型字段解析\n\n跟`Int`一致的接口，现提供第二种获取`float`实现：\n\n```java\n    public float floatValue() {\n        /** numberString获取到的不包含数字后缀类型，但是包括负数符号(如果有) */\n        String strVal = numberString();\n        float floatValue = Float.parseFloat(strVal);\n        /** 如果是0或者正无穷大，首字母是0-9 代表溢出 */\n        if (floatValue == 0 || floatValue == Float.POSITIVE_INFINITY) {\n            char c0 = strVal.charAt(0);\n            if (c0 > '0' && c0 <= '9') {\n                throw new JSONException(\"float overflow : \" + strVal);\n            }\n        }\n        return floatValue;\n    }\n```\n\n提供根据属性字段名字匹配的源码实现：\n\n```java\n    public final float scanFieldFloat(char[] fieldName) {\n        matchStat = UNKNOWN;\n\n        if (!charArrayCompare(fieldName)) {\n            matchStat = NOT_MATCH_NAME;\n            return 0;\n        }\n\n        int offset = fieldName.length;\n        char chLocal = charAt(bp + (offset++));\n\n        final boolean quote = chLocal == '\"';\n        if (quote) {\n            chLocal = charAt(bp + (offset++));\n        }\n\n        boolean negative = chLocal == '-';\n        if (negative) {\n            chLocal = charAt(bp + (offset++));\n        }\n\n        float value;\n        if (chLocal >= '0' && chLocal <= '9') {\n            int intVal = chLocal - '0';\n            for (;;) {\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    intVal = intVal * 10 + (chLocal - '0');\n                    continue;\n                } else {\n                    /** 如果遇到非数字字符终止 */\n                    break;\n                }\n            }\n\n            int power = 1;\n            boolean small = (chLocal == '.');\n            if (small) {\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    /** 将小数点后面数字转换成int类型数字 */\n                    intVal = intVal * 10 + (chLocal - '0');\n                    power = 10;\n                    for (;;) {\n                        chLocal = charAt(bp + (offset++));\n                        if (chLocal >= '0' && chLocal <= '9') {\n                            /** 依次读取数字并转化int，记录小数点的数量级 */\n                            intVal = intVal * 10 + (chLocal - '0');\n                            power *= 10;\n                            continue;\n                        } else {\n                            break;\n                        }\n                    }\n                } else {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                }\n            }\n\n            boolean exp = chLocal == 'e' || chLocal == 'E';\n            if (exp) {\n                /** 处理科学计数法 */\n                chLocal = charAt(bp + (offset++));\n                if (chLocal == '+' || chLocal == '-') {\n                    chLocal = charAt(bp + (offset++));\n                }\n                for (;;) {\n                    if (chLocal >= '0' && chLocal <= '9') {\n                        chLocal = charAt(bp + (offset++));\n                    } else {\n                        break;\n                    }\n                }\n            }\n\n            int start, count;\n            if (quote) {\n                if (chLocal != '\"') {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                } else {\n                    /** 遇到浮点数最后一个引号，预读下一个 */\n                    chLocal = charAt(bp + (offset++));\n                }\n\n                /**\n                 *  ----------------------------------------------------------------------------------------\n                 *  | { | \" | k | e | y | \" | : | \" | 7 | 0 | 0 | 8   |  .  |  5 |  5 |  5 |  5 |  \" |  }\n                 *  ----------------------------------------------------------------------------------------\n                 *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |  18\n                 *  ----------------------------------------------------------------------------------------\n                 *  |  | bp |  |   |   |   |   | |start|   |    |    |    |    |    |    |    |    | offset\n                 *  ----------------------------------------------------------------------------------------\n                 *  fieldName = \"key\":\n                 *  fieldName.length == 6, bp == 0, offset == 17\n                 *  start代表指向浮点第一个数字或者-号,\n                 *  @see com.alibaba.json.bvt.parser.deser.BooleanFieldDeserializerTest#test_2()\n                 */\n                start = bp + fieldName.length + 1;\n                count = bp + offset - start - 2;\n            } else {\n                start = bp + fieldName.length;\n                count = bp + offset - start - 1;\n            }\n\n            if (!exp && count < 20) {\n                value = ((float) intVal) / power;\n                if (negative) {\n                    value = -value;\n                }\n            } else {\n                String text = this.subString(start, count);\n                value = Float.parseFloat(text);\n            }\n        } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            matchStat = VALUE_NULL;\n            value = 0;\n            offset += 3;\n            chLocal = charAt(bp + offset++);\n\n            if (quote && chLocal == '\"') {\n                chLocal = charAt(bp + offset++);\n            }\n\n            for (;;) {\n                if (chLocal == ',') {\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.COMMA;\n                    return value;\n                } else if (chLocal == '}') {\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.RBRACE;\n                    return value;\n                } else if (isWhitespace(chLocal)) {\n                    chLocal = charAt(bp + offset++);\n                    continue;\n                }\n                break;\n            }\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        if (chLocal == ',') {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            token = JSONToken.COMMA;\n            return value;\n        }\n\n        /**\n         *  省略读取数字后，剩余token匹配逻辑\n         */\n\n        return value;\n    }\n```\n\n#### String类型字段解析\n\n```java\n    public String scanString(char expectNextChar) {\n        matchStat = UNKNOWN;\n\n        int offset = 0;\n\n        char chLocal = charAt(bp + (offset++));\n\n        /** 兼容处理null字符串 */\n        if (chLocal == 'n') {\n            if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n                offset += 3;\n                chLocal = charAt(bp + (offset++));\n            } else {\n                matchStat = NOT_MATCH;\n                return null;\n            }\n\n            if (chLocal == expectNextChar) {\n                bp += offset;\n                this.ch = this.charAt(bp);\n                matchStat = VALUE;\n                return null;\n            } else {\n                matchStat = NOT_MATCH;\n                return null;\n            }\n        }\n\n        final String strVal;\n        for (;;) {\n            if (chLocal == '\"') {\n                int startIndex = bp + offset;\n                int endIndex = indexOf('\"', startIndex);\n                if (endIndex == -1) {\n                    throw new JSONException(\"unclosed str\");\n                }\n\n                String stringVal = subString(bp + offset, endIndex - startIndex);\n                /**\n                 *  处理逻辑请参考详细注释：\n                 *  @see ##scanFieldString(char[])\n                 */\n                if (stringVal.indexOf('\\\\') != -1) {\n                    for (; ; ) {\n                        int slashCount = 0;\n                        for (int i = endIndex - 1; i >= 0; --i) {\n                            if (charAt(i) == '\\\\') {\n                                slashCount++;\n                            } else {\n                                break;\n                            }\n                        }\n                        if (slashCount % 2 == 0) {\n                            break;\n                        }\n                        endIndex = indexOf('\"', endIndex + 1);\n                    }\n\n                    int chars_len = endIndex - startIndex;\n                    char[] chars = sub_chars(bp + 1, chars_len);\n\n                    stringVal = readString(chars, chars_len);\n                }\n\n                offset += (endIndex - startIndex + 1);\n                chLocal = charAt(bp + (offset++));\n                strVal = stringVal;\n                break;\n            } else if (isWhitespace(chLocal)) {\n                chLocal = charAt(bp + (offset++));\n                continue;\n            } else {\n                matchStat = NOT_MATCH;\n\n                return stringDefaultValue();\n            }\n        }\n\n        for (;;) {\n            /** 如果遇到和期望字符认为结束符 */\n            if (chLocal == expectNextChar) {\n                bp += offset;\n                /** 预读下一个字符 */\n                this.ch = charAt(bp);\n                matchStat = VALUE;\n                return strVal;\n            } else if (isWhitespace(chLocal)) {\n                chLocal = charAt(bp + (offset++));\n                continue;\n            } else {\n                matchStat = NOT_MATCH;\n                return strVal;\n            }\n        }\n    }\n```\n\n目前已经分析足够多的此法分析代码，可以先自己分析或者参考下方更详细`scanFieldString`实现。\n\n```java\npublic abstract String stringVal();\n```\n\n这里提供的`stringVal()`需要由子类实现，原因：\n\n1. 在`android6.0`和`jdk6`版本 获取子字符串会共享外层`String`的`char[]` 会导致String占用内存无法释放（特别是打文本\b字符串）。\n\n```java\n    public String scanFieldString(char[] fieldName) {\n        matchStat = UNKNOWN;\n\n        /**\n         *  从当前json串bp位置开始逐字符比较字段 是否匹配\n         *\n         *  fieldName 格式是 \"name\":\n         *  @see FieldInfo#genFieldNameChars()\n         */\n        if (!charArrayCompare(fieldName)) {\n            matchStat = NOT_MATCH_NAME;\n            return stringDefaultValue();\n        }\n\n        // int index = bp + fieldName.length;\n\n        int offset = fieldName.length;\n        /** 读取字段下一个字符 */\n        char chLocal = charAt(bp + (offset++));\n\n        /** json 值类型字符串一定\"，否则不符合规范 */\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n\n            return stringDefaultValue();\n        }\n\n        final String strVal;\n        {\n            /** startIndex指向双引号下一个字符，\n             *  eg : \"name\":\"string\", startIndex指向s\n             */\n            int startIndex = bp + fieldName.length + 1;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            int startIndex2 = bp + fieldName.length + 1; // must re compute\n            String stringVal = subString(startIndex2, endIndex - startIndex2);\n            /** 包含特殊转译字符 */\n            if (stringVal.indexOf('\\\\') != -1) {\n                /**\n                 * 处理场景 \"value\\\\\\\"\" json串值\n                 */\n                for (;;) {\n                    int slashCount = 0;\n                    for (int i = endIndex - 1; i >= 0; --i) {\n                        if (charAt(i) == '\\\\') {\n                            slashCount++;\n                        } else {\n                            break;\n                        }\n                    }\n                    if (slashCount % 2 == 0) {\n                        break;\n                    }\n                    /** 如果遇到奇数转译字符，遇到\"不认为值结束，找下一个\"才认为结束 */\n                    endIndex = indexOf('\"', endIndex + 1);\n                }\n\n                /**\n                 *  ---------------------------------------------------------------------------------\n                 *  | \" | k | e | y | \" | : | \" | v | a | l | u |  e  |  \\ |  \\ |  \\ |  \" |  \" |\n                 *  ---------------------------------------------------------------------------------\n                 *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 |\n                 *  ---------------------------------------------------------------------------------\n                 *  | bp | |   |   |   |   |   |   |   |   |    |    |    |    |    |    | endIndex |\n                 *  ---------------------------------------------------------------------------------\n                 *  fieldName = \"key\":\n                 *  fieldName.length == 6, bp == 0, endIndex == 16\n                 *  chars_len = 16 - (0 + 6 + 1) = 9, == value\\\\\\\"\n                 */\n                int chars_len = endIndex - (bp + fieldName.length + 1);\n                char[] chars = sub_chars( bp + fieldName.length + 1, chars_len);\n\n                stringVal = readString(chars, chars_len);\n            }\n\n            /** 偏移到json串字段值\" 下一个字符 */\n            offset += (endIndex - (bp + fieldName.length + 1) + 1);\n            chLocal = charAt(bp + (offset++));\n            strVal = stringVal;\n        }\n\n        if (chLocal == ',') {\n            bp += offset;\n            /** 读取下一个字符 */\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        }\n\n        if (chLocal == '}') {\n            chLocal = charAt(bp + (offset++));\n            /** 如果字段值紧跟, 标记下次token为逗号 */\n            if (chLocal == ',') {\n                token = JSONToken.COMMA;\n                bp += offset;\n                this.ch = this.charAt(bp);\n                /** 如果字段值紧跟] 标记下次token为右中括号 */\n            } else if (chLocal == ']') {\n                token = JSONToken.RBRACKET;\n                bp += offset;\n                this.ch = this.charAt(bp);\n                /** 如果字段值紧跟} 标记下次token为右花括号 */\n            } else if (chLocal == '}') {\n                token = JSONToken.RBRACE;\n                bp += offset;\n                this.ch = this.charAt(bp);\n                /** 特殊标记结束 */\n            } else if (chLocal == EOI) {\n                token = JSONToken.EOF;\n                bp += (offset - 1);\n                ch = EOI;\n            } else {\n                matchStat = NOT_MATCH;\n                return stringDefaultValue();\n            }\n            matchStat = END;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n\n        return strVal;\n    }\n```\n\n\b目前分析的代码其实包括大部分实现了，这里没有给出`Decimal`和`Double`的实现，它们实现是类似的并且相对简单，主要是提取字符串直接用对应类的构造函数生成对象而已，如果想详细了解可以参考代码中已经添加的详尽注释。\n\n终于要结束词法分析相关`api`接口的\b分析了，这个是词法分析非常重要的基础实现，有继承这个类的两种实现`com.alibaba.fastjson.parser.JSONScanner`和`com.alibaba.fastjson.parser.JSONReaderScanner`, 这两个类继承主要增加一个优化的措施，后面讲解反序列化实现的时候会对相关重写的方法进行补充。\n","source":"_posts/Fastjson源码解析-词法和语法解析-(三)-针对对象实现解析.md","raw":"---\ntitle: 词法和语法解析（九）\nsubtitle:  这个章节主要讨论关于对象字段相关词法解析的api，同时对于极其相似的api不冗余分析，可以参考代码阅读。\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n- Fastjson源码解析\ncategories:\n- Fastjson源码解析\ndate: 2018-09-30 23:10:14\n---\n\n\n### JSON Token解析\n\n这个章节主要讨论关于对象\b字段相关词法解析的api。\n\n### JSONLexerBase成员函数\n\n\b\b这里讲解主要挑选具有代表性的api进行讲解，同时对于极其相似的api不冗余分析，可以参考代码阅读。\n\n#### Int类型字段解析\n\n当反序列化`java`对象遇到整型`int.class`字段会调用该方法解析：\n\n```java\n    public int scanInt(char expectNext) {\n        matchStat = UNKNOWN;\n\n        int offset = 0;\n        char chLocal = charAt(bp + (offset++));\n\n        /** 取整数第一个字符判断是否是引号 */\n        final boolean quote = chLocal == '\"';\n        if (quote) {\n            /** 如果是双引号，取第一个数字字符 */\n            chLocal = charAt(bp + (offset++));\n        }\n\n        final boolean negative = chLocal == '-';\n        if (negative) {\n            /** 如果是负数，继续取下一个字符 */\n            chLocal = charAt(bp + (offset++));\n        }\n\n        int value;\n        /** 是数字类型 */\n        if (chLocal >= '0' && chLocal <= '9') {\n            value = chLocal - '0';\n            for (;;) {\n                /** 循环将字符转换成数字 */\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    value = value * 10 + (chLocal - '0');\n                } else if (chLocal == '.') {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                } else {\n                    break;\n                }\n            }\n            if (value < 0) {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            /** 匹配到null */\n            matchStat = VALUE_NULL;\n            value = 0;\n            offset += 3;\n            /** 读取null后面的一个字符 */\n            chLocal = charAt(bp + offset++);\n\n            if (quote && chLocal == '\"') {\n                chLocal = charAt(bp + offset++);\n            }\n\n            for (;;) {\n                /** 如果读取null后面有逗号，认为结束 */\n                if (chLocal == ',') {\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.COMMA;\n                    return value;\n                } else if (chLocal == ']') {\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.RBRACKET;\n                    return value;\n                    /** 忽略空白字符 */\n                } else if (isWhitespace(chLocal)) {\n                    chLocal = charAt(bp + offset++);\n                    continue;\n                }\n                break;\n            }\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        for (;;) {\n            /** 根据期望字符用于结束匹配 */\n            if (chLocal == expectNext) {\n                bp += offset;\n                this.ch = this.charAt(bp);\n                matchStat = VALUE;\n                token = JSONToken.COMMA;\n                return negative ? -value : value;\n            } else {\n                /** 忽略空白字符 */\n                if (isWhitespace(chLocal)) {\n                    chLocal = charAt(bp + (offset++));\n                    continue;\n                }\n                matchStat = NOT_MATCH;\n                return negative ? -value : value;\n            }\n        }\n    }\n```\n\n`com.alibaba.fastjson.parser.JSONLexerBase#scanInt(char)`方法考虑了数字加引号的情况，当遇到下列情况认为匹配失败：\n\n1. 扫描遇到的数字遇到标点符号\n2. 扫描的数字范围溢出\n3. 扫描到的非数字并且不是null\n4. 忽略\b空白字符的情况下，读取数字后结束符和期望expectNext不一致\n\n`fastjson` 还提供第二种接口，根据token识别数字：\n\n```java\n    public final Number integerValue() throws NumberFormatException {\n        long result = 0;\n        boolean negative = false;\n        if (np == -1) {\n            np = 0;\n        }\n        /** np是token开始索引, sp是buffer索引，也代表buffer字符个数 */\n        int i = np, max = np + sp;\n        long limit;\n        long multmin;\n        int digit;\n\n        char type = ' ';\n\n        /** 探测数字类型最后一位是否带类型 */\n        switch (charAt(max - 1)) {\n            case 'L':\n                max--;\n                type = 'L';\n                break;\n            case 'S':\n                max--;\n                type = 'S';\n                break;\n            case 'B':\n                max--;\n                type = 'B';\n                break;\n            default:\n                break;\n        }\n\n        /** 探测数字首字符是否是符号 */\n        if (charAt(np) == '-') {\n            negative = true;\n            limit = Long.MIN_VALUE;\n            i++;\n        } else {\n            limit = -Long.MAX_VALUE;\n        }\n        multmin = MULTMIN_RADIX_TEN;\n        if (i < max) {\n            /** 数字第一个字母转换成数字 */\n            digit = charAt(i++) - '0';\n            result = -digit;\n        }\n\n        /** 快速处理高精度整数，因为整数最大是10^9次方 */\n        while (i < max) {\n            // Accumulating negatively avoids surprises near MAX_VALUE\n            digit = charAt(i++) - '0';\n            /** multmin 大概10^17 */\n            if (result < multmin) {\n                /** numberString获取到的不包含数字后缀类型，但是包括负数符号(如果有) */\n                return new BigInteger(numberString());\n            }\n            result *= 10;\n            if (result < limit + digit) {\n                return new BigInteger(numberString());\n            }\n            result -= digit;\n        }\n\n        if (negative) {\n            /** 处理完数字 i 是指向数字最后一个字符的下一个字符,\n             *  这里判断 i > np + 1 , 代表在 有效数字字符范围\n             */\n            if (i > np + 1) {\n                /** 这里根据类型具体后缀类型做一次转换 */\n                if (result >= Integer.MIN_VALUE && type != 'L') {\n                    if (type == 'S') {\n                        return (short) result;\n                    }\n\n                    if (type == 'B') {\n                        return (byte) result;\n                    }\n\n                    return (int) result;\n                }\n                return result;\n            } else { /* Only got \"-\" */\n                throw new NumberFormatException(numberString());\n            }\n        } else {\n            /** 这里是整数， 因为前面处理成负数，取反就可以了 */\n            result = -result;\n            /** 这里根据类型具体后缀类型做一次转换 */\n            if (result <= Integer.MAX_VALUE && type != 'L') {\n                if (type == 'S') {\n                    return (short) result;\n                }\n\n                if (type == 'B') {\n                    return (byte) result;\n                }\n\n                return (int) result;\n            }\n            return result;\n        }\n    }\n```\n\n`fastjson` 还提供第三种接口，这个接口严格根据字段名进行匹配`json`字符串，字段名会自动加上双引号和冒号，格式`\"key\":` :\n\n```java\n    public int scanFieldInt(char[] fieldName) {\n        matchStat = UNKNOWN;\n\n        /** 属性不匹配，忽略 */\n        if (!charArrayCompare(fieldName)) {\n            matchStat = NOT_MATCH_NAME;\n            return 0;\n        }\n\n        int offset = fieldName.length;\n        char chLocal = charAt(bp + (offset++));\n\n        final boolean negative = chLocal == '-';\n        if (negative) {\n            /** 如果是负数，读取第一个数字字符 */\n            chLocal = charAt(bp + (offset++));\n        }\n\n        int value;\n        if (chLocal >= '0' && chLocal <= '9') {\n            /** 转换成数字 */\n            value = chLocal - '0';\n            for (;;) {\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    value = value * 10 + (chLocal - '0');\n                } else if (chLocal == '.') {\n                    /** 数字后面有点，不符合整数，标记不匹配 */\n                    matchStat = NOT_MATCH;\n                    return 0;\n                } else {\n                    break;\n                }\n            }\n            /** value < 0 代表整数值溢出了,\n             *  11 + 3 代表了最小负数加了引号(占用2), 剩余\n             *  占用1 是因为读完最后一位数字，offset++ 递增了1\n             */\n            if (value < 0\n                    || offset > 11 + 3 + fieldName.length) {\n                if (value != Integer.MIN_VALUE\n                        || offset != 17\n                        || !negative) {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                }\n            }\n        } else {\n            /** 非数字代表不匹配 */\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        /** 如果遇到逗号，认为结束 */\n        if (chLocal == ',') {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            token = JSONToken.COMMA;\n            return negative ? -value : value;\n        }\n\n        if (chLocal == '}') {\n            chLocal = charAt(bp + (offset++));\n            if (chLocal == ',') {\n                token = JSONToken.COMMA;\n                bp += offset;\n                this.ch = this.charAt(bp);\n            } else if (chLocal == ']') {\n                token = JSONToken.RBRACKET;\n                bp += offset;\n                this.ch = this.charAt(bp);\n            } else if (chLocal == '}') {\n                token = JSONToken.RBRACE;\n                bp += offset;\n                this.ch = this.charAt(bp);\n            } else if (chLocal == EOI) {\n                token = JSONToken.EOF;\n                bp += (offset - 1);\n                ch = EOI;\n            } else {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n            matchStat = END;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        return negative ? -value : value;\n    }\n```\n\n#### Long类型字段解析\n\n`Long`字段解析和`Int`一样提供3中接口，先看第一种基于字段\b类型解析：\b\n\n```java\n    public long scanLong(char expectNextChar) {\n        matchStat = UNKNOWN;\n\n        int offset = 0;\n        char chLocal = charAt(bp + (offset++));\n        final boolean quote = chLocal == '\"';\n        if (quote) {\n            /** 有引号，继续读下一个字符 */\n            chLocal = charAt(bp + (offset++));\n        }\n\n        final boolean negative = chLocal == '-';\n        if (negative) {\n            /** 有符号，标识是负数 */\n            chLocal = charAt(bp + (offset++));\n        }\n\n        long value;\n        /** 循环将字符转换成数字 */\n        if (chLocal >= '0' && chLocal <= '9') {\n            value = chLocal - '0';\n            for (;;) {\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    value = value * 10 + (chLocal - '0');\n                } else if (chLocal == '.') {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                } else {\n                    break;\n                }\n            }\n            /** 如果偏移量超过最大long的21位，是无效数字 */\n            boolean valid = value >= 0 || (value == -9223372036854775808L && negative);\n            if (!valid) {\n                String val = subString(bp, offset - 1);\n                throw new NumberFormatException(val);\n            }\n        } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            matchStat = VALUE_NULL;\n            value = 0;\n            offset += 3;\n            chLocal = charAt(bp + offset++);\n\n            if (quote && chLocal == '\"') {\n                chLocal = charAt(bp + offset++);\n            }\n\n            for (;;) {\n                if (chLocal == ',') {\n                    /** 如果是null, 紧跟着逗号，认为结束匹配 */\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.COMMA;\n                    return value;\n                } else if (chLocal == ']') {\n                    /** 如果是null, 紧跟着逗号], 认为结束匹配 */\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.RBRACKET;\n                    return value;\n                } else if (isWhitespace(chLocal)) {\n                    chLocal = charAt(bp + offset++);\n                    continue;\n                }\n                break;\n            }\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        if (quote) {\n            if (chLocal != '\"') {\n                matchStat = NOT_MATCH;\n                return 0;\n            } else {\n                chLocal = charAt(bp + (offset++));\n            }\n        }\n\n        /**\n         *  忽略和Int一致的根据期望字符判断\b逻辑\n         */\n    }\n```\n\n因为和`Int`比较相似，这里提供第三个基于字段名字匹配实现：\n\n```java\n    public long scanFieldLong(char[] fieldName) {\n        matchStat = UNKNOWN;\n\n        /**\n         *  从当前json串bp位置开始逐字符比较字段 是否匹配\n         *\n         *  fieldName 格式是 \"name\":\n         *  @see FieldInfo#genFieldNameChars()\n         */\n        if (!charArrayCompare(fieldName)) {\n            matchStat = NOT_MATCH_NAME;\n            return 0;\n        }\n\n        int offset = fieldName.length;\n        char chLocal = charAt(bp + (offset++));\n\n        boolean negative = false;\n        if (chLocal == '-') {\n            /** 有符号，标识是负数 */\n            chLocal = charAt(bp + (offset++));\n            negative = true;\n        }\n\n        long value;\n        if (chLocal >= '0' && chLocal <= '9') {\n            value = chLocal - '0';\n            for (;;) {\n                /** 循环将字符转换成数字 */\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    value = value * 10 + (chLocal - '0');\n                    /** 如果数字带标点符号，认为不是合法整数，匹配失败 */\n                } else if (chLocal == '.') {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                } else {\n                    break;\n                }\n            }\n\n            /** 如果偏移量超过最大long的21位，是无效数字 */\n            boolean valid = offset - fieldName.length < 21\n                    && (value >= 0 || (value == -9223372036854775808L && negative));\n            if (!valid) {\n                matchStat = NOT_MATCH;\n                return 0;\n            }\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        if (chLocal == ',') {\n            /** 如果数字后面跟着逗号，结束 并预读下一个字符 */\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            token = JSONToken.COMMA;\n            return negative ? -value : value;\n        }\n\n        /**\n         *  忽略和Int一致的判断数字后续的token逻辑\n         */\n\n        return negative ? -value : value;\n    }\n```\n\n#### Float类型字段解析\n\n跟`Int`一致的接口，现提供第二种获取`float`实现：\n\n```java\n    public float floatValue() {\n        /** numberString获取到的不包含数字后缀类型，但是包括负数符号(如果有) */\n        String strVal = numberString();\n        float floatValue = Float.parseFloat(strVal);\n        /** 如果是0或者正无穷大，首字母是0-9 代表溢出 */\n        if (floatValue == 0 || floatValue == Float.POSITIVE_INFINITY) {\n            char c0 = strVal.charAt(0);\n            if (c0 > '0' && c0 <= '9') {\n                throw new JSONException(\"float overflow : \" + strVal);\n            }\n        }\n        return floatValue;\n    }\n```\n\n提供根据属性字段名字匹配的源码实现：\n\n```java\n    public final float scanFieldFloat(char[] fieldName) {\n        matchStat = UNKNOWN;\n\n        if (!charArrayCompare(fieldName)) {\n            matchStat = NOT_MATCH_NAME;\n            return 0;\n        }\n\n        int offset = fieldName.length;\n        char chLocal = charAt(bp + (offset++));\n\n        final boolean quote = chLocal == '\"';\n        if (quote) {\n            chLocal = charAt(bp + (offset++));\n        }\n\n        boolean negative = chLocal == '-';\n        if (negative) {\n            chLocal = charAt(bp + (offset++));\n        }\n\n        float value;\n        if (chLocal >= '0' && chLocal <= '9') {\n            int intVal = chLocal - '0';\n            for (;;) {\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    intVal = intVal * 10 + (chLocal - '0');\n                    continue;\n                } else {\n                    /** 如果遇到非数字字符终止 */\n                    break;\n                }\n            }\n\n            int power = 1;\n            boolean small = (chLocal == '.');\n            if (small) {\n                chLocal = charAt(bp + (offset++));\n                if (chLocal >= '0' && chLocal <= '9') {\n                    /** 将小数点后面数字转换成int类型数字 */\n                    intVal = intVal * 10 + (chLocal - '0');\n                    power = 10;\n                    for (;;) {\n                        chLocal = charAt(bp + (offset++));\n                        if (chLocal >= '0' && chLocal <= '9') {\n                            /** 依次读取数字并转化int，记录小数点的数量级 */\n                            intVal = intVal * 10 + (chLocal - '0');\n                            power *= 10;\n                            continue;\n                        } else {\n                            break;\n                        }\n                    }\n                } else {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                }\n            }\n\n            boolean exp = chLocal == 'e' || chLocal == 'E';\n            if (exp) {\n                /** 处理科学计数法 */\n                chLocal = charAt(bp + (offset++));\n                if (chLocal == '+' || chLocal == '-') {\n                    chLocal = charAt(bp + (offset++));\n                }\n                for (;;) {\n                    if (chLocal >= '0' && chLocal <= '9') {\n                        chLocal = charAt(bp + (offset++));\n                    } else {\n                        break;\n                    }\n                }\n            }\n\n            int start, count;\n            if (quote) {\n                if (chLocal != '\"') {\n                    matchStat = NOT_MATCH;\n                    return 0;\n                } else {\n                    /** 遇到浮点数最后一个引号，预读下一个 */\n                    chLocal = charAt(bp + (offset++));\n                }\n\n                /**\n                 *  ----------------------------------------------------------------------------------------\n                 *  | { | \" | k | e | y | \" | : | \" | 7 | 0 | 0 | 8   |  .  |  5 |  5 |  5 |  5 |  \" |  }\n                 *  ----------------------------------------------------------------------------------------\n                 *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |  18\n                 *  ----------------------------------------------------------------------------------------\n                 *  |  | bp |  |   |   |   |   | |start|   |    |    |    |    |    |    |    |    | offset\n                 *  ----------------------------------------------------------------------------------------\n                 *  fieldName = \"key\":\n                 *  fieldName.length == 6, bp == 0, offset == 17\n                 *  start代表指向浮点第一个数字或者-号,\n                 *  @see com.alibaba.json.bvt.parser.deser.BooleanFieldDeserializerTest#test_2()\n                 */\n                start = bp + fieldName.length + 1;\n                count = bp + offset - start - 2;\n            } else {\n                start = bp + fieldName.length;\n                count = bp + offset - start - 1;\n            }\n\n            if (!exp && count < 20) {\n                value = ((float) intVal) / power;\n                if (negative) {\n                    value = -value;\n                }\n            } else {\n                String text = this.subString(start, count);\n                value = Float.parseFloat(text);\n            }\n        } else if (chLocal == 'n' && charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n            matchStat = VALUE_NULL;\n            value = 0;\n            offset += 3;\n            chLocal = charAt(bp + offset++);\n\n            if (quote && chLocal == '\"') {\n                chLocal = charAt(bp + offset++);\n            }\n\n            for (;;) {\n                if (chLocal == ',') {\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.COMMA;\n                    return value;\n                } else if (chLocal == '}') {\n                    bp += offset;\n                    this.ch = charAt(bp);\n                    matchStat = VALUE_NULL;\n                    token = JSONToken.RBRACE;\n                    return value;\n                } else if (isWhitespace(chLocal)) {\n                    chLocal = charAt(bp + offset++);\n                    continue;\n                }\n                break;\n            }\n            matchStat = NOT_MATCH;\n            return 0;\n        } else {\n            matchStat = NOT_MATCH;\n            return 0;\n        }\n\n        if (chLocal == ',') {\n            bp += offset;\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            token = JSONToken.COMMA;\n            return value;\n        }\n\n        /**\n         *  省略读取数字后，剩余token匹配逻辑\n         */\n\n        return value;\n    }\n```\n\n#### String类型字段解析\n\n```java\n    public String scanString(char expectNextChar) {\n        matchStat = UNKNOWN;\n\n        int offset = 0;\n\n        char chLocal = charAt(bp + (offset++));\n\n        /** 兼容处理null字符串 */\n        if (chLocal == 'n') {\n            if (charAt(bp + offset) == 'u' && charAt(bp + offset + 1) == 'l' && charAt(bp + offset + 2) == 'l') {\n                offset += 3;\n                chLocal = charAt(bp + (offset++));\n            } else {\n                matchStat = NOT_MATCH;\n                return null;\n            }\n\n            if (chLocal == expectNextChar) {\n                bp += offset;\n                this.ch = this.charAt(bp);\n                matchStat = VALUE;\n                return null;\n            } else {\n                matchStat = NOT_MATCH;\n                return null;\n            }\n        }\n\n        final String strVal;\n        for (;;) {\n            if (chLocal == '\"') {\n                int startIndex = bp + offset;\n                int endIndex = indexOf('\"', startIndex);\n                if (endIndex == -1) {\n                    throw new JSONException(\"unclosed str\");\n                }\n\n                String stringVal = subString(bp + offset, endIndex - startIndex);\n                /**\n                 *  处理逻辑请参考详细注释：\n                 *  @see ##scanFieldString(char[])\n                 */\n                if (stringVal.indexOf('\\\\') != -1) {\n                    for (; ; ) {\n                        int slashCount = 0;\n                        for (int i = endIndex - 1; i >= 0; --i) {\n                            if (charAt(i) == '\\\\') {\n                                slashCount++;\n                            } else {\n                                break;\n                            }\n                        }\n                        if (slashCount % 2 == 0) {\n                            break;\n                        }\n                        endIndex = indexOf('\"', endIndex + 1);\n                    }\n\n                    int chars_len = endIndex - startIndex;\n                    char[] chars = sub_chars(bp + 1, chars_len);\n\n                    stringVal = readString(chars, chars_len);\n                }\n\n                offset += (endIndex - startIndex + 1);\n                chLocal = charAt(bp + (offset++));\n                strVal = stringVal;\n                break;\n            } else if (isWhitespace(chLocal)) {\n                chLocal = charAt(bp + (offset++));\n                continue;\n            } else {\n                matchStat = NOT_MATCH;\n\n                return stringDefaultValue();\n            }\n        }\n\n        for (;;) {\n            /** 如果遇到和期望字符认为结束符 */\n            if (chLocal == expectNextChar) {\n                bp += offset;\n                /** 预读下一个字符 */\n                this.ch = charAt(bp);\n                matchStat = VALUE;\n                return strVal;\n            } else if (isWhitespace(chLocal)) {\n                chLocal = charAt(bp + (offset++));\n                continue;\n            } else {\n                matchStat = NOT_MATCH;\n                return strVal;\n            }\n        }\n    }\n```\n\n目前已经分析足够多的此法分析代码，可以先自己分析或者参考下方更详细`scanFieldString`实现。\n\n```java\npublic abstract String stringVal();\n```\n\n这里提供的`stringVal()`需要由子类实现，原因：\n\n1. 在`android6.0`和`jdk6`版本 获取子字符串会共享外层`String`的`char[]` 会导致String占用内存无法释放（特别是打文本\b字符串）。\n\n```java\n    public String scanFieldString(char[] fieldName) {\n        matchStat = UNKNOWN;\n\n        /**\n         *  从当前json串bp位置开始逐字符比较字段 是否匹配\n         *\n         *  fieldName 格式是 \"name\":\n         *  @see FieldInfo#genFieldNameChars()\n         */\n        if (!charArrayCompare(fieldName)) {\n            matchStat = NOT_MATCH_NAME;\n            return stringDefaultValue();\n        }\n\n        // int index = bp + fieldName.length;\n\n        int offset = fieldName.length;\n        /** 读取字段下一个字符 */\n        char chLocal = charAt(bp + (offset++));\n\n        /** json 值类型字符串一定\"，否则不符合规范 */\n        if (chLocal != '\"') {\n            matchStat = NOT_MATCH;\n\n            return stringDefaultValue();\n        }\n\n        final String strVal;\n        {\n            /** startIndex指向双引号下一个字符，\n             *  eg : \"name\":\"string\", startIndex指向s\n             */\n            int startIndex = bp + fieldName.length + 1;\n            int endIndex = indexOf('\"', startIndex);\n            if (endIndex == -1) {\n                throw new JSONException(\"unclosed str\");\n            }\n\n            int startIndex2 = bp + fieldName.length + 1; // must re compute\n            String stringVal = subString(startIndex2, endIndex - startIndex2);\n            /** 包含特殊转译字符 */\n            if (stringVal.indexOf('\\\\') != -1) {\n                /**\n                 * 处理场景 \"value\\\\\\\"\" json串值\n                 */\n                for (;;) {\n                    int slashCount = 0;\n                    for (int i = endIndex - 1; i >= 0; --i) {\n                        if (charAt(i) == '\\\\') {\n                            slashCount++;\n                        } else {\n                            break;\n                        }\n                    }\n                    if (slashCount % 2 == 0) {\n                        break;\n                    }\n                    /** 如果遇到奇数转译字符，遇到\"不认为值结束，找下一个\"才认为结束 */\n                    endIndex = indexOf('\"', endIndex + 1);\n                }\n\n                /**\n                 *  ---------------------------------------------------------------------------------\n                 *  | \" | k | e | y | \" | : | \" | v | a | l | u |  e  |  \\ |  \\ |  \\ |  \" |  \" |\n                 *  ---------------------------------------------------------------------------------\n                 *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 |\n                 *  ---------------------------------------------------------------------------------\n                 *  | bp | |   |   |   |   |   |   |   |   |    |    |    |    |    |    | endIndex |\n                 *  ---------------------------------------------------------------------------------\n                 *  fieldName = \"key\":\n                 *  fieldName.length == 6, bp == 0, endIndex == 16\n                 *  chars_len = 16 - (0 + 6 + 1) = 9, == value\\\\\\\"\n                 */\n                int chars_len = endIndex - (bp + fieldName.length + 1);\n                char[] chars = sub_chars( bp + fieldName.length + 1, chars_len);\n\n                stringVal = readString(chars, chars_len);\n            }\n\n            /** 偏移到json串字段值\" 下一个字符 */\n            offset += (endIndex - (bp + fieldName.length + 1) + 1);\n            chLocal = charAt(bp + (offset++));\n            strVal = stringVal;\n        }\n\n        if (chLocal == ',') {\n            bp += offset;\n            /** 读取下一个字符 */\n            this.ch = this.charAt(bp);\n            matchStat = VALUE;\n            return strVal;\n        }\n\n        if (chLocal == '}') {\n            chLocal = charAt(bp + (offset++));\n            /** 如果字段值紧跟, 标记下次token为逗号 */\n            if (chLocal == ',') {\n                token = JSONToken.COMMA;\n                bp += offset;\n                this.ch = this.charAt(bp);\n                /** 如果字段值紧跟] 标记下次token为右中括号 */\n            } else if (chLocal == ']') {\n                token = JSONToken.RBRACKET;\n                bp += offset;\n                this.ch = this.charAt(bp);\n                /** 如果字段值紧跟} 标记下次token为右花括号 */\n            } else if (chLocal == '}') {\n                token = JSONToken.RBRACE;\n                bp += offset;\n                this.ch = this.charAt(bp);\n                /** 特殊标记结束 */\n            } else if (chLocal == EOI) {\n                token = JSONToken.EOF;\n                bp += (offset - 1);\n                ch = EOI;\n            } else {\n                matchStat = NOT_MATCH;\n                return stringDefaultValue();\n            }\n            matchStat = END;\n        } else {\n            matchStat = NOT_MATCH;\n            return stringDefaultValue();\n        }\n\n        return strVal;\n    }\n```\n\n\b目前分析的代码其实包括大部分实现了，这里没有给出`Decimal`和`Double`的实现，它们实现是类似的并且相对简单，主要是提取字符串直接用对应类的构造函数生成对象而已，如果想详细了解可以参考代码中已经添加的详尽注释。\n\n终于要结束词法分析相关`api`接口的\b分析了，这个是词法分析非常重要的基础实现，有继承这个类的两种实现`com.alibaba.fastjson.parser.JSONScanner`和`com.alibaba.fastjson.parser.JSONReaderScanner`, 这两个类继承主要增加一个优化的措施，后面讲解反序列化实现的时候会对相关重写的方法进行补充。\n","slug":"Fastjson源码解析-词法和语法解析-(三)-针对对象实现解析","published":1,"updated":"2018-10-12T02:15:14.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4etj0013xat8z3bq0rry","content":"<h3 id=\"JSON-Token解析\"><a href=\"#JSON-Token解析\" class=\"headerlink\" title=\"JSON Token解析\"></a>JSON Token解析</h3><p>这个章节主要讨论关于对象\b字段相关词法解析的api。</p>\n<h3 id=\"JSONLexerBase成员函数\"><a href=\"#JSONLexerBase成员函数\" class=\"headerlink\" title=\"JSONLexerBase成员函数\"></a>JSONLexerBase成员函数</h3><p>\b\b这里讲解主要挑选具有代表性的api进行讲解，同时对于极其相似的api不冗余分析，可以参考代码阅读。</p>\n<h4 id=\"Int类型字段解析\"><a href=\"#Int类型字段解析\" class=\"headerlink\" title=\"Int类型字段解析\"></a>Int类型字段解析</h4><p>当反序列化<code>java</code>对象遇到整型<code>int.class</code>字段会调用该方法解析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">scanInt</span><span class=\"params\">(<span class=\"keyword\">char</span> expectNext)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 取整数第一个字符判断是否是引号 */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> quote = chLocal == <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (quote) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是双引号，取第一个数字字符 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> negative = chLocal == <span class=\"string\">'-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是负数，继续取下一个字符 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">    <span class=\"comment\">/** 是数字类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        value = chLocal - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 循环将字符转换成数字 */</span></span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                value = value * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'n'</span> &amp;&amp; charAt(bp + offset) == <span class=\"string\">'u'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">1</span>) == <span class=\"string\">'l'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">2</span>) == <span class=\"string\">'l'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 匹配到null */</span></span><br><span class=\"line\">        matchStat = VALUE_NULL;</span><br><span class=\"line\">        value = <span class=\"number\">0</span>;</span><br><span class=\"line\">        offset += <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** 读取null后面的一个字符 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + offset++);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quote &amp;&amp; chLocal == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + offset++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果读取null后面有逗号，认为结束 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.COMMA;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.RBRACKET;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">                <span class=\"comment\">/** 忽略空白字符 */</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">                chLocal = charAt(bp + offset++);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 根据期望字符用于结束匹配 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == expectNext) &#123;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">            matchStat = VALUE;</span><br><span class=\"line\">            token = JSONToken.COMMA;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 忽略空白字符 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">                chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>com.alibaba.fastjson.parser.JSONLexerBase#scanInt(char)</code>方法考虑了数字加引号的情况，当遇到下列情况认为匹配失败：</p>\n<ol>\n<li>扫描遇到的数字遇到标点符号</li>\n<li>扫描的数字范围溢出</li>\n<li>扫描到的非数字并且不是null</li>\n<li>忽略\b空白字符的情况下，读取数字后结束符和期望expectNext不一致</li>\n</ol>\n<p><code>fastjson</code> 还提供第二种接口，根据token识别数字：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Number <span class=\"title\">integerValue</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NumberFormatException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> negative = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (np == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        np = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** np是token开始索引, sp是buffer索引，也代表buffer字符个数 */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = np, max = np + sp;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> multmin;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> digit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> type = <span class=\"string\">' '</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 探测数字类型最后一位是否带类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (charAt(max - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'L'</span>:</span><br><span class=\"line\">            max--;</span><br><span class=\"line\">            type = <span class=\"string\">'L'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'S'</span>:</span><br><span class=\"line\">            max--;</span><br><span class=\"line\">            type = <span class=\"string\">'S'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'B'</span>:</span><br><span class=\"line\">            max--;</span><br><span class=\"line\">            type = <span class=\"string\">'B'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 探测数字首字符是否是符号 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charAt(np) == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">        negative = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        limit = Long.MIN_VALUE;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        limit = -Long.MAX_VALUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    multmin = MULTMIN_RADIX_TEN;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; max) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 数字第一个字母转换成数字 */</span></span><br><span class=\"line\">        digit = charAt(i++) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        result = -digit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 快速处理高精度整数，因为整数最大是10^9次方 */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; max) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Accumulating negatively avoids surprises near MAX_VALUE</span></span><br><span class=\"line\">        digit = charAt(i++) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** multmin 大概10^17 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result &lt; multmin) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** numberString获取到的不包含数字后缀类型，但是包括负数符号(如果有) */</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(numberString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result &lt; limit + digit) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(numberString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result -= digit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 处理完数字 i 是指向数字最后一个字符的下一个字符,</span></span><br><span class=\"line\"><span class=\"comment\">         *  这里判断 i &gt; np + 1 , 代表在 有效数字字符范围</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; np + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 这里根据类型具体后缀类型做一次转换 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result &gt;= Integer.MIN_VALUE &amp;&amp; type != <span class=\"string\">'L'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (type == <span class=\"string\">'S'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (<span class=\"keyword\">short</span>) result;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (type == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (<span class=\"keyword\">byte</span>) result;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">/* Only got \"-\" */</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NumberFormatException(numberString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 这里是整数， 因为前面处理成负数，取反就可以了 */</span></span><br><span class=\"line\">        result = -result;</span><br><span class=\"line\">        <span class=\"comment\">/** 这里根据类型具体后缀类型做一次转换 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result &lt;= Integer.MAX_VALUE &amp;&amp; type != <span class=\"string\">'L'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type == <span class=\"string\">'S'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">short</span>) result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">byte</span>) result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>fastjson</code> 还提供第三种接口，这个接口严格根据字段名进行匹配<code>json</code>字符串，字段名会自动加上双引号和冒号，格式<code>&quot;key&quot;:</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">scanFieldInt</span><span class=\"params\">(<span class=\"keyword\">char</span>[] fieldName)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 属性不匹配，忽略 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = fieldName.length;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> negative = chLocal == <span class=\"string\">'-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是负数，读取第一个数字字符 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换成数字 */</span></span><br><span class=\"line\">        value = chLocal - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                value = value * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 数字后面有点，不符合整数，标记不匹配 */</span></span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** value &lt; 0 代表整数值溢出了,</span></span><br><span class=\"line\"><span class=\"comment\">         *  11 + 3 代表了最小负数加了引号(占用2), 剩余</span></span><br><span class=\"line\"><span class=\"comment\">         *  占用1 是因为读完最后一位数字，offset++ 递增了1</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                || offset &gt; <span class=\"number\">11</span> + <span class=\"number\">3</span> + fieldName.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != Integer.MIN_VALUE</span><br><span class=\"line\">                    || offset != <span class=\"number\">17</span></span><br><span class=\"line\">                    || !negative) &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 非数字代表不匹配 */</span></span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果遇到逗号，认为结束 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">        bp += offset;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        matchStat = VALUE;</span><br><span class=\"line\">        token = JSONToken.COMMA;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.COMMA;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.RBRACKET;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.RBRACE;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == EOI) &#123;</span><br><span class=\"line\">            token = JSONToken.EOF;</span><br><span class=\"line\">            bp += (offset - <span class=\"number\">1</span>);</span><br><span class=\"line\">            ch = EOI;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matchStat = END;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Long类型字段解析\"><a href=\"#Long类型字段解析\" class=\"headerlink\" title=\"Long类型字段解析\"></a>Long类型字段解析</h4><p><code>Long</code>字段解析和<code>Int</code>一样提供3中接口，先看第一种基于字段\b类型解析：\b</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">scanLong</span><span class=\"params\">(<span class=\"keyword\">char</span> expectNextChar)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> quote = chLocal == <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (quote) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 有引号，继续读下一个字符 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> negative = chLocal == <span class=\"string\">'-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 有符号，标识是负数 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">    <span class=\"comment\">/** 循环将字符转换成数字 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        value = chLocal - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                value = value * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果偏移量超过最大long的21位，是无效数字 */</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> valid = value &gt;= <span class=\"number\">0</span> || (value == -<span class=\"number\">9223372036854775808L</span> &amp;&amp; negative);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!valid) &#123;</span><br><span class=\"line\">            String val = subString(bp, offset - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NumberFormatException(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'n'</span> &amp;&amp; charAt(bp + offset) == <span class=\"string\">'u'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">1</span>) == <span class=\"string\">'l'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">2</span>) == <span class=\"string\">'l'</span>) &#123;</span><br><span class=\"line\">        matchStat = VALUE_NULL;</span><br><span class=\"line\">        value = <span class=\"number\">0</span>;</span><br><span class=\"line\">        offset += <span class=\"number\">3</span>;</span><br><span class=\"line\">        chLocal = charAt(bp + offset++);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quote &amp;&amp; chLocal == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + offset++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果是null, 紧跟着逗号，认为结束匹配 */</span></span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.COMMA;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果是null, 紧跟着逗号], 认为结束匹配 */</span></span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.RBRACKET;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">                chLocal = charAt(bp + offset++);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (quote) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal != <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  忽略和Int一致的根据期望字符判断\b逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为和<code>Int</code>比较相似，这里提供第三个基于字段名字匹配实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">scanFieldLong</span><span class=\"params\">(<span class=\"keyword\">char</span>[] fieldName)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  从当前json串bp位置开始逐字符比较字段 是否匹配</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  fieldName 格式是 \"name\":</span></span><br><span class=\"line\"><span class=\"comment\">     *  <span class=\"doctag\">@see</span> FieldInfo#genFieldNameChars()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = fieldName.length;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> negative = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 有符号，标识是负数 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        negative = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        value = chLocal - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 循环将字符转换成数字 */</span></span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                value = value * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">                <span class=\"comment\">/** 如果数字带标点符号，认为不是合法整数，匹配失败 */</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果偏移量超过最大long的21位，是无效数字 */</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> valid = offset - fieldName.length &lt; <span class=\"number\">21</span></span><br><span class=\"line\">                &amp;&amp; (value &gt;= <span class=\"number\">0</span> || (value == -<span class=\"number\">9223372036854775808L</span> &amp;&amp; negative));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!valid) &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果数字后面跟着逗号，结束 并预读下一个字符 */</span></span><br><span class=\"line\">        bp += offset;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        matchStat = VALUE;</span><br><span class=\"line\">        token = JSONToken.COMMA;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  忽略和Int一致的判断数字后续的token逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Float类型字段解析\"><a href=\"#Float类型字段解析\" class=\"headerlink\" title=\"Float类型字段解析\"></a>Float类型字段解析</h4><p>跟<code>Int</code>一致的接口，现提供第二种获取<code>float</code>实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">floatValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** numberString获取到的不包含数字后缀类型，但是包括负数符号(如果有) */</span></span><br><span class=\"line\">    String strVal = numberString();</span><br><span class=\"line\">    <span class=\"keyword\">float</span> floatValue = Float.parseFloat(strVal);</span><br><span class=\"line\">    <span class=\"comment\">/** 如果是0或者正无穷大，首字母是0-9 代表溢出 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (floatValue == <span class=\"number\">0</span> || floatValue == Float.POSITIVE_INFINITY) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c0 = strVal.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c0 &gt; <span class=\"string\">'0'</span> &amp;&amp; c0 &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"float overflow : \"</span> + strVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> floatValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>提供根据属性字段名字匹配的源码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> <span class=\"title\">scanFieldFloat</span><span class=\"params\">(<span class=\"keyword\">char</span>[] fieldName)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = fieldName.length;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> quote = chLocal == <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (quote) &#123;</span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> negative = chLocal == <span class=\"string\">'-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> intVal = chLocal - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                intVal = intVal * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果遇到非数字字符终止 */</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> power = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> small = (chLocal == <span class=\"string\">'.'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (small) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 将小数点后面数字转换成int类型数字 */</span></span><br><span class=\"line\">                intVal = intVal * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">                power = <span class=\"number\">10</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                    chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 依次读取数字并转化int，记录小数点的数量级 */</span></span><br><span class=\"line\">                        intVal = intVal * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">                        power *= <span class=\"number\">10</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> exp = chLocal == <span class=\"string\">'e'</span> || chLocal == <span class=\"string\">'E'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exp) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 处理科学计数法 */</span></span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'+'</span> || chLocal == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">                chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                    chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start, count;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quote) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal != <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遇到浮点数最后一个引号，预读下一个 */</span></span><br><span class=\"line\">                chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             *  ----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  | &#123; | \" | k | e | y | \" | : | \" | 7 | 0 | 0 | 8   |  .  |  5 |  5 |  5 |  5 |  \" |  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">             *  ----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |  18</span></span><br><span class=\"line\"><span class=\"comment\">             *  ----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  |  | bp |  |   |   |   |   | |start|   |    |    |    |    |    |    |    |    | offset</span></span><br><span class=\"line\"><span class=\"comment\">             *  ----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  fieldName = \"key\":</span></span><br><span class=\"line\"><span class=\"comment\">             *  fieldName.length == 6, bp == 0, offset == 17</span></span><br><span class=\"line\"><span class=\"comment\">             *  start代表指向浮点第一个数字或者-号,</span></span><br><span class=\"line\"><span class=\"comment\">             *  <span class=\"doctag\">@see</span> com.alibaba.json.bvt.parser.deser.BooleanFieldDeserializerTest#test_2()</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            start = bp + fieldName.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">            count = bp + offset - start - <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            start = bp + fieldName.length;</span><br><span class=\"line\">            count = bp + offset - start - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!exp &amp;&amp; count &lt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">            value = ((<span class=\"keyword\">float</span>) intVal) / power;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">                value = -value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            String text = <span class=\"keyword\">this</span>.subString(start, count);</span><br><span class=\"line\">            value = Float.parseFloat(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'n'</span> &amp;&amp; charAt(bp + offset) == <span class=\"string\">'u'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">1</span>) == <span class=\"string\">'l'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">2</span>) == <span class=\"string\">'l'</span>) &#123;</span><br><span class=\"line\">        matchStat = VALUE_NULL;</span><br><span class=\"line\">        value = <span class=\"number\">0</span>;</span><br><span class=\"line\">        offset += <span class=\"number\">3</span>;</span><br><span class=\"line\">        chLocal = charAt(bp + offset++);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quote &amp;&amp; chLocal == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + offset++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.COMMA;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.RBRACE;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">                chLocal = charAt(bp + offset++);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">        bp += offset;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        matchStat = VALUE;</span><br><span class=\"line\">        token = JSONToken.COMMA;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  省略读取数字后，剩余token匹配逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"String类型字段解析\"><a href=\"#String类型字段解析\" class=\"headerlink\" title=\"String类型字段解析\"></a>String类型字段解析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">scanString</span><span class=\"params\">(<span class=\"keyword\">char</span> expectNextChar)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 兼容处理null字符串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'n'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (charAt(bp + offset) == <span class=\"string\">'u'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">1</span>) == <span class=\"string\">'l'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">2</span>) == <span class=\"string\">'l'</span>) &#123;</span><br><span class=\"line\">            offset += <span class=\"number\">3</span>;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == expectNextChar) &#123;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">            matchStat = VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String strVal;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> startIndex = bp + offset;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> endIndex = indexOf(<span class=\"string\">'\"'</span>, startIndex);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (endIndex == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"unclosed str\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String stringVal = subString(bp + offset, endIndex - startIndex);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             *  处理逻辑请参考详细注释：</span></span><br><span class=\"line\"><span class=\"comment\">             *  <span class=\"doctag\">@see</span> ##scanFieldString(char[])</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stringVal.indexOf(<span class=\"string\">'\\\\'</span>) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> slashCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = endIndex - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (charAt(i) == <span class=\"string\">'\\\\'</span>) &#123;</span><br><span class=\"line\">                            slashCount++;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (slashCount % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    endIndex = indexOf(<span class=\"string\">'\"'</span>, endIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> chars_len = endIndex - startIndex;</span><br><span class=\"line\">                <span class=\"keyword\">char</span>[] chars = sub_chars(bp + <span class=\"number\">1</span>, chars_len);</span><br><span class=\"line\"></span><br><span class=\"line\">                stringVal = readString(chars, chars_len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            offset += (endIndex - startIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            strVal = stringVal;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> stringDefaultValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果遇到和期望字符认为结束符 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == expectNextChar) &#123;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"comment\">/** 预读下一个字符 */</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">            matchStat = VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strVal;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目前已经分析足够多的此法分析代码，可以先自己分析或者参考下方更详细<code>scanFieldString</code>实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">stringVal</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>这里提供的<code>stringVal()</code>需要由子类实现，原因：</p>\n<ol>\n<li>在<code>android6.0</code>和<code>jdk6</code>版本 获取子字符串会共享外层<code>String</code>的<code>char[]</code> 会导致String占用内存无法释放（特别是打文本\b字符串）。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">scanFieldString</span><span class=\"params\">(<span class=\"keyword\">char</span>[] fieldName)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  从当前json串bp位置开始逐字符比较字段 是否匹配</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  fieldName 格式是 \"name\":</span></span><br><span class=\"line\"><span class=\"comment\">     *  <span class=\"doctag\">@see</span> FieldInfo#genFieldNameChars()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stringDefaultValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// int index = bp + fieldName.length;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = fieldName.length;</span><br><span class=\"line\">    <span class=\"comment\">/** 读取字段下一个字符 */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** json 值类型字符串一定\"，否则不符合规范 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal != <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> stringDefaultValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String strVal;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** startIndex指向双引号下一个字符，</span></span><br><span class=\"line\"><span class=\"comment\">         *  eg : \"name\":\"string\", startIndex指向s</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex = bp + fieldName.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> endIndex = indexOf(<span class=\"string\">'\"'</span>, startIndex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (endIndex == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"unclosed str\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex2 = bp + fieldName.length + <span class=\"number\">1</span>; <span class=\"comment\">// must re compute</span></span><br><span class=\"line\">        String stringVal = subString(startIndex2, endIndex - startIndex2);</span><br><span class=\"line\">        <span class=\"comment\">/** 包含特殊转译字符 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stringVal.indexOf(<span class=\"string\">'\\\\'</span>) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 处理场景 \"value\\\\\\\"\" json串值</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> slashCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = endIndex - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (charAt(i) == <span class=\"string\">'\\\\'</span>) &#123;</span><br><span class=\"line\">                        slashCount++;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (slashCount % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果遇到奇数转译字符，遇到\"不认为值结束，找下一个\"才认为结束 */</span></span><br><span class=\"line\">                endIndex = indexOf(<span class=\"string\">'\"'</span>, endIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             *  ---------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  | \" | k | e | y | \" | : | \" | v | a | l | u |  e  |  \\ |  \\ |  \\ |  \" |  \" |</span></span><br><span class=\"line\"><span class=\"comment\">             *  ---------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 |</span></span><br><span class=\"line\"><span class=\"comment\">             *  ---------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  | bp | |   |   |   |   |   |   |   |   |    |    |    |    |    |    | endIndex |</span></span><br><span class=\"line\"><span class=\"comment\">             *  ---------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  fieldName = \"key\":</span></span><br><span class=\"line\"><span class=\"comment\">             *  fieldName.length == 6, bp == 0, endIndex == 16</span></span><br><span class=\"line\"><span class=\"comment\">             *  chars_len = 16 - (0 + 6 + 1) = 9, == value\\\\\\\"</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> chars_len = endIndex - (bp + fieldName.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] chars = sub_chars( bp + fieldName.length + <span class=\"number\">1</span>, chars_len);</span><br><span class=\"line\"></span><br><span class=\"line\">            stringVal = readString(chars, chars_len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 偏移到json串字段值\" 下一个字符 */</span></span><br><span class=\"line\">        offset += (endIndex - (bp + fieldName.length + <span class=\"number\">1</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        strVal = stringVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">        bp += offset;</span><br><span class=\"line\">        <span class=\"comment\">/** 读取下一个字符 */</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        matchStat = VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        <span class=\"comment\">/** 如果字段值紧跟, 标记下次token为逗号 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.COMMA;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">            <span class=\"comment\">/** 如果字段值紧跟] 标记下次token为右中括号 */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.RBRACKET;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">            <span class=\"comment\">/** 如果字段值紧跟&#125; 标记下次token为右花括号 */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.RBRACE;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">            <span class=\"comment\">/** 特殊标记结束 */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == EOI) &#123;</span><br><span class=\"line\">            token = JSONToken.EOF;</span><br><span class=\"line\">            bp += (offset - <span class=\"number\">1</span>);</span><br><span class=\"line\">            ch = EOI;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> stringDefaultValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matchStat = END;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stringDefaultValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> strVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b目前分析的代码其实包括大部分实现了，这里没有给出<code>Decimal</code>和<code>Double</code>的实现，它们实现是类似的并且相对简单，主要是提取字符串直接用对应类的构造函数生成对象而已，如果想详细了解可以参考代码中已经添加的详尽注释。</p>\n<p>终于要结束词法分析相关<code>api</code>接口的\b分析了，这个是词法分析非常重要的基础实现，有继承这个类的两种实现<code>com.alibaba.fastjson.parser.JSONScanner</code>和<code>com.alibaba.fastjson.parser.JSONReaderScanner</code>, 这两个类继承主要增加一个优化的措施，后面讲解反序列化实现的时候会对相关重写的方法进行补充。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h3 id=\"JSON-Token解析\"><a href=\"#JSON-Token解析\" class=\"headerlink\" title=\"JSON Token解析\"></a>JSON Token解析</h3><p>这个章节主要讨论关于对象\b字段相关词法解析的api。</p>\n<h3 id=\"JSONLexerBase成员函数\"><a href=\"#JSONLexerBase成员函数\" class=\"headerlink\" title=\"JSONLexerBase成员函数\"></a>JSONLexerBase成员函数</h3><p>\b\b这里讲解主要挑选具有代表性的api进行讲解，同时对于极其相似的api不冗余分析，可以参考代码阅读。</p>\n<h4 id=\"Int类型字段解析\"><a href=\"#Int类型字段解析\" class=\"headerlink\" title=\"Int类型字段解析\"></a>Int类型字段解析</h4><p>当反序列化<code>java</code>对象遇到整型<code>int.class</code>字段会调用该方法解析：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">scanInt</span><span class=\"params\">(<span class=\"keyword\">char</span> expectNext)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 取整数第一个字符判断是否是引号 */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> quote = chLocal == <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (quote) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是双引号，取第一个数字字符 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> negative = chLocal == <span class=\"string\">'-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是负数，继续取下一个字符 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">    <span class=\"comment\">/** 是数字类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        value = chLocal - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 循环将字符转换成数字 */</span></span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                value = value * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'n'</span> &amp;&amp; charAt(bp + offset) == <span class=\"string\">'u'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">1</span>) == <span class=\"string\">'l'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">2</span>) == <span class=\"string\">'l'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 匹配到null */</span></span><br><span class=\"line\">        matchStat = VALUE_NULL;</span><br><span class=\"line\">        value = <span class=\"number\">0</span>;</span><br><span class=\"line\">        offset += <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** 读取null后面的一个字符 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + offset++);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quote &amp;&amp; chLocal == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + offset++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 如果读取null后面有逗号，认为结束 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.COMMA;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.RBRACKET;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">                <span class=\"comment\">/** 忽略空白字符 */</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">                chLocal = charAt(bp + offset++);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 根据期望字符用于结束匹配 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == expectNext) &#123;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">            matchStat = VALUE;</span><br><span class=\"line\">            token = JSONToken.COMMA;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 忽略空白字符 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">                chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>com.alibaba.fastjson.parser.JSONLexerBase#scanInt(char)</code>方法考虑了数字加引号的情况，当遇到下列情况认为匹配失败：</p>\n<ol>\n<li>扫描遇到的数字遇到标点符号</li>\n<li>扫描的数字范围溢出</li>\n<li>扫描到的非数字并且不是null</li>\n<li>忽略\b空白字符的情况下，读取数字后结束符和期望expectNext不一致</li>\n</ol>\n<p><code>fastjson</code> 还提供第二种接口，根据token识别数字：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Number <span class=\"title\">integerValue</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> NumberFormatException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> negative = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (np == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        np = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** np是token开始索引, sp是buffer索引，也代表buffer字符个数 */</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = np, max = np + sp;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> limit;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> multmin;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> digit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> type = <span class=\"string\">' '</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 探测数字类型最后一位是否带类型 */</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (charAt(max - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'L'</span>:</span><br><span class=\"line\">            max--;</span><br><span class=\"line\">            type = <span class=\"string\">'L'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'S'</span>:</span><br><span class=\"line\">            max--;</span><br><span class=\"line\">            type = <span class=\"string\">'S'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'B'</span>:</span><br><span class=\"line\">            max--;</span><br><span class=\"line\">            type = <span class=\"string\">'B'</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 探测数字首字符是否是符号 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (charAt(np) == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">        negative = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        limit = Long.MIN_VALUE;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        limit = -Long.MAX_VALUE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    multmin = MULTMIN_RADIX_TEN;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; max) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 数字第一个字母转换成数字 */</span></span><br><span class=\"line\">        digit = charAt(i++) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        result = -digit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 快速处理高精度整数，因为整数最大是10^9次方 */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; max) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Accumulating negatively avoids surprises near MAX_VALUE</span></span><br><span class=\"line\">        digit = charAt(i++) - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** multmin 大概10^17 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result &lt; multmin) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** numberString获取到的不包含数字后缀类型，但是包括负数符号(如果有) */</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(numberString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result &lt; limit + digit) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> BigInteger(numberString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result -= digit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 处理完数字 i 是指向数字最后一个字符的下一个字符,</span></span><br><span class=\"line\"><span class=\"comment\">         *  这里判断 i &gt; np + 1 , 代表在 有效数字字符范围</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; np + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 这里根据类型具体后缀类型做一次转换 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result &gt;= Integer.MIN_VALUE &amp;&amp; type != <span class=\"string\">'L'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (type == <span class=\"string\">'S'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (<span class=\"keyword\">short</span>) result;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (type == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (<span class=\"keyword\">byte</span>) result;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">/* Only got \"-\" */</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NumberFormatException(numberString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 这里是整数， 因为前面处理成负数，取反就可以了 */</span></span><br><span class=\"line\">        result = -result;</span><br><span class=\"line\">        <span class=\"comment\">/** 这里根据类型具体后缀类型做一次转换 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result &lt;= Integer.MAX_VALUE &amp;&amp; type != <span class=\"string\">'L'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type == <span class=\"string\">'S'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">short</span>) result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (type == <span class=\"string\">'B'</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"keyword\">byte</span>) result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>fastjson</code> 还提供第三种接口，这个接口严格根据字段名进行匹配<code>json</code>字符串，字段名会自动加上双引号和冒号，格式<code>&quot;key&quot;:</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">scanFieldInt</span><span class=\"params\">(<span class=\"keyword\">char</span>[] fieldName)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 属性不匹配，忽略 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = fieldName.length;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> negative = chLocal == <span class=\"string\">'-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果是负数，读取第一个数字字符 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 转换成数字 */</span></span><br><span class=\"line\">        value = chLocal - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                value = value * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 数字后面有点，不符合整数，标记不匹配 */</span></span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** value &lt; 0 代表整数值溢出了,</span></span><br><span class=\"line\"><span class=\"comment\">         *  11 + 3 代表了最小负数加了引号(占用2), 剩余</span></span><br><span class=\"line\"><span class=\"comment\">         *  占用1 是因为读完最后一位数字，offset++ 递增了1</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span></span><br><span class=\"line\">                || offset &gt; <span class=\"number\">11</span> + <span class=\"number\">3</span> + fieldName.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value != Integer.MIN_VALUE</span><br><span class=\"line\">                    || offset != <span class=\"number\">17</span></span><br><span class=\"line\">                    || !negative) &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 非数字代表不匹配 */</span></span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果遇到逗号，认为结束 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">        bp += offset;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        matchStat = VALUE;</span><br><span class=\"line\">        token = JSONToken.COMMA;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.COMMA;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.RBRACKET;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.RBRACE;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == EOI) &#123;</span><br><span class=\"line\">            token = JSONToken.EOF;</span><br><span class=\"line\">            bp += (offset - <span class=\"number\">1</span>);</span><br><span class=\"line\">            ch = EOI;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matchStat = END;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Long类型字段解析\"><a href=\"#Long类型字段解析\" class=\"headerlink\" title=\"Long类型字段解析\"></a>Long类型字段解析</h4><p><code>Long</code>字段解析和<code>Int</code>一样提供3中接口，先看第一种基于字段\b类型解析：\b</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">scanLong</span><span class=\"params\">(<span class=\"keyword\">char</span> expectNextChar)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> quote = chLocal == <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (quote) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 有引号，继续读下一个字符 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> negative = chLocal == <span class=\"string\">'-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 有符号，标识是负数 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">    <span class=\"comment\">/** 循环将字符转换成数字 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        value = chLocal - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                value = value * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果偏移量超过最大long的21位，是无效数字 */</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> valid = value &gt;= <span class=\"number\">0</span> || (value == -<span class=\"number\">9223372036854775808L</span> &amp;&amp; negative);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!valid) &#123;</span><br><span class=\"line\">            String val = subString(bp, offset - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NumberFormatException(val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'n'</span> &amp;&amp; charAt(bp + offset) == <span class=\"string\">'u'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">1</span>) == <span class=\"string\">'l'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">2</span>) == <span class=\"string\">'l'</span>) &#123;</span><br><span class=\"line\">        matchStat = VALUE_NULL;</span><br><span class=\"line\">        value = <span class=\"number\">0</span>;</span><br><span class=\"line\">        offset += <span class=\"number\">3</span>;</span><br><span class=\"line\">        chLocal = charAt(bp + offset++);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quote &amp;&amp; chLocal == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + offset++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果是null, 紧跟着逗号，认为结束匹配 */</span></span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.COMMA;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果是null, 紧跟着逗号], 认为结束匹配 */</span></span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.RBRACKET;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">                chLocal = charAt(bp + offset++);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (quote) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal != <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  忽略和Int一致的根据期望字符判断\b逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为和<code>Int</code>比较相似，这里提供第三个基于字段名字匹配实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">scanFieldLong</span><span class=\"params\">(<span class=\"keyword\">char</span>[] fieldName)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  从当前json串bp位置开始逐字符比较字段 是否匹配</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  fieldName 格式是 \"name\":</span></span><br><span class=\"line\"><span class=\"comment\">     *  <span class=\"doctag\">@see</span> FieldInfo#genFieldNameChars()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = fieldName.length;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> negative = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 有符号，标识是负数 */</span></span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        negative = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">long</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        value = chLocal - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 循环将字符转换成数字 */</span></span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                value = value * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">                <span class=\"comment\">/** 如果数字带标点符号，认为不是合法整数，匹配失败 */</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'.'</span>) &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 如果偏移量超过最大long的21位，是无效数字 */</span></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> valid = offset - fieldName.length &lt; <span class=\"number\">21</span></span><br><span class=\"line\">                &amp;&amp; (value &gt;= <span class=\"number\">0</span> || (value == -<span class=\"number\">9223372036854775808L</span> &amp;&amp; negative));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!valid) &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果数字后面跟着逗号，结束 并预读下一个字符 */</span></span><br><span class=\"line\">        bp += offset;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        matchStat = VALUE;</span><br><span class=\"line\">        token = JSONToken.COMMA;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  忽略和Int一致的判断数字后续的token逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> negative ? -value : value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Float类型字段解析\"><a href=\"#Float类型字段解析\" class=\"headerlink\" title=\"Float类型字段解析\"></a>Float类型字段解析</h4><p>跟<code>Int</code>一致的接口，现提供第二种获取<code>float</code>实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">float</span> <span class=\"title\">floatValue</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** numberString获取到的不包含数字后缀类型，但是包括负数符号(如果有) */</span></span><br><span class=\"line\">    String strVal = numberString();</span><br><span class=\"line\">    <span class=\"keyword\">float</span> floatValue = Float.parseFloat(strVal);</span><br><span class=\"line\">    <span class=\"comment\">/** 如果是0或者正无穷大，首字母是0-9 代表溢出 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (floatValue == <span class=\"number\">0</span> || floatValue == Float.POSITIVE_INFINITY) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> c0 = strVal.charAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c0 &gt; <span class=\"string\">'0'</span> &amp;&amp; c0 &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"float overflow : \"</span> + strVal);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> floatValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>提供根据属性字段名字匹配的源码实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">float</span> <span class=\"title\">scanFieldFloat</span><span class=\"params\">(<span class=\"keyword\">char</span>[] fieldName)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = fieldName.length;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> quote = chLocal == <span class=\"string\">'\"'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (quote) &#123;</span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> negative = chLocal == <span class=\"string\">'-'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">float</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> intVal = chLocal - <span class=\"string\">'0'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                intVal = intVal * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果遇到非数字字符终止 */</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> power = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> small = (chLocal == <span class=\"string\">'.'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (small) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 将小数点后面数字转换成int类型数字 */</span></span><br><span class=\"line\">                intVal = intVal * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">                power = <span class=\"number\">10</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                    chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 依次读取数字并转化int，记录小数点的数量级 */</span></span><br><span class=\"line\">                        intVal = intVal * <span class=\"number\">10</span> + (chLocal - <span class=\"string\">'0'</span>);</span><br><span class=\"line\">                        power *= <span class=\"number\">10</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> exp = chLocal == <span class=\"string\">'e'</span> || chLocal == <span class=\"string\">'E'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (exp) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 处理科学计数法 */</span></span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'+'</span> || chLocal == <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">                chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (chLocal &gt;= <span class=\"string\">'0'</span> &amp;&amp; chLocal &lt;= <span class=\"string\">'9'</span>) &#123;</span><br><span class=\"line\">                    chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> start, count;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quote) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal != <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">                matchStat = NOT_MATCH;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遇到浮点数最后一个引号，预读下一个 */</span></span><br><span class=\"line\">                chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             *  ----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  | &#123; | \" | k | e | y | \" | : | \" | 7 | 0 | 0 | 8   |  .  |  5 |  5 |  5 |  5 |  \" |  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">             *  ----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |  18</span></span><br><span class=\"line\"><span class=\"comment\">             *  ----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  |  | bp |  |   |   |   |   | |start|   |    |    |    |    |    |    |    |    | offset</span></span><br><span class=\"line\"><span class=\"comment\">             *  ----------------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  fieldName = \"key\":</span></span><br><span class=\"line\"><span class=\"comment\">             *  fieldName.length == 6, bp == 0, offset == 17</span></span><br><span class=\"line\"><span class=\"comment\">             *  start代表指向浮点第一个数字或者-号,</span></span><br><span class=\"line\"><span class=\"comment\">             *  <span class=\"doctag\">@see</span> com.alibaba.json.bvt.parser.deser.BooleanFieldDeserializerTest#test_2()</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            start = bp + fieldName.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">            count = bp + offset - start - <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            start = bp + fieldName.length;</span><br><span class=\"line\">            count = bp + offset - start - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!exp &amp;&amp; count &lt; <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">            value = ((<span class=\"keyword\">float</span>) intVal) / power;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (negative) &#123;</span><br><span class=\"line\">                value = -value;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            String text = <span class=\"keyword\">this</span>.subString(start, count);</span><br><span class=\"line\">            value = Float.parseFloat(text);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'n'</span> &amp;&amp; charAt(bp + offset) == <span class=\"string\">'u'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">1</span>) == <span class=\"string\">'l'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">2</span>) == <span class=\"string\">'l'</span>) &#123;</span><br><span class=\"line\">        matchStat = VALUE_NULL;</span><br><span class=\"line\">        value = <span class=\"number\">0</span>;</span><br><span class=\"line\">        offset += <span class=\"number\">3</span>;</span><br><span class=\"line\">        chLocal = charAt(bp + offset++);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (quote &amp;&amp; chLocal == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + offset++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.COMMA;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">                bp += offset;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">                matchStat = VALUE_NULL;</span><br><span class=\"line\">                token = JSONToken.RBRACE;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">                chLocal = charAt(bp + offset++);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">        bp += offset;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        matchStat = VALUE;</span><br><span class=\"line\">        token = JSONToken.COMMA;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  省略读取数字后，剩余token匹配逻辑</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"String类型字段解析\"><a href=\"#String类型字段解析\" class=\"headerlink\" title=\"String类型字段解析\"></a>String类型字段解析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">scanString</span><span class=\"params\">(<span class=\"keyword\">char</span> expectNextChar)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 兼容处理null字符串 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'n'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (charAt(bp + offset) == <span class=\"string\">'u'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">1</span>) == <span class=\"string\">'l'</span> &amp;&amp; charAt(bp + offset + <span class=\"number\">2</span>) == <span class=\"string\">'l'</span>) &#123;</span><br><span class=\"line\">            offset += <span class=\"number\">3</span>;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == expectNextChar) &#123;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">            matchStat = VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String strVal;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> startIndex = bp + offset;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> endIndex = indexOf(<span class=\"string\">'\"'</span>, startIndex);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (endIndex == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"unclosed str\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String stringVal = subString(bp + offset, endIndex - startIndex);</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             *  处理逻辑请参考详细注释：</span></span><br><span class=\"line\"><span class=\"comment\">             *  <span class=\"doctag\">@see</span> ##scanFieldString(char[])</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (stringVal.indexOf(<span class=\"string\">'\\\\'</span>) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> slashCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = endIndex - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (charAt(i) == <span class=\"string\">'\\\\'</span>) &#123;</span><br><span class=\"line\">                            slashCount++;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (slashCount % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    endIndex = indexOf(<span class=\"string\">'\"'</span>, endIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> chars_len = endIndex - startIndex;</span><br><span class=\"line\">                <span class=\"keyword\">char</span>[] chars = sub_chars(bp + <span class=\"number\">1</span>, chars_len);</span><br><span class=\"line\"></span><br><span class=\"line\">                stringVal = readString(chars, chars_len);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            offset += (endIndex - startIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            strVal = stringVal;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> stringDefaultValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果遇到和期望字符认为结束符 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == expectNextChar) &#123;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"comment\">/** 预读下一个字符 */</span></span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = charAt(bp);</span><br><span class=\"line\">            matchStat = VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strVal;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isWhitespace(chLocal)) &#123;</span><br><span class=\"line\">            chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> strVal;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>目前已经分析足够多的此法分析代码，可以先自己分析或者参考下方更详细<code>scanFieldString</code>实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> String <span class=\"title\">stringVal</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>这里提供的<code>stringVal()</code>需要由子类实现，原因：</p>\n<ol>\n<li>在<code>android6.0</code>和<code>jdk6</code>版本 获取子字符串会共享外层<code>String</code>的<code>char[]</code> 会导致String占用内存无法释放（特别是打文本\b字符串）。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">scanFieldString</span><span class=\"params\">(<span class=\"keyword\">char</span>[] fieldName)</span> </span>&#123;</span><br><span class=\"line\">    matchStat = UNKNOWN;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  从当前json串bp位置开始逐字符比较字段 是否匹配</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  fieldName 格式是 \"name\":</span></span><br><span class=\"line\"><span class=\"comment\">     *  <span class=\"doctag\">@see</span> FieldInfo#genFieldNameChars()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!charArrayCompare(fieldName)) &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH_NAME;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stringDefaultValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// int index = bp + fieldName.length;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> offset = fieldName.length;</span><br><span class=\"line\">    <span class=\"comment\">/** 读取字段下一个字符 */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> chLocal = charAt(bp + (offset++));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** json 值类型字符串一定\"，否则不符合规范 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal != <span class=\"string\">'\"'</span>) &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> stringDefaultValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> String strVal;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** startIndex指向双引号下一个字符，</span></span><br><span class=\"line\"><span class=\"comment\">         *  eg : \"name\":\"string\", startIndex指向s</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex = bp + fieldName.length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> endIndex = indexOf(<span class=\"string\">'\"'</span>, startIndex);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (endIndex == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"unclosed str\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> startIndex2 = bp + fieldName.length + <span class=\"number\">1</span>; <span class=\"comment\">// must re compute</span></span><br><span class=\"line\">        String stringVal = subString(startIndex2, endIndex - startIndex2);</span><br><span class=\"line\">        <span class=\"comment\">/** 包含特殊转译字符 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stringVal.indexOf(<span class=\"string\">'\\\\'</span>) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * 处理场景 \"value\\\\\\\"\" json串值</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> slashCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = endIndex - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (charAt(i) == <span class=\"string\">'\\\\'</span>) &#123;</span><br><span class=\"line\">                        slashCount++;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (slashCount % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果遇到奇数转译字符，遇到\"不认为值结束，找下一个\"才认为结束 */</span></span><br><span class=\"line\">                endIndex = indexOf(<span class=\"string\">'\"'</span>, endIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             *  ---------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  | \" | k | e | y | \" | : | \" | v | a | l | u |  e  |  \\ |  \\ |  \\ |  \" |  \" |</span></span><br><span class=\"line\"><span class=\"comment\">             *  ---------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 |</span></span><br><span class=\"line\"><span class=\"comment\">             *  ---------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  | bp | |   |   |   |   |   |   |   |   |    |    |    |    |    |    | endIndex |</span></span><br><span class=\"line\"><span class=\"comment\">             *  ---------------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">             *  fieldName = \"key\":</span></span><br><span class=\"line\"><span class=\"comment\">             *  fieldName.length == 6, bp == 0, endIndex == 16</span></span><br><span class=\"line\"><span class=\"comment\">             *  chars_len = 16 - (0 + 6 + 1) = 9, == value\\\\\\\"</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> chars_len = endIndex - (bp + fieldName.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">char</span>[] chars = sub_chars( bp + fieldName.length + <span class=\"number\">1</span>, chars_len);</span><br><span class=\"line\"></span><br><span class=\"line\">            stringVal = readString(chars, chars_len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 偏移到json串字段值\" 下一个字符 */</span></span><br><span class=\"line\">        offset += (endIndex - (bp + fieldName.length + <span class=\"number\">1</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        strVal = stringVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">        bp += offset;</span><br><span class=\"line\">        <span class=\"comment\">/** 读取下一个字符 */</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">        matchStat = VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> strVal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">        chLocal = charAt(bp + (offset++));</span><br><span class=\"line\">        <span class=\"comment\">/** 如果字段值紧跟, 标记下次token为逗号 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">','</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.COMMA;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">            <span class=\"comment\">/** 如果字段值紧跟] 标记下次token为右中括号 */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">']'</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.RBRACKET;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">            <span class=\"comment\">/** 如果字段值紧跟&#125; 标记下次token为右花括号 */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == <span class=\"string\">'&#125;'</span>) &#123;</span><br><span class=\"line\">            token = JSONToken.RBRACE;</span><br><span class=\"line\">            bp += offset;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.ch = <span class=\"keyword\">this</span>.charAt(bp);</span><br><span class=\"line\">            <span class=\"comment\">/** 特殊标记结束 */</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (chLocal == EOI) &#123;</span><br><span class=\"line\">            token = JSONToken.EOF;</span><br><span class=\"line\">            bp += (offset - <span class=\"number\">1</span>);</span><br><span class=\"line\">            ch = EOI;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matchStat = NOT_MATCH;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> stringDefaultValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        matchStat = END;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        matchStat = NOT_MATCH;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stringDefaultValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> strVal;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b目前分析的代码其实包括大部分实现了，这里没有给出<code>Decimal</code>和<code>Double</code>的实现，它们实现是类似的并且相对简单，主要是提取字符串直接用对应类的构造函数生成对象而已，如果想详细了解可以参考代码中已经添加的详尽注释。</p>\n<p>终于要结束词法分析相关<code>api</code>接口的\b分析了，这个是词法分析非常重要的基础实现，有继承这个类的两种实现<code>com.alibaba.fastjson.parser.JSONScanner</code>和<code>com.alibaba.fastjson.parser.JSONReaderScanner</code>, 这两个类继承主要增加一个优化的措施，后面讲解反序列化实现的时候会对相关重写的方法进行补充。</p>\n"},{"title":"序列化（六）","subtitle":"序列化回调接口实现分析，主要对内部常用的序列化实现，比如MapSerializer序列化等。","cover":"/images/fastjson.jpg","author":{"nick":"诣极","link":"https://github.com/zonghaishang"},"date":"2018-09-30T15:08:14.000Z","_content":"## 序列化回调接口实现分析\n\n### 特定序列化实现解析\n\n### MapSerializer序列化\n\n\b按照代码的顺序第一个分析到Map序列化器，内部调用write：\n\n```java\n    public void write(JSONSerializer serializer\n            , Object object\n            , Object fieldName\n            , Type fieldType\n            , int features) throws IOException {\n        write(serializer, object, fieldName, fieldType, features, false);\n    }\n```\n\n进入`MapSerializer#write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int, boolean)`方法:\n\n```java\n    public void write(JSONSerializer serializer\n            , Object object\n            , Object fieldName\n            , Type fieldType\n            , int features \n            , boolean unwrapped) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        if (object == null) {\n            /** 如果map是null, 输出 \"null\" 字符串 */\n            out.writeNull();\n            return;\n        }\n\n        Map<?, ?> map = (Map<?, ?>) object;\n        final int mapSortFieldMask = SerializerFeature.MapSortField.mask;\n        if ((out.features & mapSortFieldMask) != 0 || (features & mapSortFieldMask) != 0) {\n            /** JSONObject包装HashMap或者LinkedHashMap */\n            if (map instanceof JSONObject) {\n                map = ((JSONObject) map).getInnerMap();\n            }\n\n            if ((!(map instanceof SortedMap)) && !(map instanceof LinkedHashMap)) {\n                try {\n                    map = new TreeMap(map);\n                } catch (Exception ex) {\n                    // skip\n                }\n            }\n        }\n\n        if (serializer.containsReference(object)) {\n            /** 处理对象引用，下文详细分析 */\n            serializer.writeReference(object);\n            return;\n        }\n\n        SerialContext parent = serializer.context;\n        /** 创建当前新的序列化context */\n        serializer.setContext(parent, object, fieldName, 0);\n        try {\n            if (!unwrapped) {\n                out.write('{');\n            }\n\n            serializer.incrementIndent();\n\n            Class<?> preClazz = null;\n            ObjectSerializer preWriter = null;\n\n            boolean first = true;\n\n            if (out.isEnabled(SerializerFeature.WriteClassName)) {\n                String typeKey = serializer.config.typeKey;\n                Class<?> mapClass = map.getClass();\n                boolean containsKey = (mapClass == JSONObject.class || mapClass == HashMap.class || mapClass == LinkedHashMap.class) \n                        && map.containsKey(typeKey);\n                /** 序列化的map不包含key=@type或者自定义值，则输出map的类名 */\n                if (!containsKey) {\n                    out.writeFieldName(typeKey);\n                    out.writeString(object.getClass().getName());\n                    first = false;\n                }\n            }\n\n            for (Map.Entry entry : map.entrySet()) {\n                Object value = entry.getValue();\n\n                Object entryKey = entry.getKey();\n\n                {\n                    /** 遍历JSONSerializer的PropertyPreFilter拦截器，拦截key是否输出 */\n                    List<PropertyPreFilter> preFilters = serializer.propertyPreFilters;\n                    if (preFilters != null && preFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            if (!this.applyName(serializer, object, (String) entryKey)) {\n                                continue;\n                            }\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            if (!this.applyName(serializer, object, strKey)) {\n                                continue;\n                            }\n                        }\n                    }\n                }\n                {\n                    /** 遍历PropertyPreFilter拦截器，拦截key是否输出 */\n                    List<PropertyPreFilter> preFilters = this.propertyPreFilters;\n                    if (preFilters != null && preFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            if (!this.applyName(serializer, object, (String) entryKey)) {\n                                continue;\n                            }\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            if (!this.applyName(serializer, object, strKey)) {\n                                continue;\n                            }\n                        }\n                    }\n                }\n\n                {\n                    /** 遍历JSONSerializer的PropertyFilter拦截器，拦截key是否输出 */\n                    List<PropertyFilter> propertyFilters = serializer.propertyFilters;\n                    if (propertyFilters != null && propertyFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            if (!this.apply(serializer, object, (String) entryKey, value)) {\n                                continue;\n                            }\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            if (!this.apply(serializer, object, strKey, value)) {\n                                continue;\n                            }\n                        }\n                    }\n                }\n                {\n                    /** 遍历PropertyFilter拦截器，拦截key是否输出 */\n                    List<PropertyFilter> propertyFilters = this.propertyFilters;\n                    if (propertyFilters != null && propertyFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            if (!this.apply(serializer, object, (String) entryKey, value)) {\n                                continue;\n                            }\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            if (!this.apply(serializer, object, strKey, value)) {\n                                continue;\n                            }\n                        }\n                    }\n                }\n\n                {\n                    /** 遍历JSONSerializer的NameFilter拦截器，适用于key字符别名串转换 */\n                    List<NameFilter> nameFilters = serializer.nameFilters;\n                    if (nameFilters != null && nameFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            entryKey = this.processKey(serializer, object, (String) entryKey, value);\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            entryKey = this.processKey(serializer, object, strKey, value);\n                        }\n                    }\n                }\n                {\n                    /** 遍历NameFilter拦截器，适用于key字符串别名转换 */\n                    List<NameFilter> nameFilters = this.nameFilters;\n                    if (nameFilters != null && nameFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            entryKey = this.processKey(serializer, object, (String) entryKey, value);\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            entryKey = this.processKey(serializer, object, strKey, value);\n                        }\n                    }\n                }\n\n                {\n                    /** 处理map序列化value拦截器, ValueFilter 和 ContextValueFilter */\n                    if (entryKey == null || entryKey instanceof String) {\n                        value = this.processValue(serializer, null, object, (String) entryKey, value);\n                    } else {\n                        boolean objectOrArray = entryKey instanceof Map || entryKey instanceof Collection;\n                        if (!objectOrArray) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            value = this.processValue(serializer, null, object, strKey, value);\n                        }\n                    }\n                }\n\n                if (value == null) {\n                    /** 如果开启map为Null，不输出 */\n                    if (!out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) {\n                        continue;\n                    }\n                }\n\n                if (entryKey instanceof String) {\n                    String key = (String) entryKey;\n\n                    /** 如果不是第一个属性字段增加分隔符 */\n                    if (!first) {\n                        out.write(',');\n                    }\n\n                    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n                        serializer.println();\n                    }\n                    /** 输出key */\n                    out.writeFieldName(key, true);\n                } else {\n                    if (!first) {\n                        out.write(',');\n                    }\n\n                    /** 开启WriteNonStringKeyAsString, 将key做一次json串转换 */\n                    if (out.isEnabled(NON_STRINGKEY_AS_STRING) && !(entryKey instanceof Enum)) {\n                        String strEntryKey = JSON.toJSONString(entryKey);\n                        serializer.write(strEntryKey);\n                    } else {\n                        serializer.write(entryKey);\n                    }\n\n                    out.write(':');\n                }\n\n                first = false;\n\n                if (value == null) {\n                    /** 如果value为空，输出空值 */\n                    out.writeNull();\n                    continue;\n                }\n\n                Class<?> clazz = value.getClass();\n\n                if (clazz != preClazz) {\n                    preClazz = clazz;\n                    preWriter = serializer.getObjectWriter(clazz);\n                }\n\n                if (SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)\n                        && preWriter instanceof JavaBeanSerializer) {\n                    Type valueType = null;\n                    if (fieldType instanceof ParameterizedType) {\n                        ParameterizedType parameterizedType = (ParameterizedType) fieldType;\n                        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n                        if (actualTypeArguments.length == 2) {\n                            valueType = actualTypeArguments[1];\n                        }\n                    }\n\n                    /** 特殊处理泛型，这里假定泛型第二参数作为值的真实类型 */\n                    JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) preWriter;\n                    javaBeanSerializer.writeNoneASM(serializer, value, entryKey, valueType, features);\n                } else {\n                    /** 根据value类型的序列化器 序列化value */\n                    preWriter.write(serializer, value, entryKey, null, features);\n                }\n            }\n        } finally {\n            serializer.context = parent;\n        }\n\n        serializer.decrementIdent();\n        if (out.isEnabled(SerializerFeature.PrettyFormat) && map.size() > 0) {\n            serializer.println();\n        }\n\n        if (!unwrapped) {\n            out.write('}');\n        }\n    }\n```\n\nmap序列化实现方法主要做了以下几件事情：\n\n1. 处理对象引用，使用jdk的IdentityHashMap类严格判断对象\b严格相等。\n2. 针对map的key和value执行拦截器操作。\n3. 针对value的类型，查找value的class类型序列化输出。\n\n序列化map处理引用的逻辑在 `com.alibaba.fastjson.serializer.JSONSerializer#writeReference` :\n\n```java\n    public void writeReference(Object object) {\n        SerialContext context = this.context;\n        Object current = context.object;\n\n        /** 如果输出引用就是自己this, ref值为 @ */\n        if (object == current) {\n            out.write(\"{\\\"$ref\\\":\\\"@\\\"}\");\n            return;\n        }\n\n        SerialContext parentContext = context.parent;\n\n        /** 如果输出引用就是父引用, ref值为 .. */\n        if (parentContext != null) {\n            if (object == parentContext.object) {\n                out.write(\"{\\\"$ref\\\":\\\"..\\\"}\");\n                return;\n            }\n        }\n\n        SerialContext rootContext = context;\n        /** 查找最顶层序列化context */\n        for (;;) {\n            if (rootContext.parent == null) {\n                break;\n            }\n            rootContext = rootContext.parent;\n        }\n\n        if (object == rootContext.object) {\n            /** 如果最顶层引用就是自己this, ref值为 $*/\n            out.write(\"{\\\"$ref\\\":\\\"$\\\"}\");\n        } else {\n            /** 常规java对象引用，直接输出 */\n            out.write(\"{\\\"$ref\\\":\\\"\");\n            out.write(references.get(object).toString());\n            out.write(\"\\\"}\");\n        }\n    }\n```\n\n### ListSerializer序列化\n\n```java\n    public final void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features)\n                                                                                                       throws IOException {\n\n        boolean writeClassName = serializer.out.isEnabled(SerializerFeature.WriteClassName)\n                || SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName);\n\n        SerializeWriter out = serializer.out;\n\n        Type elementType = null;\n        if (writeClassName) {\n            /** 获取泛型字段真实类型 */\n            elementType = TypeUtils.getCollectionItemType(fieldType);\n        }\n\n        if (object == null) {\n            /** 如果集合对象为空并且开启WriteNullListAsEmpty特性, 输出[] */\n            out.writeNull(SerializerFeature.WriteNullListAsEmpty);\n            return;\n        }\n\n        List<?> list = (List<?>) object;\n\n        if (list.size() == 0) {\n            /** 如果集合对象元素为0, 输出[] */\n            out.append(\"[]\");\n            return;\n        }\n\n        /** 创建当前新的序列化context */\n        SerialContext context = serializer.context;\n        serializer.setContext(context, object, fieldName, 0);\n\n        ObjectSerializer itemSerializer = null;\n        try {\n            /** 判断是否开启json格式化 */\n            if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n                out.append('[');\n                serializer.incrementIndent();\n\n                int i = 0;\n                for (Object item : list) {\n                    if (i != 0) {\n                        out.append(',');\n                    }\n\n                    serializer.println();\n                    if (item != null) {\n                        /** 如果存在引用，输出元素引用信息 */\n                        if (serializer.containsReference(item)) {\n                            serializer.writeReference(item);\n                        } else {\n                            /** 通过元素包含的类型查找序列化实例 */\n                            itemSerializer = serializer.getObjectWriter(item.getClass());\n                            SerialContext itemContext = new SerialContext(context, object, fieldName, 0, 0);\n                            serializer.context = itemContext;\n                            /** 根据具体序列化实例输出 */\n                            itemSerializer.write(serializer, item, i, elementType, features);\n                        }\n                    } else {\n                        serializer.out.writeNull();\n                    }\n                    i++;\n                }\n\n                serializer.decrementIdent();\n                serializer.println();\n                out.append(']');\n                return;\n            }\n\n            out.append('[');\n            for (int i = 0, size = list.size(); i < size; ++i) {\n                Object item = list.get(i);\n                if (i != 0) {\n                    out.append(',');\n                }\n                \n                if (item == null) {\n                    out.append(\"null\");\n                } else {\n                    Class<?> clazz = item.getClass();\n\n                    if (clazz == Integer.class) {\n                        /** 元素类型如果是整数，直接输出 */\n                        out.writeInt(((Integer) item).intValue());\n                    } else if (clazz == Long.class) {\n                        /** 元素类型如果是长整数，直接输出并判断是否追加类型L */\n                        long val = ((Long) item).longValue();\n                        if (writeClassName) {\n                            out.writeLong(val);\n                            out.write('L');\n                        } else {\n                            out.writeLong(val);\n                        }\n                    } else {\n                        if ((SerializerFeature.DisableCircularReferenceDetect.mask & features) != 0){\n                            /** 如果禁用循环引用检查，根据元素类型查找序列化实例输出 */\n                            itemSerializer = serializer.getObjectWriter(item.getClass());\n                            itemSerializer.write(serializer, item, i, elementType, features);\n                        }else {\n                            if (!out.disableCircularReferenceDetect) {\n                                /** 如果没有禁用循环引用检查，创建新的序列化上下文 */\n                                SerialContext itemContext = new SerialContext(context, object, fieldName, 0, 0);\n                                serializer.context = itemContext;\n                            }\n\n                            if (serializer.containsReference(item)) {\n                                /** 处理对象引用 */\n                                serializer.writeReference(item);\n                            } else {\n                                /** 根据集合类型查找序列化实例处理，JavaBeanSerializer后面单独分析 */\n                                itemSerializer = serializer.getObjectWriter(item.getClass());\n                                if ((SerializerFeature.WriteClassName.mask & features) != 0\n                                        && itemSerializer instanceof JavaBeanSerializer)\n                                {\n                                    JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) itemSerializer;\n                                    javaBeanSerializer.writeNoneASM(serializer, item, i, elementType, features);\n                                } else {\n                                    itemSerializer.write(serializer, item, i, elementType, features);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            out.append(']');\n        } finally {\n            serializer.context = context;\n        }\n    }\n```\n\n`ListSerializer`序列化主要判断是否需要格式化json输出，对整型和长整型进行特殊取值，\b如果是对象类型根据class类别查找\b序列化实例处理，和hessian2源码实现原理类似。\n\n### DateCodec序列化\n\n因为日期序列化和前面已经分析的`MiscCodec`中`SimpleDateFormat`相近，在此不冗余分析，可以参考我已经添加的注释分析。\n\n### JavaBeanSerializer序列化\n\n因为前面已经涵盖了绝大部分`fastjson`序列化源码分析，为了节省篇幅，\b我准备用一个较为复杂的序列化实现`JavaBeanSerializer`作为\b结束这章内容。\n\n在`SerializeConfig#getObjectWriter`中有一段逻辑`createJavaBeanSerializer`，我们针对进行细节分析 ：\n\n```java\n    public final ObjectSerializer createJavaBeanSerializer(Class<?> clazz) {\n        /** 封装序列化clazz Bean，包含字段类型等等 */\n        SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy, fieldBased);\n        if (beanInfo.fields.length == 0 && Iterable.class.isAssignableFrom(clazz)) {\n            /** 如果clazz是迭代器类型，使用MiscCodec序列化，会被序列化成数组 [,,,] */\n            return MiscCodec.instance;\n        }\n\n        return createJavaBeanSerializer(beanInfo);\n    }\n```\n\n我们先进`TypeUtils.buildBeanInfo`\b看看内部实现：\n\n```java\n    public static SerializeBeanInfo buildBeanInfo(Class<?> beanType //\n            , Map<String,String> aliasMap //\n            , PropertyNamingStrategy propertyNamingStrategy //\n            , boolean fieldBased //\n    ){\n        JSONType jsonType = TypeUtils.getAnnotation(beanType,JSONType.class);\n        String[] orders = null;\n        final int features;\n        String typeName = null, typeKey = null;\n        if(jsonType != null){\n            orders = jsonType.orders();\n\n            typeName = jsonType.typeName();\n            if(typeName.length() == 0){\n                typeName = null;\n            }\n\n            PropertyNamingStrategy jsonTypeNaming = jsonType.naming();\n            if (jsonTypeNaming != PropertyNamingStrategy.CamelCase) {\n                propertyNamingStrategy = jsonTypeNaming;\n            }\n\n            features = SerializerFeature.of(jsonType.serialzeFeatures());\n            /** 查找类型父类是否包含JSONType注解 */\n            for(Class<?> supperClass = beanType.getSuperclass()\n                ; supperClass != null && supperClass != Object.class\n                    ; supperClass = supperClass.getSuperclass()){\n                JSONType superJsonType = TypeUtils.getAnnotation(supperClass,JSONType.class);\n                if(superJsonType == null){\n                    break;\n                }\n                typeKey = superJsonType.typeKey();\n                if(typeKey.length() != 0){\n                    break;\n                }\n            }\n\n            /** 查找类型实现的接口是否包含JSONType注解 */\n            for(Class<?> interfaceClass : beanType.getInterfaces()){\n                JSONType superJsonType = TypeUtils.getAnnotation(interfaceClass,JSONType.class);\n                if(superJsonType != null){\n                    typeKey = superJsonType.typeKey();\n                    if(typeKey.length() != 0){\n                        break;\n                    }\n                }\n            }\n\n            if(typeKey != null && typeKey.length() == 0){\n                typeKey = null;\n            }\n        } else{\n            features = 0;\n        }\n        /** fieldName,field ，先生成fieldName的快照，减少之后的findField的轮询 */\n        Map<String,Field> fieldCacheMap = new HashMap<String,Field>();\n        ParserConfig.parserAllFieldToCache(beanType, fieldCacheMap);\n        List<FieldInfo> fieldInfoList = fieldBased\n                ? computeGettersWithFieldBase(beanType, aliasMap, false, propertyNamingStrategy)\n                : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, false, propertyNamingStrategy);\n        FieldInfo[] fields = new FieldInfo[fieldInfoList.size()];\n        fieldInfoList.toArray(fields);\n        FieldInfo[] sortedFields;\n        List<FieldInfo> sortedFieldList;\n        if(orders != null && orders.length != 0){\n            /** computeGettersWithFieldBase基于字段解析,\n             *  computeGetters基于方法解析+字段解析\n             */\n            sortedFieldList = fieldBased\n                    ? computeGettersWithFieldBase(beanType, aliasMap, true, propertyNamingStrategy) //\n                    : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, true, propertyNamingStrategy);\n        } else{\n            sortedFieldList = new ArrayList<FieldInfo>(fieldInfoList);\n            Collections.sort(sortedFieldList);\n        }\n        sortedFields = new FieldInfo[sortedFieldList.size()];\n        sortedFieldList.toArray(sortedFields);\n        if(Arrays.equals(sortedFields, fields)){\n            sortedFields = fields;\n        }\n        /** 封装对象的字段信息和方法信息 */\n        return new SerializeBeanInfo(beanType, jsonType, typeName, typeKey, features, fields, sortedFields);\n    }\n```\n\n在解析字段的时候有一个区别，computeGettersWithFieldBase基于字段解析而computeGetters基于方法解析(get + is 开头方法)+字段解析。因为两者的解析类似，这里只给出computeGettersWithFieldBase方法解析 ：\n\n```java\n    public static List<FieldInfo> computeGettersWithFieldBase(\n            Class<?> clazz,\n            Map<String,String> aliasMap,\n            boolean sorted,\n            PropertyNamingStrategy propertyNamingStrategy){\n        Map<String,FieldInfo> fieldInfoMap = new LinkedHashMap<String,FieldInfo>();\n        for(Class<?> currentClass = clazz; currentClass != null; currentClass = currentClass.getSuperclass()){\n            Field[] fields = currentClass.getDeclaredFields();\n            /** 遍历clazz所有字段，把字段信息封装成bean存储到fieldInfoMap中*/\n            computeFields(currentClass, aliasMap, propertyNamingStrategy, fieldInfoMap, fields);\n        }\n        /** 主要处理字段有序的逻辑 */\n        return getFieldInfos(clazz, sorted, fieldInfoMap);\n    }\n```\n\n查看`computeFields`逻辑：\n\n```java\n    private static void computeFields(\n            Class<?> clazz,\n            Map<String,String> aliasMap,\n            PropertyNamingStrategy propertyNamingStrategy,\n            Map<String,FieldInfo> fieldInfoMap,\n            Field[] fields){\n        for(Field field : fields){\n            /** 忽略静态字段类型 */\n            if(Modifier.isStatic(field.getModifiers())){\n                continue;\n            }\n            /** 查找当前字段是否包含JSONField注解 */\n            JSONField fieldAnnotation = field.getAnnotation(JSONField.class);\n            int ordinal = 0, serialzeFeatures = 0, parserFeatures = 0;\n            String propertyName = field.getName();\n            String label = null;\n            if(fieldAnnotation != null){\n                /** 忽略不序列化的字段 */\n                if(!fieldAnnotation.serialize()){\n                    continue;\n                }\n                /** 获取字段序列化顺序 */\n                ordinal = fieldAnnotation.ordinal();\n                serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n                parserFeatures = Feature.of(fieldAnnotation.parseFeatures());\n                if(fieldAnnotation.name().length() != 0){\n                    /** 属性名字采用JSONField注解上面的name */\n                    propertyName = fieldAnnotation.name();\n                }\n                if(fieldAnnotation.label().length() != 0){\n                    label = fieldAnnotation.label();\n                }\n            }\n            if(aliasMap != null){\n                /** 查找是否包含属性别名的字段 */\n                propertyName = aliasMap.get(propertyName);\n                if(propertyName == null){\n                    continue;\n                }\n            }\n            if(propertyNamingStrategy != null){\n                /** 属性字段命名规则转换 */\n                propertyName = propertyNamingStrategy.translate(propertyName);\n            }\n\n            /** 封装解析类型的字段和类型 */\n            if(!fieldInfoMap.containsKey(propertyName)){\n                FieldInfo fieldInfo = new FieldInfo(propertyName, null, field, clazz, null, ordinal, serialzeFeatures, parserFeatures,\n                        null, fieldAnnotation, label);\n                fieldInfoMap.put(propertyName, fieldInfo);\n            }\n        }\n    }\n```\n\n处理字段有序的逻辑`getFieldInfos` :\n\n```java\n   private static List<FieldInfo> getFieldInfos(Class<?> clazz, boolean sorted, Map<String,FieldInfo> fieldInfoMap){\n        List<FieldInfo> fieldInfoList = new ArrayList<FieldInfo>();\n        String[] orders = null;\n        /** 查找clazz上面的JSONType注解 */\n        JSONType annotation = TypeUtils.getAnnotation(clazz,JSONType.class);\n        if(annotation != null){\n            orders = annotation.orders();\n        }\n        if(orders != null && orders.length > 0){\n            LinkedHashMap<String,FieldInfo> map = new LinkedHashMap<String,FieldInfo>(fieldInfoList.size());\n            for(FieldInfo field : fieldInfoMap.values()){\n                map.put(field.name, field);\n            }\n            int i = 0;\n            /** 先把有序字段从map移除，并添加到有序列表fieldInfoList中 */\n            for(String item : orders){\n                FieldInfo field = map.get(item);\n                if(field != null){\n                    fieldInfoList.add(field);\n                    map.remove(item);\n                }\n            }\n            /** 将map剩余元素追加到有序列表末尾 */\n            for(FieldInfo field : map.values()){\n                fieldInfoList.add(field);\n            }\n        } else{\n            /** 如果注解没有要求顺序，全部添加map元素 */\n            for(FieldInfo fieldInfo : fieldInfoMap.values()){\n                fieldInfoList.add(fieldInfo);\n            }\n            if(sorted){\n                Collections.sort(fieldInfoList);\n            }\n        }\n        return fieldInfoList;\n    }\n```\n\n我们在看下具体创建`JavaBeanSerializer`序列化逻辑：\n\n```java\n    public ObjectSerializer createJavaBeanSerializer(SerializeBeanInfo beanInfo) {\n        JSONType jsonType = beanInfo.jsonType;\n\n        boolean asm = this.asm && !fieldBased;\n        \n        if (jsonType != null) {\n            Class<?> serializerClass = jsonType.serializer();\n            if (serializerClass != Void.class) {\n                try {\n                    /** 实例化注解指定的类型 */\n                    Object seralizer = serializerClass.newInstance();\n                    if (seralizer instanceof ObjectSerializer) {\n                        return (ObjectSerializer) seralizer;\n                    }\n                } catch (Throwable e) {\n                    // skip\n                }\n            }\n\n            /** 注解显示指定不使用asm */\n            if (jsonType.asm() == false) {\n                asm = false;\n            }\n\n            /** 注解显示开启WriteNonStringValueAsString、WriteEnumUsingToString\n             * 和NotWriteDefaultValue不使用asm */\n            for (SerializerFeature feature : jsonType.serialzeFeatures()) {\n                if (SerializerFeature.WriteNonStringValueAsString == feature //\n                        || SerializerFeature.WriteEnumUsingToString == feature //\n                        || SerializerFeature.NotWriteDefaultValue == feature) {\n                    asm = false;\n                    break;\n                }\n            }\n        }\n\n        Class<?> clazz = beanInfo.beanType;\n        /** 非public类型，直接使用JavaBeanSerializer序列化 */\n        if (!Modifier.isPublic(beanInfo.beanType.getModifiers())) {\n            return new JavaBeanSerializer(beanInfo);\n        }\n\n        // ... 省略asm判断检查\n\n        if (asm) {\n            try {\n                /** 使用asm字节码库序列化，后面单独列一个章节分析asm源码 */\n                ObjectSerializer asmSerializer = createASMSerializer(beanInfo);\n                if (asmSerializer != null) {\n                    return asmSerializer;\n                }\n            } catch (ClassNotFoundException ex) {\n                // skip\n            } catch (ClassFormatError e) {\n                // skip\n            } catch (ClassCastException e) {\n                // skip\n            } catch (Throwable e) {\n                throw new JSONException(\"create asm serializer error, class \"\n                        + clazz, e);\n            }\n        }\n\n        /** 默认使用JavaBeanSerializer 序列化类 */\n        return new JavaBeanSerializer(beanInfo);\n    }\n```\n\nO\bK, 一切就绪，接下来有请`JavaBeanSerializer`序列化实现登场：\n\n```java\n    protected void write(JSONSerializer serializer, \n                      Object object, \n                      Object fieldName, \n                      Type fieldType, \n                      int features,\n                      boolean unwrapped\n    ) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        if (object == null) {\n            out.writeNull();\n            return;\n        }\n\n        /** 如果开启循环引用检查，输出引用并返回 */\n        if (writeReference(serializer, object, features)) {\n            return;\n        }\n\n        final FieldSerializer[] getters;\n\n        if (out.sortField) {\n            getters = this.sortedGetters;\n        } else {\n            getters = this.getters;\n        }\n\n        SerialContext parent = serializer.context;\n        if (!this.beanInfo.beanType.isEnum()) {\n            /** 针对非枚举类型，创建新的上下文 */\n            serializer.setContext(parent, object, fieldName, this.beanInfo.features, features);\n        }\n\n        final boolean writeAsArray = isWriteAsArray(serializer, features);\n\n        try {\n            final char startSeperator = writeAsArray ? '[' : '{';\n            final char endSeperator = writeAsArray ? ']' : '}';\n            if (!unwrapped) {\n                out.append(startSeperator);\n            }\n\n            if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n                serializer.incrementIndent();\n                serializer.println();\n            }\n\n            boolean commaFlag = false;\n\n            if ((this.beanInfo.features & SerializerFeature.WriteClassName.mask) != 0\n                ||(features & SerializerFeature.WriteClassName.mask) != 0\n                || serializer.isWriteClassName(fieldType, object)) {\n                Class<?> objClass = object.getClass();\n\n                final Type type;\n                /** 获取字段的泛型类型 */\n                if (objClass != fieldType && fieldType instanceof WildcardType) {\n                    type = TypeUtils.getClass(fieldType);\n                } else {\n                    type = fieldType;\n                }\n\n                if (objClass != type) {\n                    /** 输出字段类型名字 */\n                    writeClassName(serializer, beanInfo.typeKey, object);\n                    commaFlag = true;\n                }\n            }\n\n            char seperator = commaFlag ? ',' : '\\0';\n\n            final boolean directWritePrefix = out.quoteFieldNames && !out.useSingleQuotes;\n            /** 触发序列化BeforeFilter拦截器 */\n            char newSeperator = this.writeBefore(serializer, object, seperator);\n            commaFlag = newSeperator == ',';\n\n            final boolean skipTransient = out.isEnabled(SerializerFeature.SkipTransientField);\n            final boolean ignoreNonFieldGetter = out.isEnabled(SerializerFeature.IgnoreNonFieldGetter);\n\n            for (int i = 0; i < getters.length; ++i) {\n                FieldSerializer fieldSerializer = getters[i];\n\n                Field field = fieldSerializer.fieldInfo.field;\n                FieldInfo fieldInfo = fieldSerializer.fieldInfo;\n                String fieldInfoName = fieldInfo.name;\n                Class<?> fieldClass = fieldInfo.fieldClass;\n\n                /** 忽略配置了transient关键字的字段 */\n                if (skipTransient) {\n                    if (field != null) {\n                        if (fieldInfo.fieldTransient) {\n                            continue;\n                        }\n                    }\n                }\n\n                /** 目前看到注解方法上面 field = null */\n                if (ignoreNonFieldGetter) {\n                    if (field == null) {\n                        continue;\n                    }\n                }\n\n                boolean notApply = false;\n                /** 触发字段PropertyPreFilter拦截器 */\n                if ((!this.applyName(serializer, object, fieldInfoName))\n                    || !this.applyLabel(serializer, fieldInfo.label)) {\n                    if (writeAsArray) {\n                        notApply = true;\n                    } else {\n                        continue;\n                    }\n                }\n\n                /** ??? */\n                if (beanInfo.typeKey != null\n                        && fieldInfoName.equals(beanInfo.typeKey)\n                        && serializer.isWriteClassName(fieldType, object)) {\n                    continue;\n                }\n\n                Object propertyValue;\n\n                if (notApply) {\n                    propertyValue = null;\n                } else {\n                    try {\n                        propertyValue = fieldSerializer.getPropertyValueDirect(object);\n                    } catch (InvocationTargetException ex) {\n                        if (out.isEnabled(SerializerFeature.IgnoreErrorGetter)) {\n                            propertyValue = null;\n                        } else {\n                            throw ex;\n                        }\n                    }\n                }\n\n                /** 针对属性名字和属性值 触发PropertyFilter拦截器 */\n                if (!this.apply(serializer, object, fieldInfoName, propertyValue)) {\n                    continue;\n                }\n\n                if (fieldClass == String.class && \"trim\".equals(fieldInfo.format)) {\n                    /** 剔除字符串两边空格 */\n                    if (propertyValue != null) {\n                        propertyValue = ((String) propertyValue).trim();\n                    }\n                }\n\n                String key = fieldInfoName;\n                /** 触发属性名字NameFilter拦截器 */\n                key = this.processKey(serializer, object, key, propertyValue);\n\n                Object originalValue = propertyValue;\n                /** 触发属性值ContextValueFilter拦截器 */\n                propertyValue = this.processValue(serializer, fieldSerializer.fieldContext, object, fieldInfoName,\n                                                        propertyValue);\n\n                if (propertyValue == null) {\n                    int serialzeFeatures = fieldInfo.serialzeFeatures;\n                    if (beanInfo.jsonType != null) {\n                        serialzeFeatures |= SerializerFeature.of(beanInfo.jsonType.serialzeFeatures());\n                    }\n                    // beanInfo.jsonType\n                    if (fieldClass == Boolean.class) {\n                        int defaultMask = SerializerFeature.WriteNullBooleanAsFalse.mask;\n                        final int mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;\n                        if ((!writeAsArray) && (serialzeFeatures & mask) == 0 && (out.features & mask) == 0) {\n                            continue;\n                            /** 针对Boolean类型，值为空，输出false */\n                        } else if ((serialzeFeatures & defaultMask) != 0 || (out.features & defaultMask) != 0) {\n                            propertyValue = false;\n                        }\n                    } else if (fieldClass == String.class) {\n                        int defaultMask = SerializerFeature.WriteNullStringAsEmpty.mask;\n                        final int mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;\n                        if ((!writeAsArray) && (serialzeFeatures & mask) == 0 && (out.features & mask) == 0) {\n                            continue;\n                        } else if ((serialzeFeatures & defaultMask) != 0 || (out.features & defaultMask) != 0) {\n                            /** 针对string类型，值为空，输出空串\"\" */\n                            propertyValue = \"\";\n                        }\n                    } else if (Number.class.isAssignableFrom(fieldClass)) {\n                        int defaultMask = SerializerFeature.WriteNullNumberAsZero.mask;\n                        final int mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;\n                        if ((!writeAsArray) && (serialzeFeatures & mask) == 0 && (out.features & mask) == 0) {\n                            continue;\n                        } else if ((serialzeFeatures & defaultMask) != 0 || (out.features & defaultMask) != 0) {\n                            /** 针对数字类型，值为空，输出0 */\n                            propertyValue = 0;\n                        }\n                    } else if (Collection.class.isAssignableFrom(fieldClass)) {\n                        int defaultMask = SerializerFeature.WriteNullListAsEmpty.mask;\n                        final int mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;\n                        if ((!writeAsArray) && (serialzeFeatures & mask) == 0 && (out.features & mask) == 0) {\n                            continue;\n                        } else if ((serialzeFeatures & defaultMask) != 0 || (out.features & defaultMask) != 0) {\n                            propertyValue = Collections.emptyList();\n                        }\n                        /** 针对值为null，配置序列化不输出特性，则输出json字符串排除这些属性 */\n                    } else if ((!writeAsArray) && (!fieldSerializer.writeNull) && !out.isEnabled(SerializerFeature.WriteMapNullValue.mask)){\n                        continue;\n                    }\n                }\n\n                /** 忽略序列化配置为不输出默认值的字段 */\n                if (propertyValue != null\n                        && (out.notWriteDefaultValue\n                        || (fieldInfo.serialzeFeatures & SerializerFeature.NotWriteDefaultValue.mask) != 0\n                        || (beanInfo.features & SerializerFeature.NotWriteDefaultValue.mask) != 0\n                        )) {\n                    Class<?> fieldCLass = fieldInfo.fieldClass;\n                    if (fieldCLass == byte.class && propertyValue instanceof Byte\n                        && ((Byte) propertyValue).byteValue() == 0) {\n                        continue;\n                    } else if (fieldCLass == short.class && propertyValue instanceof Short\n                               && ((Short) propertyValue).shortValue() == 0) {\n                        continue;\n                    } else if (fieldCLass == int.class && propertyValue instanceof Integer\n                               && ((Integer) propertyValue).intValue() == 0) {\n                        continue;\n                    } else if (fieldCLass == long.class && propertyValue instanceof Long\n                               && ((Long) propertyValue).longValue() == 0L) {\n                        continue;\n                    } else if (fieldCLass == float.class && propertyValue instanceof Float\n                               && ((Float) propertyValue).floatValue() == 0F) {\n                        continue;\n                    } else if (fieldCLass == double.class && propertyValue instanceof Double\n                               && ((Double) propertyValue).doubleValue() == 0D) {\n                        continue;\n                    } else if (fieldCLass == boolean.class && propertyValue instanceof Boolean\n                               && !((Boolean) propertyValue).booleanValue()) {\n                        continue;\n                    }\n                }\n\n                if (commaFlag) {\n                    if (fieldInfo.unwrapped\n                            && propertyValue instanceof Map\n                            && ((Map) propertyValue).size() == 0) {\n                        continue;\n                    }\n\n                    out.write(',');\n                    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n                        serializer.println();\n                    }\n                }\n\n                /** 应用拦截器后变更了key */\n                if (key != fieldInfoName) {\n                    if (!writeAsArray) {\n                        out.writeFieldName(key, true);\n                    }\n\n                    serializer.write(propertyValue);\n                } else if (originalValue != propertyValue) {\n                    if (!writeAsArray) {\n                        fieldSerializer.writePrefix(serializer);\n                    }\n                    /** 应用拦截器后变更了属性值，查找value的class类型进行序列化 */\n                    serializer.write(propertyValue);\n                } else {\n                    if (!writeAsArray) {\n                        /** 输出属性字段名称 */\n                        if (!fieldInfo.unwrapped) {\n                            if (directWritePrefix) {\n                                out.write(fieldInfo.name_chars, 0, fieldInfo.name_chars.length);\n                            } else {\n                                fieldSerializer.writePrefix(serializer);\n                            }\n                        }\n                    }\n\n                    if (!writeAsArray) {\n                        JSONField fieldAnnotation = fieldInfo.getAnnotation();\n                        if (fieldClass == String.class && (fieldAnnotation == null || fieldAnnotation.serializeUsing() == Void.class)) {\n\n                            /** 处理针对字符串类型属性值输出 */\n                            if (propertyValue == null) {\n                                if ((out.features & SerializerFeature.WriteNullStringAsEmpty.mask) != 0\n                                    || (fieldSerializer.features & SerializerFeature.WriteNullStringAsEmpty.mask) != 0) {\n                                    out.writeString(\"\");\n                                } else {\n                                    out.writeNull();\n                                }\n                            } else {\n                                String propertyValueString = (String) propertyValue;\n\n                                if (out.useSingleQuotes) {\n                                    out.writeStringWithSingleQuote(propertyValueString);\n                                } else {\n                                    out.writeStringWithDoubleQuote(propertyValueString, (char) 0);\n                                }\n                            }\n                        } else {\n                            if (fieldInfo.unwrapped\n                                    && propertyValue instanceof Map\n                                    && ((Map) propertyValue).size() == 0) {\n                                commaFlag = false;\n                                continue;\n                            }\n\n                            fieldSerializer.writeValue(serializer, propertyValue);\n                        }\n                    } else {\n                        /** 基于数组形式输出 [,,,] */\n                        fieldSerializer.writeValue(serializer, propertyValue);\n                    }\n                }\n\n                boolean fieldUnwrappedNull = false;\n                if (fieldInfo.unwrapped\n                        && propertyValue instanceof Map) {\n                    Map map = ((Map) propertyValue);\n                    if (map.size() == 0) {\n                        fieldUnwrappedNull = true;\n                    } else if (!serializer.isEnabled(SerializerFeature.WriteMapNullValue)){\n                        boolean hasNotNull = false;\n                        for (Object value : map.values()) {\n                            if (value != null) {\n                                hasNotNull = true;\n                                break;\n                            }\n                        }\n                        if (!hasNotNull) {\n                            fieldUnwrappedNull = true;\n                        }\n                    }\n                }\n\n                if (!fieldUnwrappedNull) {\n                    commaFlag = true;\n                }\n            }\n\n            /** 触发序列化AfterFilter拦截器 */\n            this.writeAfter(serializer, object, commaFlag ? ',' : '\\0');\n\n            if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n                serializer.decrementIdent();\n                serializer.println();\n            }\n\n            if (!unwrapped) {\n                out.append(endSeperator);\n            }\n        } catch (Exception e) {\n            String errorMessage = \"write javaBean error, fastjson version \" + JSON.VERSION;\n            if (object != null) {\n                errorMessage += \", class \" + object.getClass().getName();\n            }\n            if (fieldName != null) {\n                errorMessage += \", fieldName : \" + fieldName;\n            }\n            if (e.getMessage() != null) {\n                errorMessage += (\", \" + e.getMessage());\n            }\n\n            throw new JSONException(errorMessage, e);\n        } finally {\n            serializer.context = parent;\n        }\n    }\n```\n\n在序列化过程中我们重点关注一下序列化属性值的逻辑`fieldSerializer.writeValue(serializer, propertyValue)`：\n\n```java\n    public void writeValue(JSONSerializer serializer, Object propertyValue) throws Exception {\n        if (runtimeInfo == null) {\n\n            Class<?> runtimeFieldClass;\n            /** 获取字段的类型 */\n            if (propertyValue == null) {\n                runtimeFieldClass = this.fieldInfo.fieldClass;\n            } else {\n                runtimeFieldClass = propertyValue.getClass();\n            }\n\n            ObjectSerializer fieldSerializer = null;\n            JSONField fieldAnnotation = fieldInfo.getAnnotation();\n\n            /** 创建并初始化字段指定序列化类型 */\n            if (fieldAnnotation != null && fieldAnnotation.serializeUsing() != Void.class) {\n                fieldSerializer = (ObjectSerializer) fieldAnnotation.serializeUsing().newInstance();\n                serializeUsing = true;\n            } else {\n                /** 针对format和primitive类型创建序列化类型 */\n                if (format != null) {\n                    if (runtimeFieldClass == double.class || runtimeFieldClass == Double.class) {\n                        fieldSerializer = new DoubleSerializer(format);\n                    } else if (runtimeFieldClass == float.class || runtimeFieldClass == Float.class) {\n                        fieldSerializer = new FloatCodec(format);\n                    }\n                }\n\n                if (fieldSerializer == null) {\n                    /** 根据属性值class类型查找序列化类型 */\n                    fieldSerializer = serializer.getObjectWriter(runtimeFieldClass);\n                }\n            }\n\n            /** 封装序列化类型和属性值的类型 */\n            runtimeInfo = new RuntimeSerializerInfo(fieldSerializer, runtimeFieldClass);\n        }\n        \n        final RuntimeSerializerInfo runtimeInfo = this.runtimeInfo;\n        \n        final int fieldFeatures = disableCircularReferenceDetect?\n                (fieldInfo.serialzeFeatures|SerializerFeature.DisableCircularReferenceDetect.getMask()):fieldInfo.serialzeFeatures;\n\n        if (propertyValue == null) {\n            SerializeWriter out  = serializer.out;\n\n            if (fieldInfo.fieldClass == Object.class\n                    && out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) {\n                out.writeNull();\n                return;\n            }\n\n            /** 针对属性值为null的情况处理 */\n            Class<?> runtimeFieldClass = runtimeInfo.runtimeFieldClass;\n\n            if (Number.class.isAssignableFrom(runtimeFieldClass)) {\n                out.writeNull(features, SerializerFeature.WriteNullNumberAsZero.mask);\n                return;\n            } else if (String.class == runtimeFieldClass) {\n                out.writeNull(features, SerializerFeature.WriteNullStringAsEmpty.mask);\n                return;\n            } else if (Boolean.class == runtimeFieldClass) {\n                out.writeNull(features, SerializerFeature.WriteNullBooleanAsFalse.mask);\n                return;\n            } else if (Collection.class.isAssignableFrom(runtimeFieldClass)) {\n                out.writeNull(features, SerializerFeature.WriteNullListAsEmpty.mask);\n                return;\n            }\n\n            ObjectSerializer fieldSerializer = runtimeInfo.fieldSerializer;\n\n            if ((out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES))\n                    && fieldSerializer instanceof JavaBeanSerializer) {\n                out.writeNull();\n                return;\n            }\n\n            /** 序列化null对象 */\n            fieldSerializer.write(serializer, null, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);\n            return;\n        }\n\n        if (fieldInfo.isEnum) {\n            if (writeEnumUsingName) {\n                /** 使用枚举名字序列化 */\n                serializer.out.writeString(((Enum<?>) propertyValue).name());\n                return;\n            }\n\n            if (writeEnumUsingToString) {\n                /** 使用枚举toString字符串序列化 */\n                serializer.out.writeString(((Enum<?>) propertyValue).toString());\n                return;\n            }\n        }\n        \n        Class<?> valueClass = propertyValue.getClass();\n        ObjectSerializer valueSerializer;\n        if (valueClass == runtimeInfo.runtimeFieldClass || serializeUsing) {\n            /** 使用序列化注解指定的序列化类型 */\n            valueSerializer = runtimeInfo.fieldSerializer;\n        } else {\n            valueSerializer = serializer.getObjectWriter(valueClass);\n        }\n        \n        if (format != null && !(valueSerializer instanceof DoubleSerializer || valueSerializer instanceof FloatCodec)) {\n            if (valueSerializer instanceof ContextObjectSerializer) {\n                ((ContextObjectSerializer) valueSerializer).write(serializer, propertyValue, this.fieldContext);    \n            } else {\n                serializer.writeWithFormat(propertyValue, format);\n            }\n            return;\n        }\n\n        /** 特殊检查是否是具体类型序列化JavaBeanSerializer、 MapSerializer */\n        if (fieldInfo.unwrapped) {\n            if (valueSerializer instanceof JavaBeanSerializer) {\n                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) valueSerializer;\n                javaBeanSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, true);\n                return;\n            }\n\n            if (valueSerializer instanceof MapSerializer) {\n                MapSerializer mapSerializer = (MapSerializer) valueSerializer;\n                mapSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, true);\n                return;\n            }\n        }\n\n        /** 针对字段类型和属性值类型不一致退化成使用JavaBeanSerializer */\n        if ((features & SerializerFeature.WriteClassName.mask) != 0\n                && valueClass != fieldInfo.fieldClass\n                && JavaBeanSerializer.class.isInstance(valueSerializer)) {\n            ((JavaBeanSerializer) valueSerializer).write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, false);\n            return;\n        }\n\n        /** 使用值序列化类型处理 */\n        valueSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);\n    }\n```\n\n到此序列化成json字符串已经全部讲完了，接下来讲解反序列化内容，包含词法分析的代码。\n","source":"_posts/Fastjson源码解析-序列化(六)-json特定序列化实现解析.md","raw":"---\ntitle: 序列化（六）\nsubtitle:  序列化回调接口实现分析，主要对内部常用的序列化实现，比如MapSerializer序列化等。\ncover: /images/fastjson.jpg\nauthor: \n  nick: 诣极\n  link: https://github.com/zonghaishang\ntags:\n- Fastjson源码解析\ncategories:\n- Fastjson源码解析\ndate: 2018-09-30 23:08:14\n---\n## 序列化回调接口实现分析\n\n### 特定序列化实现解析\n\n### MapSerializer序列化\n\n\b按照代码的顺序第一个分析到Map序列化器，内部调用write：\n\n```java\n    public void write(JSONSerializer serializer\n            , Object object\n            , Object fieldName\n            , Type fieldType\n            , int features) throws IOException {\n        write(serializer, object, fieldName, fieldType, features, false);\n    }\n```\n\n进入`MapSerializer#write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int, boolean)`方法:\n\n```java\n    public void write(JSONSerializer serializer\n            , Object object\n            , Object fieldName\n            , Type fieldType\n            , int features \n            , boolean unwrapped) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        if (object == null) {\n            /** 如果map是null, 输出 \"null\" 字符串 */\n            out.writeNull();\n            return;\n        }\n\n        Map<?, ?> map = (Map<?, ?>) object;\n        final int mapSortFieldMask = SerializerFeature.MapSortField.mask;\n        if ((out.features & mapSortFieldMask) != 0 || (features & mapSortFieldMask) != 0) {\n            /** JSONObject包装HashMap或者LinkedHashMap */\n            if (map instanceof JSONObject) {\n                map = ((JSONObject) map).getInnerMap();\n            }\n\n            if ((!(map instanceof SortedMap)) && !(map instanceof LinkedHashMap)) {\n                try {\n                    map = new TreeMap(map);\n                } catch (Exception ex) {\n                    // skip\n                }\n            }\n        }\n\n        if (serializer.containsReference(object)) {\n            /** 处理对象引用，下文详细分析 */\n            serializer.writeReference(object);\n            return;\n        }\n\n        SerialContext parent = serializer.context;\n        /** 创建当前新的序列化context */\n        serializer.setContext(parent, object, fieldName, 0);\n        try {\n            if (!unwrapped) {\n                out.write('{');\n            }\n\n            serializer.incrementIndent();\n\n            Class<?> preClazz = null;\n            ObjectSerializer preWriter = null;\n\n            boolean first = true;\n\n            if (out.isEnabled(SerializerFeature.WriteClassName)) {\n                String typeKey = serializer.config.typeKey;\n                Class<?> mapClass = map.getClass();\n                boolean containsKey = (mapClass == JSONObject.class || mapClass == HashMap.class || mapClass == LinkedHashMap.class) \n                        && map.containsKey(typeKey);\n                /** 序列化的map不包含key=@type或者自定义值，则输出map的类名 */\n                if (!containsKey) {\n                    out.writeFieldName(typeKey);\n                    out.writeString(object.getClass().getName());\n                    first = false;\n                }\n            }\n\n            for (Map.Entry entry : map.entrySet()) {\n                Object value = entry.getValue();\n\n                Object entryKey = entry.getKey();\n\n                {\n                    /** 遍历JSONSerializer的PropertyPreFilter拦截器，拦截key是否输出 */\n                    List<PropertyPreFilter> preFilters = serializer.propertyPreFilters;\n                    if (preFilters != null && preFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            if (!this.applyName(serializer, object, (String) entryKey)) {\n                                continue;\n                            }\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            if (!this.applyName(serializer, object, strKey)) {\n                                continue;\n                            }\n                        }\n                    }\n                }\n                {\n                    /** 遍历PropertyPreFilter拦截器，拦截key是否输出 */\n                    List<PropertyPreFilter> preFilters = this.propertyPreFilters;\n                    if (preFilters != null && preFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            if (!this.applyName(serializer, object, (String) entryKey)) {\n                                continue;\n                            }\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            if (!this.applyName(serializer, object, strKey)) {\n                                continue;\n                            }\n                        }\n                    }\n                }\n\n                {\n                    /** 遍历JSONSerializer的PropertyFilter拦截器，拦截key是否输出 */\n                    List<PropertyFilter> propertyFilters = serializer.propertyFilters;\n                    if (propertyFilters != null && propertyFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            if (!this.apply(serializer, object, (String) entryKey, value)) {\n                                continue;\n                            }\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            if (!this.apply(serializer, object, strKey, value)) {\n                                continue;\n                            }\n                        }\n                    }\n                }\n                {\n                    /** 遍历PropertyFilter拦截器，拦截key是否输出 */\n                    List<PropertyFilter> propertyFilters = this.propertyFilters;\n                    if (propertyFilters != null && propertyFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            if (!this.apply(serializer, object, (String) entryKey, value)) {\n                                continue;\n                            }\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            if (!this.apply(serializer, object, strKey, value)) {\n                                continue;\n                            }\n                        }\n                    }\n                }\n\n                {\n                    /** 遍历JSONSerializer的NameFilter拦截器，适用于key字符别名串转换 */\n                    List<NameFilter> nameFilters = serializer.nameFilters;\n                    if (nameFilters != null && nameFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            entryKey = this.processKey(serializer, object, (String) entryKey, value);\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            entryKey = this.processKey(serializer, object, strKey, value);\n                        }\n                    }\n                }\n                {\n                    /** 遍历NameFilter拦截器，适用于key字符串别名转换 */\n                    List<NameFilter> nameFilters = this.nameFilters;\n                    if (nameFilters != null && nameFilters.size() > 0) {\n                        if (entryKey == null || entryKey instanceof String) {\n                            entryKey = this.processKey(serializer, object, (String) entryKey, value);\n                        } else if (entryKey.getClass().isPrimitive() || entryKey instanceof Number) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            entryKey = this.processKey(serializer, object, strKey, value);\n                        }\n                    }\n                }\n\n                {\n                    /** 处理map序列化value拦截器, ValueFilter 和 ContextValueFilter */\n                    if (entryKey == null || entryKey instanceof String) {\n                        value = this.processValue(serializer, null, object, (String) entryKey, value);\n                    } else {\n                        boolean objectOrArray = entryKey instanceof Map || entryKey instanceof Collection;\n                        if (!objectOrArray) {\n                            String strKey = JSON.toJSONString(entryKey);\n                            value = this.processValue(serializer, null, object, strKey, value);\n                        }\n                    }\n                }\n\n                if (value == null) {\n                    /** 如果开启map为Null，不输出 */\n                    if (!out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) {\n                        continue;\n                    }\n                }\n\n                if (entryKey instanceof String) {\n                    String key = (String) entryKey;\n\n                    /** 如果不是第一个属性字段增加分隔符 */\n                    if (!first) {\n                        out.write(',');\n                    }\n\n                    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n                        serializer.println();\n                    }\n                    /** 输出key */\n                    out.writeFieldName(key, true);\n                } else {\n                    if (!first) {\n                        out.write(',');\n                    }\n\n                    /** 开启WriteNonStringKeyAsString, 将key做一次json串转换 */\n                    if (out.isEnabled(NON_STRINGKEY_AS_STRING) && !(entryKey instanceof Enum)) {\n                        String strEntryKey = JSON.toJSONString(entryKey);\n                        serializer.write(strEntryKey);\n                    } else {\n                        serializer.write(entryKey);\n                    }\n\n                    out.write(':');\n                }\n\n                first = false;\n\n                if (value == null) {\n                    /** 如果value为空，输出空值 */\n                    out.writeNull();\n                    continue;\n                }\n\n                Class<?> clazz = value.getClass();\n\n                if (clazz != preClazz) {\n                    preClazz = clazz;\n                    preWriter = serializer.getObjectWriter(clazz);\n                }\n\n                if (SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)\n                        && preWriter instanceof JavaBeanSerializer) {\n                    Type valueType = null;\n                    if (fieldType instanceof ParameterizedType) {\n                        ParameterizedType parameterizedType = (ParameterizedType) fieldType;\n                        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n                        if (actualTypeArguments.length == 2) {\n                            valueType = actualTypeArguments[1];\n                        }\n                    }\n\n                    /** 特殊处理泛型，这里假定泛型第二参数作为值的真实类型 */\n                    JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) preWriter;\n                    javaBeanSerializer.writeNoneASM(serializer, value, entryKey, valueType, features);\n                } else {\n                    /** 根据value类型的序列化器 序列化value */\n                    preWriter.write(serializer, value, entryKey, null, features);\n                }\n            }\n        } finally {\n            serializer.context = parent;\n        }\n\n        serializer.decrementIdent();\n        if (out.isEnabled(SerializerFeature.PrettyFormat) && map.size() > 0) {\n            serializer.println();\n        }\n\n        if (!unwrapped) {\n            out.write('}');\n        }\n    }\n```\n\nmap序列化实现方法主要做了以下几件事情：\n\n1. 处理对象引用，使用jdk的IdentityHashMap类严格判断对象\b严格相等。\n2. 针对map的key和value执行拦截器操作。\n3. 针对value的类型，查找value的class类型序列化输出。\n\n序列化map处理引用的逻辑在 `com.alibaba.fastjson.serializer.JSONSerializer#writeReference` :\n\n```java\n    public void writeReference(Object object) {\n        SerialContext context = this.context;\n        Object current = context.object;\n\n        /** 如果输出引用就是自己this, ref值为 @ */\n        if (object == current) {\n            out.write(\"{\\\"$ref\\\":\\\"@\\\"}\");\n            return;\n        }\n\n        SerialContext parentContext = context.parent;\n\n        /** 如果输出引用就是父引用, ref值为 .. */\n        if (parentContext != null) {\n            if (object == parentContext.object) {\n                out.write(\"{\\\"$ref\\\":\\\"..\\\"}\");\n                return;\n            }\n        }\n\n        SerialContext rootContext = context;\n        /** 查找最顶层序列化context */\n        for (;;) {\n            if (rootContext.parent == null) {\n                break;\n            }\n            rootContext = rootContext.parent;\n        }\n\n        if (object == rootContext.object) {\n            /** 如果最顶层引用就是自己this, ref值为 $*/\n            out.write(\"{\\\"$ref\\\":\\\"$\\\"}\");\n        } else {\n            /** 常规java对象引用，直接输出 */\n            out.write(\"{\\\"$ref\\\":\\\"\");\n            out.write(references.get(object).toString());\n            out.write(\"\\\"}\");\n        }\n    }\n```\n\n### ListSerializer序列化\n\n```java\n    public final void write(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, int features)\n                                                                                                       throws IOException {\n\n        boolean writeClassName = serializer.out.isEnabled(SerializerFeature.WriteClassName)\n                || SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName);\n\n        SerializeWriter out = serializer.out;\n\n        Type elementType = null;\n        if (writeClassName) {\n            /** 获取泛型字段真实类型 */\n            elementType = TypeUtils.getCollectionItemType(fieldType);\n        }\n\n        if (object == null) {\n            /** 如果集合对象为空并且开启WriteNullListAsEmpty特性, 输出[] */\n            out.writeNull(SerializerFeature.WriteNullListAsEmpty);\n            return;\n        }\n\n        List<?> list = (List<?>) object;\n\n        if (list.size() == 0) {\n            /** 如果集合对象元素为0, 输出[] */\n            out.append(\"[]\");\n            return;\n        }\n\n        /** 创建当前新的序列化context */\n        SerialContext context = serializer.context;\n        serializer.setContext(context, object, fieldName, 0);\n\n        ObjectSerializer itemSerializer = null;\n        try {\n            /** 判断是否开启json格式化 */\n            if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n                out.append('[');\n                serializer.incrementIndent();\n\n                int i = 0;\n                for (Object item : list) {\n                    if (i != 0) {\n                        out.append(',');\n                    }\n\n                    serializer.println();\n                    if (item != null) {\n                        /** 如果存在引用，输出元素引用信息 */\n                        if (serializer.containsReference(item)) {\n                            serializer.writeReference(item);\n                        } else {\n                            /** 通过元素包含的类型查找序列化实例 */\n                            itemSerializer = serializer.getObjectWriter(item.getClass());\n                            SerialContext itemContext = new SerialContext(context, object, fieldName, 0, 0);\n                            serializer.context = itemContext;\n                            /** 根据具体序列化实例输出 */\n                            itemSerializer.write(serializer, item, i, elementType, features);\n                        }\n                    } else {\n                        serializer.out.writeNull();\n                    }\n                    i++;\n                }\n\n                serializer.decrementIdent();\n                serializer.println();\n                out.append(']');\n                return;\n            }\n\n            out.append('[');\n            for (int i = 0, size = list.size(); i < size; ++i) {\n                Object item = list.get(i);\n                if (i != 0) {\n                    out.append(',');\n                }\n                \n                if (item == null) {\n                    out.append(\"null\");\n                } else {\n                    Class<?> clazz = item.getClass();\n\n                    if (clazz == Integer.class) {\n                        /** 元素类型如果是整数，直接输出 */\n                        out.writeInt(((Integer) item).intValue());\n                    } else if (clazz == Long.class) {\n                        /** 元素类型如果是长整数，直接输出并判断是否追加类型L */\n                        long val = ((Long) item).longValue();\n                        if (writeClassName) {\n                            out.writeLong(val);\n                            out.write('L');\n                        } else {\n                            out.writeLong(val);\n                        }\n                    } else {\n                        if ((SerializerFeature.DisableCircularReferenceDetect.mask & features) != 0){\n                            /** 如果禁用循环引用检查，根据元素类型查找序列化实例输出 */\n                            itemSerializer = serializer.getObjectWriter(item.getClass());\n                            itemSerializer.write(serializer, item, i, elementType, features);\n                        }else {\n                            if (!out.disableCircularReferenceDetect) {\n                                /** 如果没有禁用循环引用检查，创建新的序列化上下文 */\n                                SerialContext itemContext = new SerialContext(context, object, fieldName, 0, 0);\n                                serializer.context = itemContext;\n                            }\n\n                            if (serializer.containsReference(item)) {\n                                /** 处理对象引用 */\n                                serializer.writeReference(item);\n                            } else {\n                                /** 根据集合类型查找序列化实例处理，JavaBeanSerializer后面单独分析 */\n                                itemSerializer = serializer.getObjectWriter(item.getClass());\n                                if ((SerializerFeature.WriteClassName.mask & features) != 0\n                                        && itemSerializer instanceof JavaBeanSerializer)\n                                {\n                                    JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) itemSerializer;\n                                    javaBeanSerializer.writeNoneASM(serializer, item, i, elementType, features);\n                                } else {\n                                    itemSerializer.write(serializer, item, i, elementType, features);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            out.append(']');\n        } finally {\n            serializer.context = context;\n        }\n    }\n```\n\n`ListSerializer`序列化主要判断是否需要格式化json输出，对整型和长整型进行特殊取值，\b如果是对象类型根据class类别查找\b序列化实例处理，和hessian2源码实现原理类似。\n\n### DateCodec序列化\n\n因为日期序列化和前面已经分析的`MiscCodec`中`SimpleDateFormat`相近，在此不冗余分析，可以参考我已经添加的注释分析。\n\n### JavaBeanSerializer序列化\n\n因为前面已经涵盖了绝大部分`fastjson`序列化源码分析，为了节省篇幅，\b我准备用一个较为复杂的序列化实现`JavaBeanSerializer`作为\b结束这章内容。\n\n在`SerializeConfig#getObjectWriter`中有一段逻辑`createJavaBeanSerializer`，我们针对进行细节分析 ：\n\n```java\n    public final ObjectSerializer createJavaBeanSerializer(Class<?> clazz) {\n        /** 封装序列化clazz Bean，包含字段类型等等 */\n        SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, null, propertyNamingStrategy, fieldBased);\n        if (beanInfo.fields.length == 0 && Iterable.class.isAssignableFrom(clazz)) {\n            /** 如果clazz是迭代器类型，使用MiscCodec序列化，会被序列化成数组 [,,,] */\n            return MiscCodec.instance;\n        }\n\n        return createJavaBeanSerializer(beanInfo);\n    }\n```\n\n我们先进`TypeUtils.buildBeanInfo`\b看看内部实现：\n\n```java\n    public static SerializeBeanInfo buildBeanInfo(Class<?> beanType //\n            , Map<String,String> aliasMap //\n            , PropertyNamingStrategy propertyNamingStrategy //\n            , boolean fieldBased //\n    ){\n        JSONType jsonType = TypeUtils.getAnnotation(beanType,JSONType.class);\n        String[] orders = null;\n        final int features;\n        String typeName = null, typeKey = null;\n        if(jsonType != null){\n            orders = jsonType.orders();\n\n            typeName = jsonType.typeName();\n            if(typeName.length() == 0){\n                typeName = null;\n            }\n\n            PropertyNamingStrategy jsonTypeNaming = jsonType.naming();\n            if (jsonTypeNaming != PropertyNamingStrategy.CamelCase) {\n                propertyNamingStrategy = jsonTypeNaming;\n            }\n\n            features = SerializerFeature.of(jsonType.serialzeFeatures());\n            /** 查找类型父类是否包含JSONType注解 */\n            for(Class<?> supperClass = beanType.getSuperclass()\n                ; supperClass != null && supperClass != Object.class\n                    ; supperClass = supperClass.getSuperclass()){\n                JSONType superJsonType = TypeUtils.getAnnotation(supperClass,JSONType.class);\n                if(superJsonType == null){\n                    break;\n                }\n                typeKey = superJsonType.typeKey();\n                if(typeKey.length() != 0){\n                    break;\n                }\n            }\n\n            /** 查找类型实现的接口是否包含JSONType注解 */\n            for(Class<?> interfaceClass : beanType.getInterfaces()){\n                JSONType superJsonType = TypeUtils.getAnnotation(interfaceClass,JSONType.class);\n                if(superJsonType != null){\n                    typeKey = superJsonType.typeKey();\n                    if(typeKey.length() != 0){\n                        break;\n                    }\n                }\n            }\n\n            if(typeKey != null && typeKey.length() == 0){\n                typeKey = null;\n            }\n        } else{\n            features = 0;\n        }\n        /** fieldName,field ，先生成fieldName的快照，减少之后的findField的轮询 */\n        Map<String,Field> fieldCacheMap = new HashMap<String,Field>();\n        ParserConfig.parserAllFieldToCache(beanType, fieldCacheMap);\n        List<FieldInfo> fieldInfoList = fieldBased\n                ? computeGettersWithFieldBase(beanType, aliasMap, false, propertyNamingStrategy)\n                : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, false, propertyNamingStrategy);\n        FieldInfo[] fields = new FieldInfo[fieldInfoList.size()];\n        fieldInfoList.toArray(fields);\n        FieldInfo[] sortedFields;\n        List<FieldInfo> sortedFieldList;\n        if(orders != null && orders.length != 0){\n            /** computeGettersWithFieldBase基于字段解析,\n             *  computeGetters基于方法解析+字段解析\n             */\n            sortedFieldList = fieldBased\n                    ? computeGettersWithFieldBase(beanType, aliasMap, true, propertyNamingStrategy) //\n                    : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, true, propertyNamingStrategy);\n        } else{\n            sortedFieldList = new ArrayList<FieldInfo>(fieldInfoList);\n            Collections.sort(sortedFieldList);\n        }\n        sortedFields = new FieldInfo[sortedFieldList.size()];\n        sortedFieldList.toArray(sortedFields);\n        if(Arrays.equals(sortedFields, fields)){\n            sortedFields = fields;\n        }\n        /** 封装对象的字段信息和方法信息 */\n        return new SerializeBeanInfo(beanType, jsonType, typeName, typeKey, features, fields, sortedFields);\n    }\n```\n\n在解析字段的时候有一个区别，computeGettersWithFieldBase基于字段解析而computeGetters基于方法解析(get + is 开头方法)+字段解析。因为两者的解析类似，这里只给出computeGettersWithFieldBase方法解析 ：\n\n```java\n    public static List<FieldInfo> computeGettersWithFieldBase(\n            Class<?> clazz,\n            Map<String,String> aliasMap,\n            boolean sorted,\n            PropertyNamingStrategy propertyNamingStrategy){\n        Map<String,FieldInfo> fieldInfoMap = new LinkedHashMap<String,FieldInfo>();\n        for(Class<?> currentClass = clazz; currentClass != null; currentClass = currentClass.getSuperclass()){\n            Field[] fields = currentClass.getDeclaredFields();\n            /** 遍历clazz所有字段，把字段信息封装成bean存储到fieldInfoMap中*/\n            computeFields(currentClass, aliasMap, propertyNamingStrategy, fieldInfoMap, fields);\n        }\n        /** 主要处理字段有序的逻辑 */\n        return getFieldInfos(clazz, sorted, fieldInfoMap);\n    }\n```\n\n查看`computeFields`逻辑：\n\n```java\n    private static void computeFields(\n            Class<?> clazz,\n            Map<String,String> aliasMap,\n            PropertyNamingStrategy propertyNamingStrategy,\n            Map<String,FieldInfo> fieldInfoMap,\n            Field[] fields){\n        for(Field field : fields){\n            /** 忽略静态字段类型 */\n            if(Modifier.isStatic(field.getModifiers())){\n                continue;\n            }\n            /** 查找当前字段是否包含JSONField注解 */\n            JSONField fieldAnnotation = field.getAnnotation(JSONField.class);\n            int ordinal = 0, serialzeFeatures = 0, parserFeatures = 0;\n            String propertyName = field.getName();\n            String label = null;\n            if(fieldAnnotation != null){\n                /** 忽略不序列化的字段 */\n                if(!fieldAnnotation.serialize()){\n                    continue;\n                }\n                /** 获取字段序列化顺序 */\n                ordinal = fieldAnnotation.ordinal();\n                serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());\n                parserFeatures = Feature.of(fieldAnnotation.parseFeatures());\n                if(fieldAnnotation.name().length() != 0){\n                    /** 属性名字采用JSONField注解上面的name */\n                    propertyName = fieldAnnotation.name();\n                }\n                if(fieldAnnotation.label().length() != 0){\n                    label = fieldAnnotation.label();\n                }\n            }\n            if(aliasMap != null){\n                /** 查找是否包含属性别名的字段 */\n                propertyName = aliasMap.get(propertyName);\n                if(propertyName == null){\n                    continue;\n                }\n            }\n            if(propertyNamingStrategy != null){\n                /** 属性字段命名规则转换 */\n                propertyName = propertyNamingStrategy.translate(propertyName);\n            }\n\n            /** 封装解析类型的字段和类型 */\n            if(!fieldInfoMap.containsKey(propertyName)){\n                FieldInfo fieldInfo = new FieldInfo(propertyName, null, field, clazz, null, ordinal, serialzeFeatures, parserFeatures,\n                        null, fieldAnnotation, label);\n                fieldInfoMap.put(propertyName, fieldInfo);\n            }\n        }\n    }\n```\n\n处理字段有序的逻辑`getFieldInfos` :\n\n```java\n   private static List<FieldInfo> getFieldInfos(Class<?> clazz, boolean sorted, Map<String,FieldInfo> fieldInfoMap){\n        List<FieldInfo> fieldInfoList = new ArrayList<FieldInfo>();\n        String[] orders = null;\n        /** 查找clazz上面的JSONType注解 */\n        JSONType annotation = TypeUtils.getAnnotation(clazz,JSONType.class);\n        if(annotation != null){\n            orders = annotation.orders();\n        }\n        if(orders != null && orders.length > 0){\n            LinkedHashMap<String,FieldInfo> map = new LinkedHashMap<String,FieldInfo>(fieldInfoList.size());\n            for(FieldInfo field : fieldInfoMap.values()){\n                map.put(field.name, field);\n            }\n            int i = 0;\n            /** 先把有序字段从map移除，并添加到有序列表fieldInfoList中 */\n            for(String item : orders){\n                FieldInfo field = map.get(item);\n                if(field != null){\n                    fieldInfoList.add(field);\n                    map.remove(item);\n                }\n            }\n            /** 将map剩余元素追加到有序列表末尾 */\n            for(FieldInfo field : map.values()){\n                fieldInfoList.add(field);\n            }\n        } else{\n            /** 如果注解没有要求顺序，全部添加map元素 */\n            for(FieldInfo fieldInfo : fieldInfoMap.values()){\n                fieldInfoList.add(fieldInfo);\n            }\n            if(sorted){\n                Collections.sort(fieldInfoList);\n            }\n        }\n        return fieldInfoList;\n    }\n```\n\n我们在看下具体创建`JavaBeanSerializer`序列化逻辑：\n\n```java\n    public ObjectSerializer createJavaBeanSerializer(SerializeBeanInfo beanInfo) {\n        JSONType jsonType = beanInfo.jsonType;\n\n        boolean asm = this.asm && !fieldBased;\n        \n        if (jsonType != null) {\n            Class<?> serializerClass = jsonType.serializer();\n            if (serializerClass != Void.class) {\n                try {\n                    /** 实例化注解指定的类型 */\n                    Object seralizer = serializerClass.newInstance();\n                    if (seralizer instanceof ObjectSerializer) {\n                        return (ObjectSerializer) seralizer;\n                    }\n                } catch (Throwable e) {\n                    // skip\n                }\n            }\n\n            /** 注解显示指定不使用asm */\n            if (jsonType.asm() == false) {\n                asm = false;\n            }\n\n            /** 注解显示开启WriteNonStringValueAsString、WriteEnumUsingToString\n             * 和NotWriteDefaultValue不使用asm */\n            for (SerializerFeature feature : jsonType.serialzeFeatures()) {\n                if (SerializerFeature.WriteNonStringValueAsString == feature //\n                        || SerializerFeature.WriteEnumUsingToString == feature //\n                        || SerializerFeature.NotWriteDefaultValue == feature) {\n                    asm = false;\n                    break;\n                }\n            }\n        }\n\n        Class<?> clazz = beanInfo.beanType;\n        /** 非public类型，直接使用JavaBeanSerializer序列化 */\n        if (!Modifier.isPublic(beanInfo.beanType.getModifiers())) {\n            return new JavaBeanSerializer(beanInfo);\n        }\n\n        // ... 省略asm判断检查\n\n        if (asm) {\n            try {\n                /** 使用asm字节码库序列化，后面单独列一个章节分析asm源码 */\n                ObjectSerializer asmSerializer = createASMSerializer(beanInfo);\n                if (asmSerializer != null) {\n                    return asmSerializer;\n                }\n            } catch (ClassNotFoundException ex) {\n                // skip\n            } catch (ClassFormatError e) {\n                // skip\n            } catch (ClassCastException e) {\n                // skip\n            } catch (Throwable e) {\n                throw new JSONException(\"create asm serializer error, class \"\n                        + clazz, e);\n            }\n        }\n\n        /** 默认使用JavaBeanSerializer 序列化类 */\n        return new JavaBeanSerializer(beanInfo);\n    }\n```\n\nO\bK, 一切就绪，接下来有请`JavaBeanSerializer`序列化实现登场：\n\n```java\n    protected void write(JSONSerializer serializer, \n                      Object object, \n                      Object fieldName, \n                      Type fieldType, \n                      int features,\n                      boolean unwrapped\n    ) throws IOException {\n        SerializeWriter out = serializer.out;\n\n        if (object == null) {\n            out.writeNull();\n            return;\n        }\n\n        /** 如果开启循环引用检查，输出引用并返回 */\n        if (writeReference(serializer, object, features)) {\n            return;\n        }\n\n        final FieldSerializer[] getters;\n\n        if (out.sortField) {\n            getters = this.sortedGetters;\n        } else {\n            getters = this.getters;\n        }\n\n        SerialContext parent = serializer.context;\n        if (!this.beanInfo.beanType.isEnum()) {\n            /** 针对非枚举类型，创建新的上下文 */\n            serializer.setContext(parent, object, fieldName, this.beanInfo.features, features);\n        }\n\n        final boolean writeAsArray = isWriteAsArray(serializer, features);\n\n        try {\n            final char startSeperator = writeAsArray ? '[' : '{';\n            final char endSeperator = writeAsArray ? ']' : '}';\n            if (!unwrapped) {\n                out.append(startSeperator);\n            }\n\n            if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n                serializer.incrementIndent();\n                serializer.println();\n            }\n\n            boolean commaFlag = false;\n\n            if ((this.beanInfo.features & SerializerFeature.WriteClassName.mask) != 0\n                ||(features & SerializerFeature.WriteClassName.mask) != 0\n                || serializer.isWriteClassName(fieldType, object)) {\n                Class<?> objClass = object.getClass();\n\n                final Type type;\n                /** 获取字段的泛型类型 */\n                if (objClass != fieldType && fieldType instanceof WildcardType) {\n                    type = TypeUtils.getClass(fieldType);\n                } else {\n                    type = fieldType;\n                }\n\n                if (objClass != type) {\n                    /** 输出字段类型名字 */\n                    writeClassName(serializer, beanInfo.typeKey, object);\n                    commaFlag = true;\n                }\n            }\n\n            char seperator = commaFlag ? ',' : '\\0';\n\n            final boolean directWritePrefix = out.quoteFieldNames && !out.useSingleQuotes;\n            /** 触发序列化BeforeFilter拦截器 */\n            char newSeperator = this.writeBefore(serializer, object, seperator);\n            commaFlag = newSeperator == ',';\n\n            final boolean skipTransient = out.isEnabled(SerializerFeature.SkipTransientField);\n            final boolean ignoreNonFieldGetter = out.isEnabled(SerializerFeature.IgnoreNonFieldGetter);\n\n            for (int i = 0; i < getters.length; ++i) {\n                FieldSerializer fieldSerializer = getters[i];\n\n                Field field = fieldSerializer.fieldInfo.field;\n                FieldInfo fieldInfo = fieldSerializer.fieldInfo;\n                String fieldInfoName = fieldInfo.name;\n                Class<?> fieldClass = fieldInfo.fieldClass;\n\n                /** 忽略配置了transient关键字的字段 */\n                if (skipTransient) {\n                    if (field != null) {\n                        if (fieldInfo.fieldTransient) {\n                            continue;\n                        }\n                    }\n                }\n\n                /** 目前看到注解方法上面 field = null */\n                if (ignoreNonFieldGetter) {\n                    if (field == null) {\n                        continue;\n                    }\n                }\n\n                boolean notApply = false;\n                /** 触发字段PropertyPreFilter拦截器 */\n                if ((!this.applyName(serializer, object, fieldInfoName))\n                    || !this.applyLabel(serializer, fieldInfo.label)) {\n                    if (writeAsArray) {\n                        notApply = true;\n                    } else {\n                        continue;\n                    }\n                }\n\n                /** ??? */\n                if (beanInfo.typeKey != null\n                        && fieldInfoName.equals(beanInfo.typeKey)\n                        && serializer.isWriteClassName(fieldType, object)) {\n                    continue;\n                }\n\n                Object propertyValue;\n\n                if (notApply) {\n                    propertyValue = null;\n                } else {\n                    try {\n                        propertyValue = fieldSerializer.getPropertyValueDirect(object);\n                    } catch (InvocationTargetException ex) {\n                        if (out.isEnabled(SerializerFeature.IgnoreErrorGetter)) {\n                            propertyValue = null;\n                        } else {\n                            throw ex;\n                        }\n                    }\n                }\n\n                /** 针对属性名字和属性值 触发PropertyFilter拦截器 */\n                if (!this.apply(serializer, object, fieldInfoName, propertyValue)) {\n                    continue;\n                }\n\n                if (fieldClass == String.class && \"trim\".equals(fieldInfo.format)) {\n                    /** 剔除字符串两边空格 */\n                    if (propertyValue != null) {\n                        propertyValue = ((String) propertyValue).trim();\n                    }\n                }\n\n                String key = fieldInfoName;\n                /** 触发属性名字NameFilter拦截器 */\n                key = this.processKey(serializer, object, key, propertyValue);\n\n                Object originalValue = propertyValue;\n                /** 触发属性值ContextValueFilter拦截器 */\n                propertyValue = this.processValue(serializer, fieldSerializer.fieldContext, object, fieldInfoName,\n                                                        propertyValue);\n\n                if (propertyValue == null) {\n                    int serialzeFeatures = fieldInfo.serialzeFeatures;\n                    if (beanInfo.jsonType != null) {\n                        serialzeFeatures |= SerializerFeature.of(beanInfo.jsonType.serialzeFeatures());\n                    }\n                    // beanInfo.jsonType\n                    if (fieldClass == Boolean.class) {\n                        int defaultMask = SerializerFeature.WriteNullBooleanAsFalse.mask;\n                        final int mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;\n                        if ((!writeAsArray) && (serialzeFeatures & mask) == 0 && (out.features & mask) == 0) {\n                            continue;\n                            /** 针对Boolean类型，值为空，输出false */\n                        } else if ((serialzeFeatures & defaultMask) != 0 || (out.features & defaultMask) != 0) {\n                            propertyValue = false;\n                        }\n                    } else if (fieldClass == String.class) {\n                        int defaultMask = SerializerFeature.WriteNullStringAsEmpty.mask;\n                        final int mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;\n                        if ((!writeAsArray) && (serialzeFeatures & mask) == 0 && (out.features & mask) == 0) {\n                            continue;\n                        } else if ((serialzeFeatures & defaultMask) != 0 || (out.features & defaultMask) != 0) {\n                            /** 针对string类型，值为空，输出空串\"\" */\n                            propertyValue = \"\";\n                        }\n                    } else if (Number.class.isAssignableFrom(fieldClass)) {\n                        int defaultMask = SerializerFeature.WriteNullNumberAsZero.mask;\n                        final int mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;\n                        if ((!writeAsArray) && (serialzeFeatures & mask) == 0 && (out.features & mask) == 0) {\n                            continue;\n                        } else if ((serialzeFeatures & defaultMask) != 0 || (out.features & defaultMask) != 0) {\n                            /** 针对数字类型，值为空，输出0 */\n                            propertyValue = 0;\n                        }\n                    } else if (Collection.class.isAssignableFrom(fieldClass)) {\n                        int defaultMask = SerializerFeature.WriteNullListAsEmpty.mask;\n                        final int mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;\n                        if ((!writeAsArray) && (serialzeFeatures & mask) == 0 && (out.features & mask) == 0) {\n                            continue;\n                        } else if ((serialzeFeatures & defaultMask) != 0 || (out.features & defaultMask) != 0) {\n                            propertyValue = Collections.emptyList();\n                        }\n                        /** 针对值为null，配置序列化不输出特性，则输出json字符串排除这些属性 */\n                    } else if ((!writeAsArray) && (!fieldSerializer.writeNull) && !out.isEnabled(SerializerFeature.WriteMapNullValue.mask)){\n                        continue;\n                    }\n                }\n\n                /** 忽略序列化配置为不输出默认值的字段 */\n                if (propertyValue != null\n                        && (out.notWriteDefaultValue\n                        || (fieldInfo.serialzeFeatures & SerializerFeature.NotWriteDefaultValue.mask) != 0\n                        || (beanInfo.features & SerializerFeature.NotWriteDefaultValue.mask) != 0\n                        )) {\n                    Class<?> fieldCLass = fieldInfo.fieldClass;\n                    if (fieldCLass == byte.class && propertyValue instanceof Byte\n                        && ((Byte) propertyValue).byteValue() == 0) {\n                        continue;\n                    } else if (fieldCLass == short.class && propertyValue instanceof Short\n                               && ((Short) propertyValue).shortValue() == 0) {\n                        continue;\n                    } else if (fieldCLass == int.class && propertyValue instanceof Integer\n                               && ((Integer) propertyValue).intValue() == 0) {\n                        continue;\n                    } else if (fieldCLass == long.class && propertyValue instanceof Long\n                               && ((Long) propertyValue).longValue() == 0L) {\n                        continue;\n                    } else if (fieldCLass == float.class && propertyValue instanceof Float\n                               && ((Float) propertyValue).floatValue() == 0F) {\n                        continue;\n                    } else if (fieldCLass == double.class && propertyValue instanceof Double\n                               && ((Double) propertyValue).doubleValue() == 0D) {\n                        continue;\n                    } else if (fieldCLass == boolean.class && propertyValue instanceof Boolean\n                               && !((Boolean) propertyValue).booleanValue()) {\n                        continue;\n                    }\n                }\n\n                if (commaFlag) {\n                    if (fieldInfo.unwrapped\n                            && propertyValue instanceof Map\n                            && ((Map) propertyValue).size() == 0) {\n                        continue;\n                    }\n\n                    out.write(',');\n                    if (out.isEnabled(SerializerFeature.PrettyFormat)) {\n                        serializer.println();\n                    }\n                }\n\n                /** 应用拦截器后变更了key */\n                if (key != fieldInfoName) {\n                    if (!writeAsArray) {\n                        out.writeFieldName(key, true);\n                    }\n\n                    serializer.write(propertyValue);\n                } else if (originalValue != propertyValue) {\n                    if (!writeAsArray) {\n                        fieldSerializer.writePrefix(serializer);\n                    }\n                    /** 应用拦截器后变更了属性值，查找value的class类型进行序列化 */\n                    serializer.write(propertyValue);\n                } else {\n                    if (!writeAsArray) {\n                        /** 输出属性字段名称 */\n                        if (!fieldInfo.unwrapped) {\n                            if (directWritePrefix) {\n                                out.write(fieldInfo.name_chars, 0, fieldInfo.name_chars.length);\n                            } else {\n                                fieldSerializer.writePrefix(serializer);\n                            }\n                        }\n                    }\n\n                    if (!writeAsArray) {\n                        JSONField fieldAnnotation = fieldInfo.getAnnotation();\n                        if (fieldClass == String.class && (fieldAnnotation == null || fieldAnnotation.serializeUsing() == Void.class)) {\n\n                            /** 处理针对字符串类型属性值输出 */\n                            if (propertyValue == null) {\n                                if ((out.features & SerializerFeature.WriteNullStringAsEmpty.mask) != 0\n                                    || (fieldSerializer.features & SerializerFeature.WriteNullStringAsEmpty.mask) != 0) {\n                                    out.writeString(\"\");\n                                } else {\n                                    out.writeNull();\n                                }\n                            } else {\n                                String propertyValueString = (String) propertyValue;\n\n                                if (out.useSingleQuotes) {\n                                    out.writeStringWithSingleQuote(propertyValueString);\n                                } else {\n                                    out.writeStringWithDoubleQuote(propertyValueString, (char) 0);\n                                }\n                            }\n                        } else {\n                            if (fieldInfo.unwrapped\n                                    && propertyValue instanceof Map\n                                    && ((Map) propertyValue).size() == 0) {\n                                commaFlag = false;\n                                continue;\n                            }\n\n                            fieldSerializer.writeValue(serializer, propertyValue);\n                        }\n                    } else {\n                        /** 基于数组形式输出 [,,,] */\n                        fieldSerializer.writeValue(serializer, propertyValue);\n                    }\n                }\n\n                boolean fieldUnwrappedNull = false;\n                if (fieldInfo.unwrapped\n                        && propertyValue instanceof Map) {\n                    Map map = ((Map) propertyValue);\n                    if (map.size() == 0) {\n                        fieldUnwrappedNull = true;\n                    } else if (!serializer.isEnabled(SerializerFeature.WriteMapNullValue)){\n                        boolean hasNotNull = false;\n                        for (Object value : map.values()) {\n                            if (value != null) {\n                                hasNotNull = true;\n                                break;\n                            }\n                        }\n                        if (!hasNotNull) {\n                            fieldUnwrappedNull = true;\n                        }\n                    }\n                }\n\n                if (!fieldUnwrappedNull) {\n                    commaFlag = true;\n                }\n            }\n\n            /** 触发序列化AfterFilter拦截器 */\n            this.writeAfter(serializer, object, commaFlag ? ',' : '\\0');\n\n            if (getters.length > 0 && out.isEnabled(SerializerFeature.PrettyFormat)) {\n                serializer.decrementIdent();\n                serializer.println();\n            }\n\n            if (!unwrapped) {\n                out.append(endSeperator);\n            }\n        } catch (Exception e) {\n            String errorMessage = \"write javaBean error, fastjson version \" + JSON.VERSION;\n            if (object != null) {\n                errorMessage += \", class \" + object.getClass().getName();\n            }\n            if (fieldName != null) {\n                errorMessage += \", fieldName : \" + fieldName;\n            }\n            if (e.getMessage() != null) {\n                errorMessage += (\", \" + e.getMessage());\n            }\n\n            throw new JSONException(errorMessage, e);\n        } finally {\n            serializer.context = parent;\n        }\n    }\n```\n\n在序列化过程中我们重点关注一下序列化属性值的逻辑`fieldSerializer.writeValue(serializer, propertyValue)`：\n\n```java\n    public void writeValue(JSONSerializer serializer, Object propertyValue) throws Exception {\n        if (runtimeInfo == null) {\n\n            Class<?> runtimeFieldClass;\n            /** 获取字段的类型 */\n            if (propertyValue == null) {\n                runtimeFieldClass = this.fieldInfo.fieldClass;\n            } else {\n                runtimeFieldClass = propertyValue.getClass();\n            }\n\n            ObjectSerializer fieldSerializer = null;\n            JSONField fieldAnnotation = fieldInfo.getAnnotation();\n\n            /** 创建并初始化字段指定序列化类型 */\n            if (fieldAnnotation != null && fieldAnnotation.serializeUsing() != Void.class) {\n                fieldSerializer = (ObjectSerializer) fieldAnnotation.serializeUsing().newInstance();\n                serializeUsing = true;\n            } else {\n                /** 针对format和primitive类型创建序列化类型 */\n                if (format != null) {\n                    if (runtimeFieldClass == double.class || runtimeFieldClass == Double.class) {\n                        fieldSerializer = new DoubleSerializer(format);\n                    } else if (runtimeFieldClass == float.class || runtimeFieldClass == Float.class) {\n                        fieldSerializer = new FloatCodec(format);\n                    }\n                }\n\n                if (fieldSerializer == null) {\n                    /** 根据属性值class类型查找序列化类型 */\n                    fieldSerializer = serializer.getObjectWriter(runtimeFieldClass);\n                }\n            }\n\n            /** 封装序列化类型和属性值的类型 */\n            runtimeInfo = new RuntimeSerializerInfo(fieldSerializer, runtimeFieldClass);\n        }\n        \n        final RuntimeSerializerInfo runtimeInfo = this.runtimeInfo;\n        \n        final int fieldFeatures = disableCircularReferenceDetect?\n                (fieldInfo.serialzeFeatures|SerializerFeature.DisableCircularReferenceDetect.getMask()):fieldInfo.serialzeFeatures;\n\n        if (propertyValue == null) {\n            SerializeWriter out  = serializer.out;\n\n            if (fieldInfo.fieldClass == Object.class\n                    && out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) {\n                out.writeNull();\n                return;\n            }\n\n            /** 针对属性值为null的情况处理 */\n            Class<?> runtimeFieldClass = runtimeInfo.runtimeFieldClass;\n\n            if (Number.class.isAssignableFrom(runtimeFieldClass)) {\n                out.writeNull(features, SerializerFeature.WriteNullNumberAsZero.mask);\n                return;\n            } else if (String.class == runtimeFieldClass) {\n                out.writeNull(features, SerializerFeature.WriteNullStringAsEmpty.mask);\n                return;\n            } else if (Boolean.class == runtimeFieldClass) {\n                out.writeNull(features, SerializerFeature.WriteNullBooleanAsFalse.mask);\n                return;\n            } else if (Collection.class.isAssignableFrom(runtimeFieldClass)) {\n                out.writeNull(features, SerializerFeature.WriteNullListAsEmpty.mask);\n                return;\n            }\n\n            ObjectSerializer fieldSerializer = runtimeInfo.fieldSerializer;\n\n            if ((out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES))\n                    && fieldSerializer instanceof JavaBeanSerializer) {\n                out.writeNull();\n                return;\n            }\n\n            /** 序列化null对象 */\n            fieldSerializer.write(serializer, null, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);\n            return;\n        }\n\n        if (fieldInfo.isEnum) {\n            if (writeEnumUsingName) {\n                /** 使用枚举名字序列化 */\n                serializer.out.writeString(((Enum<?>) propertyValue).name());\n                return;\n            }\n\n            if (writeEnumUsingToString) {\n                /** 使用枚举toString字符串序列化 */\n                serializer.out.writeString(((Enum<?>) propertyValue).toString());\n                return;\n            }\n        }\n        \n        Class<?> valueClass = propertyValue.getClass();\n        ObjectSerializer valueSerializer;\n        if (valueClass == runtimeInfo.runtimeFieldClass || serializeUsing) {\n            /** 使用序列化注解指定的序列化类型 */\n            valueSerializer = runtimeInfo.fieldSerializer;\n        } else {\n            valueSerializer = serializer.getObjectWriter(valueClass);\n        }\n        \n        if (format != null && !(valueSerializer instanceof DoubleSerializer || valueSerializer instanceof FloatCodec)) {\n            if (valueSerializer instanceof ContextObjectSerializer) {\n                ((ContextObjectSerializer) valueSerializer).write(serializer, propertyValue, this.fieldContext);    \n            } else {\n                serializer.writeWithFormat(propertyValue, format);\n            }\n            return;\n        }\n\n        /** 特殊检查是否是具体类型序列化JavaBeanSerializer、 MapSerializer */\n        if (fieldInfo.unwrapped) {\n            if (valueSerializer instanceof JavaBeanSerializer) {\n                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) valueSerializer;\n                javaBeanSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, true);\n                return;\n            }\n\n            if (valueSerializer instanceof MapSerializer) {\n                MapSerializer mapSerializer = (MapSerializer) valueSerializer;\n                mapSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, true);\n                return;\n            }\n        }\n\n        /** 针对字段类型和属性值类型不一致退化成使用JavaBeanSerializer */\n        if ((features & SerializerFeature.WriteClassName.mask) != 0\n                && valueClass != fieldInfo.fieldClass\n                && JavaBeanSerializer.class.isInstance(valueSerializer)) {\n            ((JavaBeanSerializer) valueSerializer).write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, false);\n            return;\n        }\n\n        /** 使用值序列化类型处理 */\n        valueSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);\n    }\n```\n\n到此序列化成json字符串已经全部讲完了，接下来讲解反序列化内容，包含词法分析的代码。\n","slug":"Fastjson源码解析-序列化(六)-json特定序列化实现解析","published":1,"updated":"2018-10-12T02:18:40.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnbz4etl0018xat8p7ebd53m","content":"<h2 id=\"序列化回调接口实现分析\"><a href=\"#序列化回调接口实现分析\" class=\"headerlink\" title=\"序列化回调接口实现分析\"></a>序列化回调接口实现分析</h2><h3 id=\"特定序列化实现解析\"><a href=\"#特定序列化实现解析\" class=\"headerlink\" title=\"特定序列化实现解析\"></a>特定序列化实现解析</h3><h3 id=\"MapSerializer序列化\"><a href=\"#MapSerializer序列化\" class=\"headerlink\" title=\"MapSerializer序列化\"></a>MapSerializer序列化</h3><p>\b按照代码的顺序第一个分析到Map序列化器，内部调用write：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Object object</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Object fieldName</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Type fieldType</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    write(serializer, object, fieldName, fieldType, features, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入<code>MapSerializer#write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int, boolean)</code>方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Object object</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Object fieldName</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Type fieldType</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , <span class=\"keyword\">int</span> features </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , <span class=\"keyword\">boolean</span> unwrapped)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果map是null, 输出 \"null\" 字符串 */</span></span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;?, ?&gt; map = (Map&lt;?, ?&gt;) object;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mapSortFieldMask = SerializerFeature.MapSortField.mask;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((out.features &amp; mapSortFieldMask) != <span class=\"number\">0</span> || (features &amp; mapSortFieldMask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** JSONObject包装HashMap或者LinkedHashMap */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map <span class=\"keyword\">instanceof</span> JSONObject) &#123;</span><br><span class=\"line\">            map = ((JSONObject) map).getInnerMap();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((!(map <span class=\"keyword\">instanceof</span> SortedMap)) &amp;&amp; !(map <span class=\"keyword\">instanceof</span> LinkedHashMap)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                map = <span class=\"keyword\">new</span> TreeMap(map);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// skip</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (serializer.containsReference(object)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 处理对象引用，下文详细分析 */</span></span><br><span class=\"line\">        serializer.writeReference(object);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext parent = serializer.context;</span><br><span class=\"line\">    <span class=\"comment\">/** 创建当前新的序列化context */</span></span><br><span class=\"line\">    serializer.setContext(parent, object, fieldName, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!unwrapped) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">'&#123;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        serializer.incrementIndent();</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; preClazz = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ObjectSerializer preWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> first = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">            String typeKey = serializer.config.typeKey;</span><br><span class=\"line\">            Class&lt;?&gt; mapClass = map.getClass();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> containsKey = (mapClass == JSONObject.class || mapClass == HashMap.class || mapClass == LinkedHashMap.class) </span><br><span class=\"line\">                    &amp;&amp; map.containsKey(typeKey);</span><br><span class=\"line\">            <span class=\"comment\">/** 序列化的map不包含key=<span class=\"doctag\">@type</span>或者自定义值，则输出map的类名 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!containsKey) &#123;</span><br><span class=\"line\">                out.writeFieldName(typeKey);</span><br><span class=\"line\">                out.writeString(object.getClass().getName());</span><br><span class=\"line\">                first = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry entry : map.entrySet()) &#123;</span><br><span class=\"line\">            Object value = entry.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">            Object entryKey = entry.getKey();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历JSONSerializer的PropertyPreFilter拦截器，拦截key是否输出 */</span></span><br><span class=\"line\">                List&lt;PropertyPreFilter&gt; preFilters = serializer.propertyPreFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (preFilters != <span class=\"keyword\">null</span> &amp;&amp; preFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.applyName(serializer, object, (String) entryKey)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.applyName(serializer, object, strKey)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历PropertyPreFilter拦截器，拦截key是否输出 */</span></span><br><span class=\"line\">                List&lt;PropertyPreFilter&gt; preFilters = <span class=\"keyword\">this</span>.propertyPreFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (preFilters != <span class=\"keyword\">null</span> &amp;&amp; preFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.applyName(serializer, object, (String) entryKey)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.applyName(serializer, object, strKey)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历JSONSerializer的PropertyFilter拦截器，拦截key是否输出 */</span></span><br><span class=\"line\">                List&lt;PropertyFilter&gt; propertyFilters = serializer.propertyFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (propertyFilters != <span class=\"keyword\">null</span> &amp;&amp; propertyFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.apply(serializer, object, (String) entryKey, value)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.apply(serializer, object, strKey, value)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历PropertyFilter拦截器，拦截key是否输出 */</span></span><br><span class=\"line\">                List&lt;PropertyFilter&gt; propertyFilters = <span class=\"keyword\">this</span>.propertyFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (propertyFilters != <span class=\"keyword\">null</span> &amp;&amp; propertyFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.apply(serializer, object, (String) entryKey, value)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.apply(serializer, object, strKey, value)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历JSONSerializer的NameFilter拦截器，适用于key字符别名串转换 */</span></span><br><span class=\"line\">                List&lt;NameFilter&gt; nameFilters = serializer.nameFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nameFilters != <span class=\"keyword\">null</span> &amp;&amp; nameFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        entryKey = <span class=\"keyword\">this</span>.processKey(serializer, object, (String) entryKey, value);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        entryKey = <span class=\"keyword\">this</span>.processKey(serializer, object, strKey, value);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历NameFilter拦截器，适用于key字符串别名转换 */</span></span><br><span class=\"line\">                List&lt;NameFilter&gt; nameFilters = <span class=\"keyword\">this</span>.nameFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nameFilters != <span class=\"keyword\">null</span> &amp;&amp; nameFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        entryKey = <span class=\"keyword\">this</span>.processKey(serializer, object, (String) entryKey, value);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        entryKey = <span class=\"keyword\">this</span>.processKey(serializer, object, strKey, value);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 处理map序列化value拦截器, ValueFilter 和 ContextValueFilter */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                    value = <span class=\"keyword\">this</span>.processValue(serializer, <span class=\"keyword\">null</span>, object, (String) entryKey, value);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> objectOrArray = entryKey <span class=\"keyword\">instanceof</span> Map || entryKey <span class=\"keyword\">instanceof</span> Collection;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!objectOrArray) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        value = <span class=\"keyword\">this</span>.processValue(serializer, <span class=\"keyword\">null</span>, object, strKey, value);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果开启map为Null，不输出 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                String key = (String) entryKey;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 如果不是第一个属性字段增加分隔符 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!first) &#123;</span><br><span class=\"line\">                    out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">                    serializer.println();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">/** 输出key */</span></span><br><span class=\"line\">                out.writeFieldName(key, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!first) &#123;</span><br><span class=\"line\">                    out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 开启WriteNonStringKeyAsString, 将key做一次json串转换 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (out.isEnabled(NON_STRINGKEY_AS_STRING) &amp;&amp; !(entryKey <span class=\"keyword\">instanceof</span> Enum)) &#123;</span><br><span class=\"line\">                    String strEntryKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                    serializer.write(strEntryKey);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    serializer.write(entryKey);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                out.write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            first = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果value为空，输出空值 */</span></span><br><span class=\"line\">                out.writeNull();</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; clazz = value.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (clazz != preClazz) &#123;</span><br><span class=\"line\">                preClazz = clazz;</span><br><span class=\"line\">                preWriter = serializer.getObjectWriter(clazz);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)</span><br><span class=\"line\">                    &amp;&amp; preWriter <span class=\"keyword\">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class=\"line\">                Type valueType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fieldType <span class=\"keyword\">instanceof</span> ParameterizedType) &#123;</span><br><span class=\"line\">                    ParameterizedType parameterizedType = (ParameterizedType) fieldType;</span><br><span class=\"line\">                    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (actualTypeArguments.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        valueType = actualTypeArguments[<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 特殊处理泛型，这里假定泛型第二参数作为值的真实类型 */</span></span><br><span class=\"line\">                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) preWriter;</span><br><span class=\"line\">                javaBeanSerializer.writeNoneASM(serializer, value, entryKey, valueType, features);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 根据value类型的序列化器 序列化value */</span></span><br><span class=\"line\">                preWriter.write(serializer, value, entryKey, <span class=\"keyword\">null</span>, features);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        serializer.context = parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    serializer.decrementIdent();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.PrettyFormat) &amp;&amp; map.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        serializer.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!unwrapped) &#123;</span><br><span class=\"line\">        out.write(<span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>map序列化实现方法主要做了以下几件事情：</p>\n<ol>\n<li>处理对象引用，使用jdk的IdentityHashMap类严格判断对象\b严格相等。</li>\n<li>针对map的key和value执行拦截器操作。</li>\n<li>针对value的类型，查找value的class类型序列化输出。</li>\n</ol>\n<p>序列化map处理引用的逻辑在 <code>com.alibaba.fastjson.serializer.JSONSerializer#writeReference</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeReference</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">    SerialContext context = <span class=\"keyword\">this</span>.context;</span><br><span class=\"line\">    Object current = context.object;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果输出引用就是自己this, ref值为 @ */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == current) &#123;</span><br><span class=\"line\">        out.write(<span class=\"string\">\"&#123;\\\"$ref\\\":\\\"@\\\"&#125;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext parentContext = context.parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果输出引用就是父引用, ref值为 .. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parentContext != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == parentContext.object) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">\"&#123;\\\"$ref\\\":\\\"..\\\"&#125;\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext rootContext = context;</span><br><span class=\"line\">    <span class=\"comment\">/** 查找最顶层序列化context */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rootContext.parent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rootContext = rootContext.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == rootContext.object) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果最顶层引用就是自己this, ref值为 $*/</span></span><br><span class=\"line\">        out.write(<span class=\"string\">\"&#123;\\\"$ref\\\":\\\"$\\\"&#125;\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 常规java对象引用，直接输出 */</span></span><br><span class=\"line\">        out.write(<span class=\"string\">\"&#123;\\\"$ref\\\":\\\"\"</span>);</span><br><span class=\"line\">        out.write(references.get(object).toString());</span><br><span class=\"line\">        out.write(<span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ListSerializer序列化\"><a href=\"#ListSerializer序列化\" class=\"headerlink\" title=\"ListSerializer序列化\"></a>ListSerializer序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span></span></span><br><span class=\"line\"><span class=\"function\">                                                                                                   <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> writeClassName = serializer.out.isEnabled(SerializerFeature.WriteClassName)</span><br><span class=\"line\">            || SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName);</span><br><span class=\"line\"></span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    Type elementType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writeClassName) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取泛型字段真实类型 */</span></span><br><span class=\"line\">        elementType = TypeUtils.getCollectionItemType(fieldType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果集合对象为空并且开启WriteNullListAsEmpty特性, 输出[] */</span></span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;?&gt; list = (List&lt;?&gt;) object;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果集合对象元素为0, 输出[] */</span></span><br><span class=\"line\">        out.append(<span class=\"string\">\"[]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 创建当前新的序列化context */</span></span><br><span class=\"line\">    SerialContext context = serializer.context;</span><br><span class=\"line\">    serializer.setContext(context, object, fieldName, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ObjectSerializer itemSerializer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 判断是否开启json格式化 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">            out.append(<span class=\"string\">'['</span>);</span><br><span class=\"line\">            serializer.incrementIndent();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Object item : list) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    out.append(<span class=\"string\">','</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                serializer.println();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果存在引用，输出元素引用信息 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (serializer.containsReference(item)) &#123;</span><br><span class=\"line\">                        serializer.writeReference(item);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 通过元素包含的类型查找序列化实例 */</span></span><br><span class=\"line\">                        itemSerializer = serializer.getObjectWriter(item.getClass());</span><br><span class=\"line\">                        SerialContext itemContext = <span class=\"keyword\">new</span> SerialContext(context, object, fieldName, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                        serializer.context = itemContext;</span><br><span class=\"line\">                        <span class=\"comment\">/** 根据具体序列化实例输出 */</span></span><br><span class=\"line\">                        itemSerializer.write(serializer, item, i, elementType, features);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    serializer.out.writeNull();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            serializer.decrementIdent();</span><br><span class=\"line\">            serializer.println();</span><br><span class=\"line\">            out.append(<span class=\"string\">']'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        out.append(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = list.size(); i &lt; size; ++i) &#123;</span><br><span class=\"line\">            Object item = list.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.append(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                out.append(<span class=\"string\">\"null\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Class&lt;?&gt; clazz = item.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (clazz == Integer.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 元素类型如果是整数，直接输出 */</span></span><br><span class=\"line\">                    out.writeInt(((Integer) item).intValue());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz == Long.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 元素类型如果是长整数，直接输出并判断是否追加类型L */</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> val = ((Long) item).longValue();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (writeClassName) &#123;</span><br><span class=\"line\">                        out.writeLong(val);</span><br><span class=\"line\">                        out.write(<span class=\"string\">'L'</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        out.writeLong(val);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((SerializerFeature.DisableCircularReferenceDetect.mask &amp; features) != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 如果禁用循环引用检查，根据元素类型查找序列化实例输出 */</span></span><br><span class=\"line\">                        itemSerializer = serializer.getObjectWriter(item.getClass());</span><br><span class=\"line\">                        itemSerializer.write(serializer, item, i, elementType, features);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!out.disableCircularReferenceDetect) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 如果没有禁用循环引用检查，创建新的序列化上下文 */</span></span><br><span class=\"line\">                            SerialContext itemContext = <span class=\"keyword\">new</span> SerialContext(context, object, fieldName, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                            serializer.context = itemContext;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (serializer.containsReference(item)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 处理对象引用 */</span></span><br><span class=\"line\">                            serializer.writeReference(item);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 根据集合类型查找序列化实例处理，JavaBeanSerializer后面单独分析 */</span></span><br><span class=\"line\">                            itemSerializer = serializer.getObjectWriter(item.getClass());</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((SerializerFeature.WriteClassName.mask &amp; features) != <span class=\"number\">0</span></span><br><span class=\"line\">                                    &amp;&amp; itemSerializer <span class=\"keyword\">instanceof</span> JavaBeanSerializer)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) itemSerializer;</span><br><span class=\"line\">                                javaBeanSerializer.writeNoneASM(serializer, item, i, elementType, features);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                itemSerializer.write(serializer, item, i, elementType, features);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.append(<span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        serializer.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ListSerializer</code>序列化主要判断是否需要格式化json输出，对整型和长整型进行特殊取值，\b如果是对象类型根据class类别查找\b序列化实例处理，和hessian2源码实现原理类似。</p>\n<h3 id=\"DateCodec序列化\"><a href=\"#DateCodec序列化\" class=\"headerlink\" title=\"DateCodec序列化\"></a>DateCodec序列化</h3><p>因为日期序列化和前面已经分析的<code>MiscCodec</code>中<code>SimpleDateFormat</code>相近，在此不冗余分析，可以参考我已经添加的注释分析。</p>\n<h3 id=\"JavaBeanSerializer序列化\"><a href=\"#JavaBeanSerializer序列化\" class=\"headerlink\" title=\"JavaBeanSerializer序列化\"></a>JavaBeanSerializer序列化</h3><p>因为前面已经涵盖了绝大部分<code>fastjson</code>序列化源码分析，为了节省篇幅，\b我准备用一个较为复杂的序列化实现<code>JavaBeanSerializer</code>作为\b结束这章内容。</p>\n<p>在<code>SerializeConfig#getObjectWriter</code>中有一段逻辑<code>createJavaBeanSerializer</code>，我们针对进行细节分析 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ObjectSerializer <span class=\"title\">createJavaBeanSerializer</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 封装序列化clazz Bean，包含字段类型等等 */</span></span><br><span class=\"line\">    SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, <span class=\"keyword\">null</span>, propertyNamingStrategy, fieldBased);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanInfo.fields.length == <span class=\"number\">0</span> &amp;&amp; Iterable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果clazz是迭代器类型，使用MiscCodec序列化，会被序列化成数组 [,,,] */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> MiscCodec.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> createJavaBeanSerializer(beanInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先进<code>TypeUtils.buildBeanInfo</code>\b看看内部实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SerializeBeanInfo <span class=\"title\">buildBeanInfo</span><span class=\"params\">(Class&lt;?&gt; beanType //</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Map&lt;String,String&gt; aliasMap //</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , PropertyNamingStrategy propertyNamingStrategy //</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , <span class=\"keyword\">boolean</span> fieldBased //</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span>&#123;</span><br><span class=\"line\">    JSONType jsonType = TypeUtils.getAnnotation(beanType,JSONType.class);</span><br><span class=\"line\">    String[] orders = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> features;</span><br><span class=\"line\">    String typeName = <span class=\"keyword\">null</span>, typeKey = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jsonType != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        orders = jsonType.orders();</span><br><span class=\"line\"></span><br><span class=\"line\">        typeName = jsonType.typeName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(typeName.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            typeName = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        PropertyNamingStrategy jsonTypeNaming = jsonType.naming();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jsonTypeNaming != PropertyNamingStrategy.CamelCase) &#123;</span><br><span class=\"line\">            propertyNamingStrategy = jsonTypeNaming;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        features = SerializerFeature.of(jsonType.serialzeFeatures());</span><br><span class=\"line\">        <span class=\"comment\">/** 查找类型父类是否包含JSONType注解 */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Class&lt;?&gt; supperClass = beanType.getSuperclass()</span><br><span class=\"line\">            ; supperClass != <span class=\"keyword\">null</span> &amp;&amp; supperClass != Object.class</span><br><span class=\"line\">                ; supperClass = supperClass.getSuperclass())&#123;</span><br><span class=\"line\">            JSONType superJsonType = TypeUtils.getAnnotation(supperClass,JSONType.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(superJsonType == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            typeKey = superJsonType.typeKey();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(typeKey.length() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 查找类型实现的接口是否包含JSONType注解 */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Class&lt;?&gt; interfaceClass : beanType.getInterfaces())&#123;</span><br><span class=\"line\">            JSONType superJsonType = TypeUtils.getAnnotation(interfaceClass,JSONType.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(superJsonType != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                typeKey = superJsonType.typeKey();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(typeKey.length() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(typeKey != <span class=\"keyword\">null</span> &amp;&amp; typeKey.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            typeKey = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        features = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** fieldName,field ，先生成fieldName的快照，减少之后的findField的轮询 */</span></span><br><span class=\"line\">    Map&lt;String,Field&gt; fieldCacheMap = <span class=\"keyword\">new</span> HashMap&lt;String,Field&gt;();</span><br><span class=\"line\">    ParserConfig.parserAllFieldToCache(beanType, fieldCacheMap);</span><br><span class=\"line\">    List&lt;FieldInfo&gt; fieldInfoList = fieldBased</span><br><span class=\"line\">            ? computeGettersWithFieldBase(beanType, aliasMap, <span class=\"keyword\">false</span>, propertyNamingStrategy)</span><br><span class=\"line\">            : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, <span class=\"keyword\">false</span>, propertyNamingStrategy);</span><br><span class=\"line\">    FieldInfo[] fields = <span class=\"keyword\">new</span> FieldInfo[fieldInfoList.size()];</span><br><span class=\"line\">    fieldInfoList.toArray(fields);</span><br><span class=\"line\">    FieldInfo[] sortedFields;</span><br><span class=\"line\">    List&lt;FieldInfo&gt; sortedFieldList;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(orders != <span class=\"keyword\">null</span> &amp;&amp; orders.length != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/** computeGettersWithFieldBase基于字段解析,</span></span><br><span class=\"line\"><span class=\"comment\">         *  computeGetters基于方法解析+字段解析</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        sortedFieldList = fieldBased</span><br><span class=\"line\">                ? computeGettersWithFieldBase(beanType, aliasMap, <span class=\"keyword\">true</span>, propertyNamingStrategy) <span class=\"comment\">//</span></span><br><span class=\"line\">                : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, <span class=\"keyword\">true</span>, propertyNamingStrategy);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        sortedFieldList = <span class=\"keyword\">new</span> ArrayList&lt;FieldInfo&gt;(fieldInfoList);</span><br><span class=\"line\">        Collections.sort(sortedFieldList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sortedFields = <span class=\"keyword\">new</span> FieldInfo[sortedFieldList.size()];</span><br><span class=\"line\">    sortedFieldList.toArray(sortedFields);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Arrays.equals(sortedFields, fields))&#123;</span><br><span class=\"line\">        sortedFields = fields;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 封装对象的字段信息和方法信息 */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SerializeBeanInfo(beanType, jsonType, typeName, typeKey, features, fields, sortedFields);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在解析字段的时候有一个区别，computeGettersWithFieldBase基于字段解析而computeGetters基于方法解析(get + is 开头方法)+字段解析。因为两者的解析类似，这里只给出computeGettersWithFieldBase方法解析 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;FieldInfo&gt; <span class=\"title\">computeGettersWithFieldBase</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Class&lt;?&gt; clazz,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Map&lt;String,String&gt; aliasMap,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> sorted,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        PropertyNamingStrategy propertyNamingStrategy)</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String,FieldInfo&gt; fieldInfoMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;String,FieldInfo&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Class&lt;?&gt; currentClass = clazz; currentClass != <span class=\"keyword\">null</span>; currentClass = currentClass.getSuperclass())&#123;</span><br><span class=\"line\">        Field[] fields = currentClass.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"comment\">/** 遍历clazz所有字段，把字段信息封装成bean存储到fieldInfoMap中*/</span></span><br><span class=\"line\">        computeFields(currentClass, aliasMap, propertyNamingStrategy, fieldInfoMap, fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 主要处理字段有序的逻辑 */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getFieldInfos(clazz, sorted, fieldInfoMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看<code>computeFields</code>逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">computeFields</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Class&lt;?&gt; clazz,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Map&lt;String,String&gt; aliasMap,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        PropertyNamingStrategy propertyNamingStrategy,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Map&lt;String,FieldInfo&gt; fieldInfoMap,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Field[] fields)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Field field : fields)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 忽略静态字段类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Modifier.isStatic(field.getModifiers()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 查找当前字段是否包含JSONField注解 */</span></span><br><span class=\"line\">        JSONField fieldAnnotation = field.getAnnotation(JSONField.class);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ordinal = <span class=\"number\">0</span>, serialzeFeatures = <span class=\"number\">0</span>, parserFeatures = <span class=\"number\">0</span>;</span><br><span class=\"line\">        String propertyName = field.getName();</span><br><span class=\"line\">        String label = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fieldAnnotation != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 忽略不序列化的字段 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!fieldAnnotation.serialize())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/** 获取字段序列化顺序 */</span></span><br><span class=\"line\">            ordinal = fieldAnnotation.ordinal();</span><br><span class=\"line\">            serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());</span><br><span class=\"line\">            parserFeatures = Feature.of(fieldAnnotation.parseFeatures());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fieldAnnotation.name().length() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 属性名字采用JSONField注解上面的name */</span></span><br><span class=\"line\">                propertyName = fieldAnnotation.name();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fieldAnnotation.label().length() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                label = fieldAnnotation.label();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(aliasMap != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 查找是否包含属性别名的字段 */</span></span><br><span class=\"line\">            propertyName = aliasMap.get(propertyName);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(propertyName == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(propertyNamingStrategy != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 属性字段命名规则转换 */</span></span><br><span class=\"line\">            propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 封装解析类型的字段和类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!fieldInfoMap.containsKey(propertyName))&#123;</span><br><span class=\"line\">            FieldInfo fieldInfo = <span class=\"keyword\">new</span> FieldInfo(propertyName, <span class=\"keyword\">null</span>, field, clazz, <span class=\"keyword\">null</span>, ordinal, serialzeFeatures, parserFeatures,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>, fieldAnnotation, label);</span><br><span class=\"line\">            fieldInfoMap.put(propertyName, fieldInfo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>处理字段有序的逻辑<code>getFieldInfos</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;FieldInfo&gt; <span class=\"title\">getFieldInfos</span><span class=\"params\">(Class&lt;?&gt; clazz, <span class=\"keyword\">boolean</span> sorted, Map&lt;String,FieldInfo&gt; fieldInfoMap)</span></span>&#123;</span><br><span class=\"line\">     List&lt;FieldInfo&gt; fieldInfoList = <span class=\"keyword\">new</span> ArrayList&lt;FieldInfo&gt;();</span><br><span class=\"line\">     String[] orders = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     <span class=\"comment\">/** 查找clazz上面的JSONType注解 */</span></span><br><span class=\"line\">     JSONType annotation = TypeUtils.getAnnotation(clazz,JSONType.class);</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(annotation != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         orders = annotation.orders();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(orders != <span class=\"keyword\">null</span> &amp;&amp; orders.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">         LinkedHashMap&lt;String,FieldInfo&gt; map = <span class=\"keyword\">new</span> LinkedHashMap&lt;String,FieldInfo&gt;(fieldInfoList.size());</span><br><span class=\"line\">         <span class=\"keyword\">for</span>(FieldInfo field : fieldInfoMap.values())&#123;</span><br><span class=\"line\">             map.put(field.name, field);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">         <span class=\"comment\">/** 先把有序字段从map移除，并添加到有序列表fieldInfoList中 */</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span>(String item : orders)&#123;</span><br><span class=\"line\">             FieldInfo field = map.get(item);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(field != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                 fieldInfoList.add(field);</span><br><span class=\"line\">                 map.remove(item);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">/** 将map剩余元素追加到有序列表末尾 */</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span>(FieldInfo field : map.values())&#123;</span><br><span class=\"line\">             fieldInfoList.add(field);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">/** 如果注解没有要求顺序，全部添加map元素 */</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span>(FieldInfo fieldInfo : fieldInfoMap.values())&#123;</span><br><span class=\"line\">             fieldInfoList.add(fieldInfo);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(sorted)&#123;</span><br><span class=\"line\">             Collections.sort(fieldInfoList);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> fieldInfoList;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>我们在看下具体创建<code>JavaBeanSerializer</code>序列化逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ObjectSerializer <span class=\"title\">createJavaBeanSerializer</span><span class=\"params\">(SerializeBeanInfo beanInfo)</span> </span>&#123;</span><br><span class=\"line\">    JSONType jsonType = beanInfo.jsonType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> asm = <span class=\"keyword\">this</span>.asm &amp;&amp; !fieldBased;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jsonType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; serializerClass = jsonType.serializer();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (serializerClass != Void.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 实例化注解指定的类型 */</span></span><br><span class=\"line\">                Object seralizer = serializerClass.newInstance();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (seralizer <span class=\"keyword\">instanceof</span> ObjectSerializer) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (ObjectSerializer) seralizer;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// skip</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 注解显示指定不使用asm */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jsonType.asm() == <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            asm = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 注解显示开启WriteNonStringValueAsString、WriteEnumUsingToString</span></span><br><span class=\"line\"><span class=\"comment\">         * 和NotWriteDefaultValue不使用asm */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SerializerFeature feature : jsonType.serialzeFeatures()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (SerializerFeature.WriteNonStringValueAsString == feature <span class=\"comment\">//</span></span><br><span class=\"line\">                    || SerializerFeature.WriteEnumUsingToString == feature <span class=\"comment\">//</span></span><br><span class=\"line\">                    || SerializerFeature.NotWriteDefaultValue == feature) &#123;</span><br><span class=\"line\">                asm = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; clazz = beanInfo.beanType;</span><br><span class=\"line\">    <span class=\"comment\">/** 非public类型，直接使用JavaBeanSerializer序列化 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Modifier.isPublic(beanInfo.beanType.getModifiers())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JavaBeanSerializer(beanInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ... 省略asm判断检查</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (asm) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用asm字节码库序列化，后面单独列一个章节分析asm源码 */</span></span><br><span class=\"line\">            ObjectSerializer asmSerializer = createASMSerializer(beanInfo);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (asmSerializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> asmSerializer;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// skip</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassFormatError e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// skip</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// skip</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"create asm serializer error, class \"</span></span><br><span class=\"line\">                    + clazz, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 默认使用JavaBeanSerializer 序列化类 */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JavaBeanSerializer(beanInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>O\bK, 一切就绪，接下来有请<code>JavaBeanSerializer</code>序列化实现登场：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  Object object, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  Object fieldName, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  Type fieldType, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">int</span> features,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">boolean</span> unwrapped</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果开启循环引用检查，输出引用并返回 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writeReference(serializer, object, features)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> FieldSerializer[] getters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.sortField) &#123;</span><br><span class=\"line\">        getters = <span class=\"keyword\">this</span>.sortedGetters;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        getters = <span class=\"keyword\">this</span>.getters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext parent = serializer.context;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.beanInfo.beanType.isEnum()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 针对非枚举类型，创建新的上下文 */</span></span><br><span class=\"line\">        serializer.setContext(parent, object, fieldName, <span class=\"keyword\">this</span>.beanInfo.features, features);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> writeAsArray = isWriteAsArray(serializer, features);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> startSeperator = writeAsArray ? <span class=\"string\">'['</span> : <span class=\"string\">'&#123;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> endSeperator = writeAsArray ? <span class=\"string\">']'</span> : <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!unwrapped) &#123;</span><br><span class=\"line\">            out.append(startSeperator);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getters.length &gt; <span class=\"number\">0</span> &amp;&amp; out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">            serializer.incrementIndent();</span><br><span class=\"line\">            serializer.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> commaFlag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.beanInfo.features &amp; SerializerFeature.WriteClassName.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">            ||(features &amp; SerializerFeature.WriteClassName.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">            || serializer.isWriteClassName(fieldType, object)) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; objClass = object.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Type type;</span><br><span class=\"line\">            <span class=\"comment\">/** 获取字段的泛型类型 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (objClass != fieldType &amp;&amp; fieldType <span class=\"keyword\">instanceof</span> WildcardType) &#123;</span><br><span class=\"line\">                type = TypeUtils.getClass(fieldType);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                type = fieldType;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (objClass != type) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 输出字段类型名字 */</span></span><br><span class=\"line\">                writeClassName(serializer, beanInfo.typeKey, object);</span><br><span class=\"line\">                commaFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span> seperator = commaFlag ? <span class=\"string\">','</span> : <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> directWritePrefix = out.quoteFieldNames &amp;&amp; !out.useSingleQuotes;</span><br><span class=\"line\">        <span class=\"comment\">/** 触发序列化BeforeFilter拦截器 */</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> newSeperator = <span class=\"keyword\">this</span>.writeBefore(serializer, object, seperator);</span><br><span class=\"line\">        commaFlag = newSeperator == <span class=\"string\">','</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> skipTransient = out.isEnabled(SerializerFeature.SkipTransientField);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> ignoreNonFieldGetter = out.isEnabled(SerializerFeature.IgnoreNonFieldGetter);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getters.length; ++i) &#123;</span><br><span class=\"line\">            FieldSerializer fieldSerializer = getters[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            Field field = fieldSerializer.fieldInfo.field;</span><br><span class=\"line\">            FieldInfo fieldInfo = fieldSerializer.fieldInfo;</span><br><span class=\"line\">            String fieldInfoName = fieldInfo.name;</span><br><span class=\"line\">            Class&lt;?&gt; fieldClass = fieldInfo.fieldClass;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 忽略配置了transient关键字的字段 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (skipTransient) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fieldInfo.fieldTransient) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 目前看到注解方法上面 field = null */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ignoreNonFieldGetter) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> notApply = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">/** 触发字段PropertyPreFilter拦截器 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!<span class=\"keyword\">this</span>.applyName(serializer, object, fieldInfoName))</span><br><span class=\"line\">                || !<span class=\"keyword\">this</span>.applyLabel(serializer, fieldInfo.label)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (writeAsArray) &#123;</span><br><span class=\"line\">                    notApply = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** ??? */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (beanInfo.typeKey != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; fieldInfoName.equals(beanInfo.typeKey)</span><br><span class=\"line\">                    &amp;&amp; serializer.isWriteClassName(fieldType, object)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Object propertyValue;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (notApply) &#123;</span><br><span class=\"line\">                propertyValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    propertyValue = fieldSerializer.getPropertyValueDirect(object);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InvocationTargetException ex) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.IgnoreErrorGetter)) &#123;</span><br><span class=\"line\">                        propertyValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 针对属性名字和属性值 触发PropertyFilter拦截器 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.apply(serializer, object, fieldInfoName, propertyValue)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldClass == String.class &amp;&amp; <span class=\"string\">\"trim\"</span>.equals(fieldInfo.format)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 剔除字符串两边空格 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (propertyValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    propertyValue = ((String) propertyValue).trim();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String key = fieldInfoName;</span><br><span class=\"line\">            <span class=\"comment\">/** 触发属性名字NameFilter拦截器 */</span></span><br><span class=\"line\">            key = <span class=\"keyword\">this</span>.processKey(serializer, object, key, propertyValue);</span><br><span class=\"line\"></span><br><span class=\"line\">            Object originalValue = propertyValue;</span><br><span class=\"line\">            <span class=\"comment\">/** 触发属性值ContextValueFilter拦截器 */</span></span><br><span class=\"line\">            propertyValue = <span class=\"keyword\">this</span>.processValue(serializer, fieldSerializer.fieldContext, object, fieldInfoName,</span><br><span class=\"line\">                                                    propertyValue);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (propertyValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> serialzeFeatures = fieldInfo.serialzeFeatures;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (beanInfo.jsonType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    serialzeFeatures |= SerializerFeature.of(beanInfo.jsonType.serialzeFeatures());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// beanInfo.jsonType</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fieldClass == Boolean.class) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> defaultMask = SerializerFeature.WriteNullBooleanAsFalse.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class=\"number\">0</span> &amp;&amp; (out.features &amp; mask) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"comment\">/** 针对Boolean类型，值为空，输出false */</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((serialzeFeatures &amp; defaultMask) != <span class=\"number\">0</span> || (out.features &amp; defaultMask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        propertyValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == String.class) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> defaultMask = SerializerFeature.WriteNullStringAsEmpty.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class=\"number\">0</span> &amp;&amp; (out.features &amp; mask) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((serialzeFeatures &amp; defaultMask) != <span class=\"number\">0</span> || (out.features &amp; defaultMask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 针对string类型，值为空，输出空串\"\" */</span></span><br><span class=\"line\">                        propertyValue = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Number.class.isAssignableFrom(fieldClass)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> defaultMask = SerializerFeature.WriteNullNumberAsZero.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class=\"number\">0</span> &amp;&amp; (out.features &amp; mask) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((serialzeFeatures &amp; defaultMask) != <span class=\"number\">0</span> || (out.features &amp; defaultMask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 针对数字类型，值为空，输出0 */</span></span><br><span class=\"line\">                        propertyValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Collection.class.isAssignableFrom(fieldClass)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> defaultMask = SerializerFeature.WriteNullListAsEmpty.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class=\"number\">0</span> &amp;&amp; (out.features &amp; mask) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((serialzeFeatures &amp; defaultMask) != <span class=\"number\">0</span> || (out.features &amp; defaultMask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        propertyValue = Collections.emptyList();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">/** 针对值为null，配置序列化不输出特性，则输出json字符串排除这些属性 */</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((!writeAsArray) &amp;&amp; (!fieldSerializer.writeNull) &amp;&amp; !out.isEnabled(SerializerFeature.WriteMapNullValue.mask))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 忽略序列化配置为不输出默认值的字段 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (propertyValue != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; (out.notWriteDefaultValue</span><br><span class=\"line\">                    || (fieldInfo.serialzeFeatures &amp; SerializerFeature.NotWriteDefaultValue.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">                    || (beanInfo.features &amp; SerializerFeature.NotWriteDefaultValue.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">                    )) &#123;</span><br><span class=\"line\">                Class&lt;?&gt; fieldCLass = fieldInfo.fieldClass;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">byte</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Byte</span><br><span class=\"line\">                    &amp;&amp; ((Byte) propertyValue).byteValue() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">short</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Short</span><br><span class=\"line\">                           &amp;&amp; ((Short) propertyValue).shortValue() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">int</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Integer</span><br><span class=\"line\">                           &amp;&amp; ((Integer) propertyValue).intValue() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">long</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Long</span><br><span class=\"line\">                           &amp;&amp; ((Long) propertyValue).longValue() == <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">float</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Float</span><br><span class=\"line\">                           &amp;&amp; ((Float) propertyValue).floatValue() == <span class=\"number\">0F</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">double</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Double</span><br><span class=\"line\">                           &amp;&amp; ((Double) propertyValue).doubleValue() == <span class=\"number\">0</span>D) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">boolean</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Boolean</span><br><span class=\"line\">                           &amp;&amp; !((Boolean) propertyValue).booleanValue()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (commaFlag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fieldInfo.unwrapped</span><br><span class=\"line\">                        &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Map</span><br><span class=\"line\">                        &amp;&amp; ((Map) propertyValue).size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">                    serializer.println();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 应用拦截器后变更了key */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key != fieldInfoName) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!writeAsArray) &#123;</span><br><span class=\"line\">                    out.writeFieldName(key, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                serializer.write(propertyValue);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (originalValue != propertyValue) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!writeAsArray) &#123;</span><br><span class=\"line\">                    fieldSerializer.writePrefix(serializer);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">/** 应用拦截器后变更了属性值，查找value的class类型进行序列化 */</span></span><br><span class=\"line\">                serializer.write(propertyValue);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!writeAsArray) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 输出属性字段名称 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!fieldInfo.unwrapped) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (directWritePrefix) &#123;</span><br><span class=\"line\">                            out.write(fieldInfo.name_chars, <span class=\"number\">0</span>, fieldInfo.name_chars.length);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            fieldSerializer.writePrefix(serializer);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!writeAsArray) &#123;</span><br><span class=\"line\">                    JSONField fieldAnnotation = fieldInfo.getAnnotation();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fieldClass == String.class &amp;&amp; (fieldAnnotation == <span class=\"keyword\">null</span> || fieldAnnotation.serializeUsing() == Void.class)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/** 处理针对字符串类型属性值输出 */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (propertyValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((out.features &amp; SerializerFeature.WriteNullStringAsEmpty.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">                                || (fieldSerializer.features &amp; SerializerFeature.WriteNullStringAsEmpty.mask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                out.writeString(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                out.writeNull();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            String propertyValueString = (String) propertyValue;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (out.useSingleQuotes) &#123;</span><br><span class=\"line\">                                out.writeStringWithSingleQuote(propertyValueString);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                out.writeStringWithDoubleQuote(propertyValueString, (<span class=\"keyword\">char</span>) <span class=\"number\">0</span>);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fieldInfo.unwrapped</span><br><span class=\"line\">                                &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Map</span><br><span class=\"line\">                                &amp;&amp; ((Map) propertyValue).size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            commaFlag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        fieldSerializer.writeValue(serializer, propertyValue);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 基于数组形式输出 [,,,] */</span></span><br><span class=\"line\">                    fieldSerializer.writeValue(serializer, propertyValue);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> fieldUnwrappedNull = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldInfo.unwrapped</span><br><span class=\"line\">                    &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Map) &#123;</span><br><span class=\"line\">                Map map = ((Map) propertyValue);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    fieldUnwrappedNull = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> hasNotNull = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Object value : map.values()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            hasNotNull = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!hasNotNull) &#123;</span><br><span class=\"line\">                        fieldUnwrappedNull = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!fieldUnwrappedNull) &#123;</span><br><span class=\"line\">                commaFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 触发序列化AfterFilter拦截器 */</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.writeAfter(serializer, object, commaFlag ? <span class=\"string\">','</span> : <span class=\"string\">'\\0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getters.length &gt; <span class=\"number\">0</span> &amp;&amp; out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">            serializer.decrementIdent();</span><br><span class=\"line\">            serializer.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!unwrapped) &#123;</span><br><span class=\"line\">            out.append(endSeperator);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        String errorMessage = <span class=\"string\">\"write javaBean error, fastjson version \"</span> + JSON.VERSION;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            errorMessage += <span class=\"string\">\", class \"</span> + object.getClass().getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fieldName != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            errorMessage += <span class=\"string\">\", fieldName : \"</span> + fieldName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getMessage() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            errorMessage += (<span class=\"string\">\", \"</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(errorMessage, e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        serializer.context = parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在序列化过程中我们重点关注一下序列化属性值的逻辑<code>fieldSerializer.writeValue(serializer, propertyValue)</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeValue</span><span class=\"params\">(JSONSerializer serializer, Object propertyValue)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (runtimeInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; runtimeFieldClass;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取字段的类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propertyValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            runtimeFieldClass = <span class=\"keyword\">this</span>.fieldInfo.fieldClass;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            runtimeFieldClass = propertyValue.getClass();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObjectSerializer fieldSerializer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        JSONField fieldAnnotation = fieldInfo.getAnnotation();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 创建并初始化字段指定序列化类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fieldAnnotation != <span class=\"keyword\">null</span> &amp;&amp; fieldAnnotation.serializeUsing() != Void.class) &#123;</span><br><span class=\"line\">            fieldSerializer = (ObjectSerializer) fieldAnnotation.serializeUsing().newInstance();</span><br><span class=\"line\">            serializeUsing = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 针对format和primitive类型创建序列化类型 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (format != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (runtimeFieldClass == <span class=\"keyword\">double</span>.class || runtimeFieldClass == Double.class) &#123;</span><br><span class=\"line\">                    fieldSerializer = <span class=\"keyword\">new</span> DoubleSerializer(format);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (runtimeFieldClass == <span class=\"keyword\">float</span>.class || runtimeFieldClass == Float.class) &#123;</span><br><span class=\"line\">                    fieldSerializer = <span class=\"keyword\">new</span> FloatCodec(format);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldSerializer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 根据属性值class类型查找序列化类型 */</span></span><br><span class=\"line\">                fieldSerializer = serializer.getObjectWriter(runtimeFieldClass);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 封装序列化类型和属性值的类型 */</span></span><br><span class=\"line\">        runtimeInfo = <span class=\"keyword\">new</span> RuntimeSerializerInfo(fieldSerializer, runtimeFieldClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> RuntimeSerializerInfo runtimeInfo = <span class=\"keyword\">this</span>.runtimeInfo;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fieldFeatures = disableCircularReferenceDetect?</span><br><span class=\"line\">            (fieldInfo.serialzeFeatures|SerializerFeature.DisableCircularReferenceDetect.getMask()):fieldInfo.serialzeFeatures;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (propertyValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        SerializeWriter out  = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fieldInfo.fieldClass == Object.class</span><br><span class=\"line\">                &amp;&amp; out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) &#123;</span><br><span class=\"line\">            out.writeNull();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 针对属性值为null的情况处理 */</span></span><br><span class=\"line\">        Class&lt;?&gt; runtimeFieldClass = runtimeInfo.runtimeFieldClass;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Number.class.isAssignableFrom(runtimeFieldClass)) &#123;</span><br><span class=\"line\">            out.writeNull(features, SerializerFeature.WriteNullNumberAsZero.mask);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (String.class == runtimeFieldClass) &#123;</span><br><span class=\"line\">            out.writeNull(features, SerializerFeature.WriteNullStringAsEmpty.mask);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Boolean.class == runtimeFieldClass) &#123;</span><br><span class=\"line\">            out.writeNull(features, SerializerFeature.WriteNullBooleanAsFalse.mask);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Collection.class.isAssignableFrom(runtimeFieldClass)) &#123;</span><br><span class=\"line\">            out.writeNull(features, SerializerFeature.WriteNullListAsEmpty.mask);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObjectSerializer fieldSerializer = runtimeInfo.fieldSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES))</span><br><span class=\"line\">                &amp;&amp; fieldSerializer <span class=\"keyword\">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class=\"line\">            out.writeNull();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 序列化null对象 */</span></span><br><span class=\"line\">        fieldSerializer.write(serializer, <span class=\"keyword\">null</span>, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fieldInfo.isEnum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writeEnumUsingName) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用枚举名字序列化 */</span></span><br><span class=\"line\">            serializer.out.writeString(((Enum&lt;?&gt;) propertyValue).name());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writeEnumUsingToString) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用枚举toString字符串序列化 */</span></span><br><span class=\"line\">            serializer.out.writeString(((Enum&lt;?&gt;) propertyValue).toString());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Class&lt;?&gt; valueClass = propertyValue.getClass();</span><br><span class=\"line\">    ObjectSerializer valueSerializer;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (valueClass == runtimeInfo.runtimeFieldClass || serializeUsing) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 使用序列化注解指定的序列化类型 */</span></span><br><span class=\"line\">        valueSerializer = runtimeInfo.fieldSerializer;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        valueSerializer = serializer.getObjectWriter(valueClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (format != <span class=\"keyword\">null</span> &amp;&amp; !(valueSerializer <span class=\"keyword\">instanceof</span> DoubleSerializer || valueSerializer <span class=\"keyword\">instanceof</span> FloatCodec)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (valueSerializer <span class=\"keyword\">instanceof</span> ContextObjectSerializer) &#123;</span><br><span class=\"line\">            ((ContextObjectSerializer) valueSerializer).write(serializer, propertyValue, <span class=\"keyword\">this</span>.fieldContext);    </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            serializer.writeWithFormat(propertyValue, format);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 特殊检查是否是具体类型序列化JavaBeanSerializer、 MapSerializer */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fieldInfo.unwrapped) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (valueSerializer <span class=\"keyword\">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class=\"line\">            JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) valueSerializer;</span><br><span class=\"line\">            javaBeanSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (valueSerializer <span class=\"keyword\">instanceof</span> MapSerializer) &#123;</span><br><span class=\"line\">            MapSerializer mapSerializer = (MapSerializer) valueSerializer;</span><br><span class=\"line\">            mapSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 针对字段类型和属性值类型不一致退化成使用JavaBeanSerializer */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((features &amp; SerializerFeature.WriteClassName.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">            &amp;&amp; valueClass != fieldInfo.fieldClass</span><br><span class=\"line\">            &amp;&amp; JavaBeanSerializer.class.isInstance(valueSerializer)) &#123;</span><br><span class=\"line\">        ((JavaBeanSerializer) valueSerializer).write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 使用值序列化类型处理 */</span></span><br><span class=\"line\">    valueSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此序列化成json字符串已经全部讲完了，接下来讲解反序列化内容，包含词法分析的代码。</p>\n","site":{"data":{"contact":[{"title":"github","icon":"icon-github","link":"https://github.com/zonghaishang"},{"title":"email","icon":"icon-email","link":"mailto:yiji@apache.org"},{"title":"rss","icon":"icon-rss","link":"https://zonghaishang.github.io/"}]}},"excerpt":"","more":"<h2 id=\"序列化回调接口实现分析\"><a href=\"#序列化回调接口实现分析\" class=\"headerlink\" title=\"序列化回调接口实现分析\"></a>序列化回调接口实现分析</h2><h3 id=\"特定序列化实现解析\"><a href=\"#特定序列化实现解析\" class=\"headerlink\" title=\"特定序列化实现解析\"></a>特定序列化实现解析</h3><h3 id=\"MapSerializer序列化\"><a href=\"#MapSerializer序列化\" class=\"headerlink\" title=\"MapSerializer序列化\"></a>MapSerializer序列化</h3><p>\b按照代码的顺序第一个分析到Map序列化器，内部调用write：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Object object</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Object fieldName</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Type fieldType</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , <span class=\"keyword\">int</span> features)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    write(serializer, object, fieldName, fieldType, features, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>进入<code>MapSerializer#write(com.alibaba.fastjson.serializer.JSONSerializer, java.lang.Object, java.lang.Object, java.lang.reflect.Type, int, boolean)</code>方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Object object</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Object fieldName</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Type fieldType</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , <span class=\"keyword\">int</span> features </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , <span class=\"keyword\">boolean</span> unwrapped)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果map是null, 输出 \"null\" 字符串 */</span></span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Map&lt;?, ?&gt; map = (Map&lt;?, ?&gt;) object;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mapSortFieldMask = SerializerFeature.MapSortField.mask;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((out.features &amp; mapSortFieldMask) != <span class=\"number\">0</span> || (features &amp; mapSortFieldMask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** JSONObject包装HashMap或者LinkedHashMap */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map <span class=\"keyword\">instanceof</span> JSONObject) &#123;</span><br><span class=\"line\">            map = ((JSONObject) map).getInnerMap();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((!(map <span class=\"keyword\">instanceof</span> SortedMap)) &amp;&amp; !(map <span class=\"keyword\">instanceof</span> LinkedHashMap)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                map = <span class=\"keyword\">new</span> TreeMap(map);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// skip</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (serializer.containsReference(object)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 处理对象引用，下文详细分析 */</span></span><br><span class=\"line\">        serializer.writeReference(object);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext parent = serializer.context;</span><br><span class=\"line\">    <span class=\"comment\">/** 创建当前新的序列化context */</span></span><br><span class=\"line\">    serializer.setContext(parent, object, fieldName, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!unwrapped) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">'&#123;'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        serializer.incrementIndent();</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; preClazz = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        ObjectSerializer preWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> first = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.WriteClassName)) &#123;</span><br><span class=\"line\">            String typeKey = serializer.config.typeKey;</span><br><span class=\"line\">            Class&lt;?&gt; mapClass = map.getClass();</span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> containsKey = (mapClass == JSONObject.class || mapClass == HashMap.class || mapClass == LinkedHashMap.class) </span><br><span class=\"line\">                    &amp;&amp; map.containsKey(typeKey);</span><br><span class=\"line\">            <span class=\"comment\">/** 序列化的map不包含key=<span class=\"doctag\">@type</span>或者自定义值，则输出map的类名 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!containsKey) &#123;</span><br><span class=\"line\">                out.writeFieldName(typeKey);</span><br><span class=\"line\">                out.writeString(object.getClass().getName());</span><br><span class=\"line\">                first = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry entry : map.entrySet()) &#123;</span><br><span class=\"line\">            Object value = entry.getValue();</span><br><span class=\"line\"></span><br><span class=\"line\">            Object entryKey = entry.getKey();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历JSONSerializer的PropertyPreFilter拦截器，拦截key是否输出 */</span></span><br><span class=\"line\">                List&lt;PropertyPreFilter&gt; preFilters = serializer.propertyPreFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (preFilters != <span class=\"keyword\">null</span> &amp;&amp; preFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.applyName(serializer, object, (String) entryKey)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.applyName(serializer, object, strKey)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历PropertyPreFilter拦截器，拦截key是否输出 */</span></span><br><span class=\"line\">                List&lt;PropertyPreFilter&gt; preFilters = <span class=\"keyword\">this</span>.propertyPreFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (preFilters != <span class=\"keyword\">null</span> &amp;&amp; preFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.applyName(serializer, object, (String) entryKey)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.applyName(serializer, object, strKey)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历JSONSerializer的PropertyFilter拦截器，拦截key是否输出 */</span></span><br><span class=\"line\">                List&lt;PropertyFilter&gt; propertyFilters = serializer.propertyFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (propertyFilters != <span class=\"keyword\">null</span> &amp;&amp; propertyFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.apply(serializer, object, (String) entryKey, value)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.apply(serializer, object, strKey, value)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历PropertyFilter拦截器，拦截key是否输出 */</span></span><br><span class=\"line\">                List&lt;PropertyFilter&gt; propertyFilters = <span class=\"keyword\">this</span>.propertyFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (propertyFilters != <span class=\"keyword\">null</span> &amp;&amp; propertyFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.apply(serializer, object, (String) entryKey, value)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.apply(serializer, object, strKey, value)) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历JSONSerializer的NameFilter拦截器，适用于key字符别名串转换 */</span></span><br><span class=\"line\">                List&lt;NameFilter&gt; nameFilters = serializer.nameFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nameFilters != <span class=\"keyword\">null</span> &amp;&amp; nameFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        entryKey = <span class=\"keyword\">this</span>.processKey(serializer, object, (String) entryKey, value);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        entryKey = <span class=\"keyword\">this</span>.processKey(serializer, object, strKey, value);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 遍历NameFilter拦截器，适用于key字符串别名转换 */</span></span><br><span class=\"line\">                List&lt;NameFilter&gt; nameFilters = <span class=\"keyword\">this</span>.nameFilters;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nameFilters != <span class=\"keyword\">null</span> &amp;&amp; nameFilters.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                        entryKey = <span class=\"keyword\">this</span>.processKey(serializer, object, (String) entryKey, value);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (entryKey.getClass().isPrimitive() || entryKey <span class=\"keyword\">instanceof</span> Number) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        entryKey = <span class=\"keyword\">this</span>.processKey(serializer, object, strKey, value);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 处理map序列化value拦截器, ValueFilter 和 ContextValueFilter */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (entryKey == <span class=\"keyword\">null</span> || entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                    value = <span class=\"keyword\">this</span>.processValue(serializer, <span class=\"keyword\">null</span>, object, (String) entryKey, value);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> objectOrArray = entryKey <span class=\"keyword\">instanceof</span> Map || entryKey <span class=\"keyword\">instanceof</span> Collection;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!objectOrArray) &#123;</span><br><span class=\"line\">                        String strKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                        value = <span class=\"keyword\">this</span>.processValue(serializer, <span class=\"keyword\">null</span>, object, strKey, value);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果开启map为Null，不输出 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (entryKey <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">                String key = (String) entryKey;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 如果不是第一个属性字段增加分隔符 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!first) &#123;</span><br><span class=\"line\">                    out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">                    serializer.println();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">/** 输出key */</span></span><br><span class=\"line\">                out.writeFieldName(key, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!first) &#123;</span><br><span class=\"line\">                    out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 开启WriteNonStringKeyAsString, 将key做一次json串转换 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (out.isEnabled(NON_STRINGKEY_AS_STRING) &amp;&amp; !(entryKey <span class=\"keyword\">instanceof</span> Enum)) &#123;</span><br><span class=\"line\">                    String strEntryKey = JSON.toJSONString(entryKey);</span><br><span class=\"line\">                    serializer.write(strEntryKey);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    serializer.write(entryKey);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                out.write(<span class=\"string\">':'</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            first = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 如果value为空，输出空值 */</span></span><br><span class=\"line\">                out.writeNull();</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Class&lt;?&gt; clazz = value.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (clazz != preClazz) &#123;</span><br><span class=\"line\">                preClazz = clazz;</span><br><span class=\"line\">                preWriter = serializer.getObjectWriter(clazz);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName)</span><br><span class=\"line\">                    &amp;&amp; preWriter <span class=\"keyword\">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class=\"line\">                Type valueType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fieldType <span class=\"keyword\">instanceof</span> ParameterizedType) &#123;</span><br><span class=\"line\">                    ParameterizedType parameterizedType = (ParameterizedType) fieldType;</span><br><span class=\"line\">                    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (actualTypeArguments.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                        valueType = actualTypeArguments[<span class=\"number\">1</span>];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">/** 特殊处理泛型，这里假定泛型第二参数作为值的真实类型 */</span></span><br><span class=\"line\">                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) preWriter;</span><br><span class=\"line\">                javaBeanSerializer.writeNoneASM(serializer, value, entryKey, valueType, features);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 根据value类型的序列化器 序列化value */</span></span><br><span class=\"line\">                preWriter.write(serializer, value, entryKey, <span class=\"keyword\">null</span>, features);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        serializer.context = parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    serializer.decrementIdent();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.PrettyFormat) &amp;&amp; map.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        serializer.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!unwrapped) &#123;</span><br><span class=\"line\">        out.write(<span class=\"string\">'&#125;'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>map序列化实现方法主要做了以下几件事情：</p>\n<ol>\n<li>处理对象引用，使用jdk的IdentityHashMap类严格判断对象\b严格相等。</li>\n<li>针对map的key和value执行拦截器操作。</li>\n<li>针对value的类型，查找value的class类型序列化输出。</li>\n</ol>\n<p>序列化map处理引用的逻辑在 <code>com.alibaba.fastjson.serializer.JSONSerializer#writeReference</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeReference</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">    SerialContext context = <span class=\"keyword\">this</span>.context;</span><br><span class=\"line\">    Object current = context.object;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果输出引用就是自己this, ref值为 @ */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == current) &#123;</span><br><span class=\"line\">        out.write(<span class=\"string\">\"&#123;\\\"$ref\\\":\\\"@\\\"&#125;\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext parentContext = context.parent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果输出引用就是父引用, ref值为 .. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parentContext != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == parentContext.object) &#123;</span><br><span class=\"line\">            out.write(<span class=\"string\">\"&#123;\\\"$ref\\\":\\\"..\\\"&#125;\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext rootContext = context;</span><br><span class=\"line\">    <span class=\"comment\">/** 查找最顶层序列化context */</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rootContext.parent == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        rootContext = rootContext.parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == rootContext.object) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果最顶层引用就是自己this, ref值为 $*/</span></span><br><span class=\"line\">        out.write(<span class=\"string\">\"&#123;\\\"$ref\\\":\\\"$\\\"&#125;\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 常规java对象引用，直接输出 */</span></span><br><span class=\"line\">        out.write(<span class=\"string\">\"&#123;\\\"$ref\\\":\\\"\"</span>);</span><br><span class=\"line\">        out.write(references.get(object).toString());</span><br><span class=\"line\">        out.write(<span class=\"string\">\"\\\"&#125;\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ListSerializer序列化\"><a href=\"#ListSerializer序列化\" class=\"headerlink\" title=\"ListSerializer序列化\"></a>ListSerializer序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, Object object, Object fieldName, Type fieldType, <span class=\"keyword\">int</span> features)</span></span></span><br><span class=\"line\"><span class=\"function\">                                                                                                   <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> writeClassName = serializer.out.isEnabled(SerializerFeature.WriteClassName)</span><br><span class=\"line\">            || SerializerFeature.isEnabled(features, SerializerFeature.WriteClassName);</span><br><span class=\"line\"></span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    Type elementType = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writeClassName) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取泛型字段真实类型 */</span></span><br><span class=\"line\">        elementType = TypeUtils.getCollectionItemType(fieldType);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果集合对象为空并且开启WriteNullListAsEmpty特性, 输出[] */</span></span><br><span class=\"line\">        out.writeNull(SerializerFeature.WriteNullListAsEmpty);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;?&gt; list = (List&lt;?&gt;) object;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果集合对象元素为0, 输出[] */</span></span><br><span class=\"line\">        out.append(<span class=\"string\">\"[]\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 创建当前新的序列化context */</span></span><br><span class=\"line\">    SerialContext context = serializer.context;</span><br><span class=\"line\">    serializer.setContext(context, object, fieldName, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ObjectSerializer itemSerializer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 判断是否开启json格式化 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">            out.append(<span class=\"string\">'['</span>);</span><br><span class=\"line\">            serializer.incrementIndent();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Object item : list) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    out.append(<span class=\"string\">','</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                serializer.println();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (item != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 如果存在引用，输出元素引用信息 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (serializer.containsReference(item)) &#123;</span><br><span class=\"line\">                        serializer.writeReference(item);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 通过元素包含的类型查找序列化实例 */</span></span><br><span class=\"line\">                        itemSerializer = serializer.getObjectWriter(item.getClass());</span><br><span class=\"line\">                        SerialContext itemContext = <span class=\"keyword\">new</span> SerialContext(context, object, fieldName, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                        serializer.context = itemContext;</span><br><span class=\"line\">                        <span class=\"comment\">/** 根据具体序列化实例输出 */</span></span><br><span class=\"line\">                        itemSerializer.write(serializer, item, i, elementType, features);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    serializer.out.writeNull();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            serializer.decrementIdent();</span><br><span class=\"line\">            serializer.println();</span><br><span class=\"line\">            out.append(<span class=\"string\">']'</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        out.append(<span class=\"string\">'['</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, size = list.size(); i &lt; size; ++i) &#123;</span><br><span class=\"line\">            Object item = list.get(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                out.append(<span class=\"string\">','</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (item == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                out.append(<span class=\"string\">\"null\"</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Class&lt;?&gt; clazz = item.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (clazz == Integer.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 元素类型如果是整数，直接输出 */</span></span><br><span class=\"line\">                    out.writeInt(((Integer) item).intValue());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (clazz == Long.class) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 元素类型如果是长整数，直接输出并判断是否追加类型L */</span></span><br><span class=\"line\">                    <span class=\"keyword\">long</span> val = ((Long) item).longValue();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (writeClassName) &#123;</span><br><span class=\"line\">                        out.writeLong(val);</span><br><span class=\"line\">                        out.write(<span class=\"string\">'L'</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        out.writeLong(val);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((SerializerFeature.DisableCircularReferenceDetect.mask &amp; features) != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 如果禁用循环引用检查，根据元素类型查找序列化实例输出 */</span></span><br><span class=\"line\">                        itemSerializer = serializer.getObjectWriter(item.getClass());</span><br><span class=\"line\">                        itemSerializer.write(serializer, item, i, elementType, features);</span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!out.disableCircularReferenceDetect) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 如果没有禁用循环引用检查，创建新的序列化上下文 */</span></span><br><span class=\"line\">                            SerialContext itemContext = <span class=\"keyword\">new</span> SerialContext(context, object, fieldName, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                            serializer.context = itemContext;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (serializer.containsReference(item)) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 处理对象引用 */</span></span><br><span class=\"line\">                            serializer.writeReference(item);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"comment\">/** 根据集合类型查找序列化实例处理，JavaBeanSerializer后面单独分析 */</span></span><br><span class=\"line\">                            itemSerializer = serializer.getObjectWriter(item.getClass());</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((SerializerFeature.WriteClassName.mask &amp; features) != <span class=\"number\">0</span></span><br><span class=\"line\">                                    &amp;&amp; itemSerializer <span class=\"keyword\">instanceof</span> JavaBeanSerializer)</span><br><span class=\"line\">                            &#123;</span><br><span class=\"line\">                                JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) itemSerializer;</span><br><span class=\"line\">                                javaBeanSerializer.writeNoneASM(serializer, item, i, elementType, features);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                itemSerializer.write(serializer, item, i, elementType, features);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.append(<span class=\"string\">']'</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        serializer.context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>ListSerializer</code>序列化主要判断是否需要格式化json输出，对整型和长整型进行特殊取值，\b如果是对象类型根据class类别查找\b序列化实例处理，和hessian2源码实现原理类似。</p>\n<h3 id=\"DateCodec序列化\"><a href=\"#DateCodec序列化\" class=\"headerlink\" title=\"DateCodec序列化\"></a>DateCodec序列化</h3><p>因为日期序列化和前面已经分析的<code>MiscCodec</code>中<code>SimpleDateFormat</code>相近，在此不冗余分析，可以参考我已经添加的注释分析。</p>\n<h3 id=\"JavaBeanSerializer序列化\"><a href=\"#JavaBeanSerializer序列化\" class=\"headerlink\" title=\"JavaBeanSerializer序列化\"></a>JavaBeanSerializer序列化</h3><p>因为前面已经涵盖了绝大部分<code>fastjson</code>序列化源码分析，为了节省篇幅，\b我准备用一个较为复杂的序列化实现<code>JavaBeanSerializer</code>作为\b结束这章内容。</p>\n<p>在<code>SerializeConfig#getObjectWriter</code>中有一段逻辑<code>createJavaBeanSerializer</code>，我们针对进行细节分析 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> ObjectSerializer <span class=\"title\">createJavaBeanSerializer</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 封装序列化clazz Bean，包含字段类型等等 */</span></span><br><span class=\"line\">    SerializeBeanInfo beanInfo = TypeUtils.buildBeanInfo(clazz, <span class=\"keyword\">null</span>, propertyNamingStrategy, fieldBased);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanInfo.fields.length == <span class=\"number\">0</span> &amp;&amp; Iterable.class.isAssignableFrom(clazz)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 如果clazz是迭代器类型，使用MiscCodec序列化，会被序列化成数组 [,,,] */</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> MiscCodec.instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> createJavaBeanSerializer(beanInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们先进<code>TypeUtils.buildBeanInfo</code>\b看看内部实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SerializeBeanInfo <span class=\"title\">buildBeanInfo</span><span class=\"params\">(Class&lt;?&gt; beanType //</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , Map&lt;String,String&gt; aliasMap //</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , PropertyNamingStrategy propertyNamingStrategy //</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        , <span class=\"keyword\">boolean</span> fieldBased //</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span></span>&#123;</span><br><span class=\"line\">    JSONType jsonType = TypeUtils.getAnnotation(beanType,JSONType.class);</span><br><span class=\"line\">    String[] orders = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> features;</span><br><span class=\"line\">    String typeName = <span class=\"keyword\">null</span>, typeKey = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(jsonType != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        orders = jsonType.orders();</span><br><span class=\"line\"></span><br><span class=\"line\">        typeName = jsonType.typeName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(typeName.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            typeName = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        PropertyNamingStrategy jsonTypeNaming = jsonType.naming();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jsonTypeNaming != PropertyNamingStrategy.CamelCase) &#123;</span><br><span class=\"line\">            propertyNamingStrategy = jsonTypeNaming;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        features = SerializerFeature.of(jsonType.serialzeFeatures());</span><br><span class=\"line\">        <span class=\"comment\">/** 查找类型父类是否包含JSONType注解 */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Class&lt;?&gt; supperClass = beanType.getSuperclass()</span><br><span class=\"line\">            ; supperClass != <span class=\"keyword\">null</span> &amp;&amp; supperClass != Object.class</span><br><span class=\"line\">                ; supperClass = supperClass.getSuperclass())&#123;</span><br><span class=\"line\">            JSONType superJsonType = TypeUtils.getAnnotation(supperClass,JSONType.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(superJsonType == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            typeKey = superJsonType.typeKey();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(typeKey.length() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 查找类型实现的接口是否包含JSONType注解 */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Class&lt;?&gt; interfaceClass : beanType.getInterfaces())&#123;</span><br><span class=\"line\">            JSONType superJsonType = TypeUtils.getAnnotation(interfaceClass,JSONType.class);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(superJsonType != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                typeKey = superJsonType.typeKey();</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(typeKey.length() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(typeKey != <span class=\"keyword\">null</span> &amp;&amp; typeKey.length() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            typeKey = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        features = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** fieldName,field ，先生成fieldName的快照，减少之后的findField的轮询 */</span></span><br><span class=\"line\">    Map&lt;String,Field&gt; fieldCacheMap = <span class=\"keyword\">new</span> HashMap&lt;String,Field&gt;();</span><br><span class=\"line\">    ParserConfig.parserAllFieldToCache(beanType, fieldCacheMap);</span><br><span class=\"line\">    List&lt;FieldInfo&gt; fieldInfoList = fieldBased</span><br><span class=\"line\">            ? computeGettersWithFieldBase(beanType, aliasMap, <span class=\"keyword\">false</span>, propertyNamingStrategy)</span><br><span class=\"line\">            : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, <span class=\"keyword\">false</span>, propertyNamingStrategy);</span><br><span class=\"line\">    FieldInfo[] fields = <span class=\"keyword\">new</span> FieldInfo[fieldInfoList.size()];</span><br><span class=\"line\">    fieldInfoList.toArray(fields);</span><br><span class=\"line\">    FieldInfo[] sortedFields;</span><br><span class=\"line\">    List&lt;FieldInfo&gt; sortedFieldList;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(orders != <span class=\"keyword\">null</span> &amp;&amp; orders.length != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/** computeGettersWithFieldBase基于字段解析,</span></span><br><span class=\"line\"><span class=\"comment\">         *  computeGetters基于方法解析+字段解析</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        sortedFieldList = fieldBased</span><br><span class=\"line\">                ? computeGettersWithFieldBase(beanType, aliasMap, <span class=\"keyword\">true</span>, propertyNamingStrategy) <span class=\"comment\">//</span></span><br><span class=\"line\">                : computeGetters(beanType, jsonType, aliasMap, fieldCacheMap, <span class=\"keyword\">true</span>, propertyNamingStrategy);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        sortedFieldList = <span class=\"keyword\">new</span> ArrayList&lt;FieldInfo&gt;(fieldInfoList);</span><br><span class=\"line\">        Collections.sort(sortedFieldList);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sortedFields = <span class=\"keyword\">new</span> FieldInfo[sortedFieldList.size()];</span><br><span class=\"line\">    sortedFieldList.toArray(sortedFields);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(Arrays.equals(sortedFields, fields))&#123;</span><br><span class=\"line\">        sortedFields = fields;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 封装对象的字段信息和方法信息 */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SerializeBeanInfo(beanType, jsonType, typeName, typeKey, features, fields, sortedFields);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在解析字段的时候有一个区别，computeGettersWithFieldBase基于字段解析而computeGetters基于方法解析(get + is 开头方法)+字段解析。因为两者的解析类似，这里只给出computeGettersWithFieldBase方法解析 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;FieldInfo&gt; <span class=\"title\">computeGettersWithFieldBase</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Class&lt;?&gt; clazz,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Map&lt;String,String&gt; aliasMap,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">boolean</span> sorted,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        PropertyNamingStrategy propertyNamingStrategy)</span></span>&#123;</span><br><span class=\"line\">    Map&lt;String,FieldInfo&gt; fieldInfoMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;String,FieldInfo&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Class&lt;?&gt; currentClass = clazz; currentClass != <span class=\"keyword\">null</span>; currentClass = currentClass.getSuperclass())&#123;</span><br><span class=\"line\">        Field[] fields = currentClass.getDeclaredFields();</span><br><span class=\"line\">        <span class=\"comment\">/** 遍历clazz所有字段，把字段信息封装成bean存储到fieldInfoMap中*/</span></span><br><span class=\"line\">        computeFields(currentClass, aliasMap, propertyNamingStrategy, fieldInfoMap, fields);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 主要处理字段有序的逻辑 */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getFieldInfos(clazz, sorted, fieldInfoMap);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>查看<code>computeFields</code>逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">computeFields</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Class&lt;?&gt; clazz,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Map&lt;String,String&gt; aliasMap,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        PropertyNamingStrategy propertyNamingStrategy,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Map&lt;String,FieldInfo&gt; fieldInfoMap,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        Field[] fields)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Field field : fields)&#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 忽略静态字段类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(Modifier.isStatic(field.getModifiers()))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/** 查找当前字段是否包含JSONField注解 */</span></span><br><span class=\"line\">        JSONField fieldAnnotation = field.getAnnotation(JSONField.class);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ordinal = <span class=\"number\">0</span>, serialzeFeatures = <span class=\"number\">0</span>, parserFeatures = <span class=\"number\">0</span>;</span><br><span class=\"line\">        String propertyName = field.getName();</span><br><span class=\"line\">        String label = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fieldAnnotation != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 忽略不序列化的字段 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!fieldAnnotation.serialize())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/** 获取字段序列化顺序 */</span></span><br><span class=\"line\">            ordinal = fieldAnnotation.ordinal();</span><br><span class=\"line\">            serialzeFeatures = SerializerFeature.of(fieldAnnotation.serialzeFeatures());</span><br><span class=\"line\">            parserFeatures = Feature.of(fieldAnnotation.parseFeatures());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fieldAnnotation.name().length() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 属性名字采用JSONField注解上面的name */</span></span><br><span class=\"line\">                propertyName = fieldAnnotation.name();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fieldAnnotation.label().length() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                label = fieldAnnotation.label();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(aliasMap != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 查找是否包含属性别名的字段 */</span></span><br><span class=\"line\">            propertyName = aliasMap.get(propertyName);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(propertyName == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(propertyNamingStrategy != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 属性字段命名规则转换 */</span></span><br><span class=\"line\">            propertyName = propertyNamingStrategy.translate(propertyName);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 封装解析类型的字段和类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!fieldInfoMap.containsKey(propertyName))&#123;</span><br><span class=\"line\">            FieldInfo fieldInfo = <span class=\"keyword\">new</span> FieldInfo(propertyName, <span class=\"keyword\">null</span>, field, clazz, <span class=\"keyword\">null</span>, ordinal, serialzeFeatures, parserFeatures,</span><br><span class=\"line\">                    <span class=\"keyword\">null</span>, fieldAnnotation, label);</span><br><span class=\"line\">            fieldInfoMap.put(propertyName, fieldInfo);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>处理字段有序的逻辑<code>getFieldInfos</code> :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> List&lt;FieldInfo&gt; <span class=\"title\">getFieldInfos</span><span class=\"params\">(Class&lt;?&gt; clazz, <span class=\"keyword\">boolean</span> sorted, Map&lt;String,FieldInfo&gt; fieldInfoMap)</span></span>&#123;</span><br><span class=\"line\">     List&lt;FieldInfo&gt; fieldInfoList = <span class=\"keyword\">new</span> ArrayList&lt;FieldInfo&gt;();</span><br><span class=\"line\">     String[] orders = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">     <span class=\"comment\">/** 查找clazz上面的JSONType注解 */</span></span><br><span class=\"line\">     JSONType annotation = TypeUtils.getAnnotation(clazz,JSONType.class);</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(annotation != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">         orders = annotation.orders();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(orders != <span class=\"keyword\">null</span> &amp;&amp; orders.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">         LinkedHashMap&lt;String,FieldInfo&gt; map = <span class=\"keyword\">new</span> LinkedHashMap&lt;String,FieldInfo&gt;(fieldInfoList.size());</span><br><span class=\"line\">         <span class=\"keyword\">for</span>(FieldInfo field : fieldInfoMap.values())&#123;</span><br><span class=\"line\">             map.put(field.name, field);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">         <span class=\"comment\">/** 先把有序字段从map移除，并添加到有序列表fieldInfoList中 */</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span>(String item : orders)&#123;</span><br><span class=\"line\">             FieldInfo field = map.get(item);</span><br><span class=\"line\">             <span class=\"keyword\">if</span>(field != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                 fieldInfoList.add(field);</span><br><span class=\"line\">                 map.remove(item);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">/** 将map剩余元素追加到有序列表末尾 */</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span>(FieldInfo field : map.values())&#123;</span><br><span class=\"line\">             fieldInfoList.add(field);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         <span class=\"comment\">/** 如果注解没有要求顺序，全部添加map元素 */</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span>(FieldInfo fieldInfo : fieldInfoMap.values())&#123;</span><br><span class=\"line\">             fieldInfoList.add(fieldInfo);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>(sorted)&#123;</span><br><span class=\"line\">             Collections.sort(fieldInfoList);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> fieldInfoList;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>我们在看下具体创建<code>JavaBeanSerializer</code>序列化逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> ObjectSerializer <span class=\"title\">createJavaBeanSerializer</span><span class=\"params\">(SerializeBeanInfo beanInfo)</span> </span>&#123;</span><br><span class=\"line\">    JSONType jsonType = beanInfo.jsonType;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> asm = <span class=\"keyword\">this</span>.asm &amp;&amp; !fieldBased;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jsonType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        Class&lt;?&gt; serializerClass = jsonType.serializer();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (serializerClass != Void.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 实例化注解指定的类型 */</span></span><br><span class=\"line\">                Object seralizer = serializerClass.newInstance();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (seralizer <span class=\"keyword\">instanceof</span> ObjectSerializer) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> (ObjectSerializer) seralizer;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// skip</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 注解显示指定不使用asm */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jsonType.asm() == <span class=\"keyword\">false</span>) &#123;</span><br><span class=\"line\">            asm = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 注解显示开启WriteNonStringValueAsString、WriteEnumUsingToString</span></span><br><span class=\"line\"><span class=\"comment\">         * 和NotWriteDefaultValue不使用asm */</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SerializerFeature feature : jsonType.serialzeFeatures()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (SerializerFeature.WriteNonStringValueAsString == feature <span class=\"comment\">//</span></span><br><span class=\"line\">                    || SerializerFeature.WriteEnumUsingToString == feature <span class=\"comment\">//</span></span><br><span class=\"line\">                    || SerializerFeature.NotWriteDefaultValue == feature) &#123;</span><br><span class=\"line\">                asm = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Class&lt;?&gt; clazz = beanInfo.beanType;</span><br><span class=\"line\">    <span class=\"comment\">/** 非public类型，直接使用JavaBeanSerializer序列化 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!Modifier.isPublic(beanInfo.beanType.getModifiers())) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JavaBeanSerializer(beanInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ... 省略asm判断检查</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (asm) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用asm字节码库序列化，后面单独列一个章节分析asm源码 */</span></span><br><span class=\"line\">            ObjectSerializer asmSerializer = createASMSerializer(beanInfo);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (asmSerializer != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> asmSerializer;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// skip</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassFormatError e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// skip</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassCastException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// skip</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(<span class=\"string\">\"create asm serializer error, class \"</span></span><br><span class=\"line\">                    + clazz, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 默认使用JavaBeanSerializer 序列化类 */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> JavaBeanSerializer(beanInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>O\bK, 一切就绪，接下来有请<code>JavaBeanSerializer</code>序列化实现登场：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(JSONSerializer serializer, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  Object object, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  Object fieldName, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  Type fieldType, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">int</span> features,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">boolean</span> unwrapped</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">    SerializeWriter out = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        out.writeNull();</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 如果开启循环引用检查，输出引用并返回 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writeReference(serializer, object, features)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> FieldSerializer[] getters;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (out.sortField) &#123;</span><br><span class=\"line\">        getters = <span class=\"keyword\">this</span>.sortedGetters;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        getters = <span class=\"keyword\">this</span>.getters;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    SerialContext parent = serializer.context;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.beanInfo.beanType.isEnum()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 针对非枚举类型，创建新的上下文 */</span></span><br><span class=\"line\">        serializer.setContext(parent, object, fieldName, <span class=\"keyword\">this</span>.beanInfo.features, features);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> writeAsArray = isWriteAsArray(serializer, features);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> startSeperator = writeAsArray ? <span class=\"string\">'['</span> : <span class=\"string\">'&#123;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">char</span> endSeperator = writeAsArray ? <span class=\"string\">']'</span> : <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!unwrapped) &#123;</span><br><span class=\"line\">            out.append(startSeperator);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getters.length &gt; <span class=\"number\">0</span> &amp;&amp; out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">            serializer.incrementIndent();</span><br><span class=\"line\">            serializer.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> commaFlag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((<span class=\"keyword\">this</span>.beanInfo.features &amp; SerializerFeature.WriteClassName.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">            ||(features &amp; SerializerFeature.WriteClassName.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">            || serializer.isWriteClassName(fieldType, object)) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; objClass = object.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Type type;</span><br><span class=\"line\">            <span class=\"comment\">/** 获取字段的泛型类型 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (objClass != fieldType &amp;&amp; fieldType <span class=\"keyword\">instanceof</span> WildcardType) &#123;</span><br><span class=\"line\">                type = TypeUtils.getClass(fieldType);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                type = fieldType;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (objClass != type) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 输出字段类型名字 */</span></span><br><span class=\"line\">                writeClassName(serializer, beanInfo.typeKey, object);</span><br><span class=\"line\">                commaFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">char</span> seperator = commaFlag ? <span class=\"string\">','</span> : <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> directWritePrefix = out.quoteFieldNames &amp;&amp; !out.useSingleQuotes;</span><br><span class=\"line\">        <span class=\"comment\">/** 触发序列化BeforeFilter拦截器 */</span></span><br><span class=\"line\">        <span class=\"keyword\">char</span> newSeperator = <span class=\"keyword\">this</span>.writeBefore(serializer, object, seperator);</span><br><span class=\"line\">        commaFlag = newSeperator == <span class=\"string\">','</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> skipTransient = out.isEnabled(SerializerFeature.SkipTransientField);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> ignoreNonFieldGetter = out.isEnabled(SerializerFeature.IgnoreNonFieldGetter);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; getters.length; ++i) &#123;</span><br><span class=\"line\">            FieldSerializer fieldSerializer = getters[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            Field field = fieldSerializer.fieldInfo.field;</span><br><span class=\"line\">            FieldInfo fieldInfo = fieldSerializer.fieldInfo;</span><br><span class=\"line\">            String fieldInfoName = fieldInfo.name;</span><br><span class=\"line\">            Class&lt;?&gt; fieldClass = fieldInfo.fieldClass;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 忽略配置了transient关键字的字段 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (skipTransient) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fieldInfo.fieldTransient) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 目前看到注解方法上面 field = null */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ignoreNonFieldGetter) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> notApply = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">/** 触发字段PropertyPreFilter拦截器 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((!<span class=\"keyword\">this</span>.applyName(serializer, object, fieldInfoName))</span><br><span class=\"line\">                || !<span class=\"keyword\">this</span>.applyLabel(serializer, fieldInfo.label)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (writeAsArray) &#123;</span><br><span class=\"line\">                    notApply = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** ??? */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (beanInfo.typeKey != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; fieldInfoName.equals(beanInfo.typeKey)</span><br><span class=\"line\">                    &amp;&amp; serializer.isWriteClassName(fieldType, object)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Object propertyValue;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (notApply) &#123;</span><br><span class=\"line\">                propertyValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    propertyValue = fieldSerializer.getPropertyValueDirect(object);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InvocationTargetException ex) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.IgnoreErrorGetter)) &#123;</span><br><span class=\"line\">                        propertyValue = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 针对属性名字和属性值 触发PropertyFilter拦截器 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.apply(serializer, object, fieldInfoName, propertyValue)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldClass == String.class &amp;&amp; <span class=\"string\">\"trim\"</span>.equals(fieldInfo.format)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 剔除字符串两边空格 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (propertyValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    propertyValue = ((String) propertyValue).trim();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            String key = fieldInfoName;</span><br><span class=\"line\">            <span class=\"comment\">/** 触发属性名字NameFilter拦截器 */</span></span><br><span class=\"line\">            key = <span class=\"keyword\">this</span>.processKey(serializer, object, key, propertyValue);</span><br><span class=\"line\"></span><br><span class=\"line\">            Object originalValue = propertyValue;</span><br><span class=\"line\">            <span class=\"comment\">/** 触发属性值ContextValueFilter拦截器 */</span></span><br><span class=\"line\">            propertyValue = <span class=\"keyword\">this</span>.processValue(serializer, fieldSerializer.fieldContext, object, fieldInfoName,</span><br><span class=\"line\">                                                    propertyValue);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (propertyValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> serialzeFeatures = fieldInfo.serialzeFeatures;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (beanInfo.jsonType != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    serialzeFeatures |= SerializerFeature.of(beanInfo.jsonType.serialzeFeatures());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// beanInfo.jsonType</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fieldClass == Boolean.class) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> defaultMask = SerializerFeature.WriteNullBooleanAsFalse.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class=\"number\">0</span> &amp;&amp; (out.features &amp; mask) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        <span class=\"comment\">/** 针对Boolean类型，值为空，输出false */</span></span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((serialzeFeatures &amp; defaultMask) != <span class=\"number\">0</span> || (out.features &amp; defaultMask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        propertyValue = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldClass == String.class) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> defaultMask = SerializerFeature.WriteNullStringAsEmpty.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class=\"number\">0</span> &amp;&amp; (out.features &amp; mask) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((serialzeFeatures &amp; defaultMask) != <span class=\"number\">0</span> || (out.features &amp; defaultMask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 针对string类型，值为空，输出空串\"\" */</span></span><br><span class=\"line\">                        propertyValue = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Number.class.isAssignableFrom(fieldClass)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> defaultMask = SerializerFeature.WriteNullNumberAsZero.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class=\"number\">0</span> &amp;&amp; (out.features &amp; mask) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((serialzeFeatures &amp; defaultMask) != <span class=\"number\">0</span> || (out.features &amp; defaultMask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">/** 针对数字类型，值为空，输出0 */</span></span><br><span class=\"line\">                        propertyValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Collection.class.isAssignableFrom(fieldClass)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> defaultMask = SerializerFeature.WriteNullListAsEmpty.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> mask = defaultMask | SerializerFeature.WriteMapNullValue.mask;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((!writeAsArray) &amp;&amp; (serialzeFeatures &amp; mask) == <span class=\"number\">0</span> &amp;&amp; (out.features &amp; mask) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((serialzeFeatures &amp; defaultMask) != <span class=\"number\">0</span> || (out.features &amp; defaultMask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                        propertyValue = Collections.emptyList();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">/** 针对值为null，配置序列化不输出特性，则输出json字符串排除这些属性 */</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((!writeAsArray) &amp;&amp; (!fieldSerializer.writeNull) &amp;&amp; !out.isEnabled(SerializerFeature.WriteMapNullValue.mask))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 忽略序列化配置为不输出默认值的字段 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (propertyValue != <span class=\"keyword\">null</span></span><br><span class=\"line\">                    &amp;&amp; (out.notWriteDefaultValue</span><br><span class=\"line\">                    || (fieldInfo.serialzeFeatures &amp; SerializerFeature.NotWriteDefaultValue.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">                    || (beanInfo.features &amp; SerializerFeature.NotWriteDefaultValue.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">                    )) &#123;</span><br><span class=\"line\">                Class&lt;?&gt; fieldCLass = fieldInfo.fieldClass;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">byte</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Byte</span><br><span class=\"line\">                    &amp;&amp; ((Byte) propertyValue).byteValue() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">short</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Short</span><br><span class=\"line\">                           &amp;&amp; ((Short) propertyValue).shortValue() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">int</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Integer</span><br><span class=\"line\">                           &amp;&amp; ((Integer) propertyValue).intValue() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">long</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Long</span><br><span class=\"line\">                           &amp;&amp; ((Long) propertyValue).longValue() == <span class=\"number\">0L</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">float</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Float</span><br><span class=\"line\">                           &amp;&amp; ((Float) propertyValue).floatValue() == <span class=\"number\">0F</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">double</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Double</span><br><span class=\"line\">                           &amp;&amp; ((Double) propertyValue).doubleValue() == <span class=\"number\">0</span>D) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fieldCLass == <span class=\"keyword\">boolean</span>.class &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Boolean</span><br><span class=\"line\">                           &amp;&amp; !((Boolean) propertyValue).booleanValue()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (commaFlag) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (fieldInfo.unwrapped</span><br><span class=\"line\">                        &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Map</span><br><span class=\"line\">                        &amp;&amp; ((Map) propertyValue).size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                out.write(<span class=\"string\">','</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">                    serializer.println();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/** 应用拦截器后变更了key */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (key != fieldInfoName) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!writeAsArray) &#123;</span><br><span class=\"line\">                    out.writeFieldName(key, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                serializer.write(propertyValue);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (originalValue != propertyValue) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!writeAsArray) &#123;</span><br><span class=\"line\">                    fieldSerializer.writePrefix(serializer);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">/** 应用拦截器后变更了属性值，查找value的class类型进行序列化 */</span></span><br><span class=\"line\">                serializer.write(propertyValue);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!writeAsArray) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 输出属性字段名称 */</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!fieldInfo.unwrapped) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (directWritePrefix) &#123;</span><br><span class=\"line\">                            out.write(fieldInfo.name_chars, <span class=\"number\">0</span>, fieldInfo.name_chars.length);</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            fieldSerializer.writePrefix(serializer);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!writeAsArray) &#123;</span><br><span class=\"line\">                    JSONField fieldAnnotation = fieldInfo.getAnnotation();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (fieldClass == String.class &amp;&amp; (fieldAnnotation == <span class=\"keyword\">null</span> || fieldAnnotation.serializeUsing() == Void.class)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">/** 处理针对字符串类型属性值输出 */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (propertyValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> ((out.features &amp; SerializerFeature.WriteNullStringAsEmpty.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">                                || (fieldSerializer.features &amp; SerializerFeature.WriteNullStringAsEmpty.mask) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                                out.writeString(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                out.writeNull();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            String propertyValueString = (String) propertyValue;</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (out.useSingleQuotes) &#123;</span><br><span class=\"line\">                                out.writeStringWithSingleQuote(propertyValueString);</span><br><span class=\"line\">                            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                out.writeStringWithDoubleQuote(propertyValueString, (<span class=\"keyword\">char</span>) <span class=\"number\">0</span>);</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (fieldInfo.unwrapped</span><br><span class=\"line\">                                &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Map</span><br><span class=\"line\">                                &amp;&amp; ((Map) propertyValue).size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            commaFlag = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        fieldSerializer.writeValue(serializer, propertyValue);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">/** 基于数组形式输出 [,,,] */</span></span><br><span class=\"line\">                    fieldSerializer.writeValue(serializer, propertyValue);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">boolean</span> fieldUnwrappedNull = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldInfo.unwrapped</span><br><span class=\"line\">                    &amp;&amp; propertyValue <span class=\"keyword\">instanceof</span> Map) &#123;</span><br><span class=\"line\">                Map map = ((Map) propertyValue);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (map.size() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    fieldUnwrappedNull = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!serializer.isEnabled(SerializerFeature.WriteMapNullValue))&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> hasNotNull = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Object value : map.values()) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                            hasNotNull = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!hasNotNull) &#123;</span><br><span class=\"line\">                        fieldUnwrappedNull = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!fieldUnwrappedNull) &#123;</span><br><span class=\"line\">                commaFlag = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 触发序列化AfterFilter拦截器 */</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.writeAfter(serializer, object, commaFlag ? <span class=\"string\">','</span> : <span class=\"string\">'\\0'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getters.length &gt; <span class=\"number\">0</span> &amp;&amp; out.isEnabled(SerializerFeature.PrettyFormat)) &#123;</span><br><span class=\"line\">            serializer.decrementIdent();</span><br><span class=\"line\">            serializer.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!unwrapped) &#123;</span><br><span class=\"line\">            out.append(endSeperator);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        String errorMessage = <span class=\"string\">\"write javaBean error, fastjson version \"</span> + JSON.VERSION;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            errorMessage += <span class=\"string\">\", class \"</span> + object.getClass().getName();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fieldName != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            errorMessage += <span class=\"string\">\", fieldName : \"</span> + fieldName;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (e.getMessage() != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            errorMessage += (<span class=\"string\">\", \"</span> + e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> JSONException(errorMessage, e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        serializer.context = parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在序列化过程中我们重点关注一下序列化属性值的逻辑<code>fieldSerializer.writeValue(serializer, propertyValue)</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeValue</span><span class=\"params\">(JSONSerializer serializer, Object propertyValue)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (runtimeInfo == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Class&lt;?&gt; runtimeFieldClass;</span><br><span class=\"line\">        <span class=\"comment\">/** 获取字段的类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (propertyValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            runtimeFieldClass = <span class=\"keyword\">this</span>.fieldInfo.fieldClass;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            runtimeFieldClass = propertyValue.getClass();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObjectSerializer fieldSerializer = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        JSONField fieldAnnotation = fieldInfo.getAnnotation();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 创建并初始化字段指定序列化类型 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fieldAnnotation != <span class=\"keyword\">null</span> &amp;&amp; fieldAnnotation.serializeUsing() != Void.class) &#123;</span><br><span class=\"line\">            fieldSerializer = (ObjectSerializer) fieldAnnotation.serializeUsing().newInstance();</span><br><span class=\"line\">            serializeUsing = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 针对format和primitive类型创建序列化类型 */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (format != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (runtimeFieldClass == <span class=\"keyword\">double</span>.class || runtimeFieldClass == Double.class) &#123;</span><br><span class=\"line\">                    fieldSerializer = <span class=\"keyword\">new</span> DoubleSerializer(format);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (runtimeFieldClass == <span class=\"keyword\">float</span>.class || runtimeFieldClass == Float.class) &#123;</span><br><span class=\"line\">                    fieldSerializer = <span class=\"keyword\">new</span> FloatCodec(format);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fieldSerializer == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">/** 根据属性值class类型查找序列化类型 */</span></span><br><span class=\"line\">                fieldSerializer = serializer.getObjectWriter(runtimeFieldClass);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 封装序列化类型和属性值的类型 */</span></span><br><span class=\"line\">        runtimeInfo = <span class=\"keyword\">new</span> RuntimeSerializerInfo(fieldSerializer, runtimeFieldClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> RuntimeSerializerInfo runtimeInfo = <span class=\"keyword\">this</span>.runtimeInfo;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> fieldFeatures = disableCircularReferenceDetect?</span><br><span class=\"line\">            (fieldInfo.serialzeFeatures|SerializerFeature.DisableCircularReferenceDetect.getMask()):fieldInfo.serialzeFeatures;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (propertyValue == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        SerializeWriter out  = serializer.out;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fieldInfo.fieldClass == Object.class</span><br><span class=\"line\">                &amp;&amp; out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES)) &#123;</span><br><span class=\"line\">            out.writeNull();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 针对属性值为null的情况处理 */</span></span><br><span class=\"line\">        Class&lt;?&gt; runtimeFieldClass = runtimeInfo.runtimeFieldClass;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Number.class.isAssignableFrom(runtimeFieldClass)) &#123;</span><br><span class=\"line\">            out.writeNull(features, SerializerFeature.WriteNullNumberAsZero.mask);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (String.class == runtimeFieldClass) &#123;</span><br><span class=\"line\">            out.writeNull(features, SerializerFeature.WriteNullStringAsEmpty.mask);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Boolean.class == runtimeFieldClass) &#123;</span><br><span class=\"line\">            out.writeNull(features, SerializerFeature.WriteNullBooleanAsFalse.mask);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Collection.class.isAssignableFrom(runtimeFieldClass)) &#123;</span><br><span class=\"line\">            out.writeNull(features, SerializerFeature.WriteNullListAsEmpty.mask);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ObjectSerializer fieldSerializer = runtimeInfo.fieldSerializer;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((out.isEnabled(SerializerFeature.WRITE_MAP_NULL_FEATURES))</span><br><span class=\"line\">                &amp;&amp; fieldSerializer <span class=\"keyword\">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class=\"line\">            out.writeNull();</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/** 序列化null对象 */</span></span><br><span class=\"line\">        fieldSerializer.write(serializer, <span class=\"keyword\">null</span>, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fieldInfo.isEnum) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writeEnumUsingName) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用枚举名字序列化 */</span></span><br><span class=\"line\">            serializer.out.writeString(((Enum&lt;?&gt;) propertyValue).name());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (writeEnumUsingToString) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** 使用枚举toString字符串序列化 */</span></span><br><span class=\"line\">            serializer.out.writeString(((Enum&lt;?&gt;) propertyValue).toString());</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Class&lt;?&gt; valueClass = propertyValue.getClass();</span><br><span class=\"line\">    ObjectSerializer valueSerializer;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (valueClass == runtimeInfo.runtimeFieldClass || serializeUsing) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/** 使用序列化注解指定的序列化类型 */</span></span><br><span class=\"line\">        valueSerializer = runtimeInfo.fieldSerializer;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        valueSerializer = serializer.getObjectWriter(valueClass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (format != <span class=\"keyword\">null</span> &amp;&amp; !(valueSerializer <span class=\"keyword\">instanceof</span> DoubleSerializer || valueSerializer <span class=\"keyword\">instanceof</span> FloatCodec)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (valueSerializer <span class=\"keyword\">instanceof</span> ContextObjectSerializer) &#123;</span><br><span class=\"line\">            ((ContextObjectSerializer) valueSerializer).write(serializer, propertyValue, <span class=\"keyword\">this</span>.fieldContext);    </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            serializer.writeWithFormat(propertyValue, format);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 特殊检查是否是具体类型序列化JavaBeanSerializer、 MapSerializer */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fieldInfo.unwrapped) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (valueSerializer <span class=\"keyword\">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class=\"line\">            JavaBeanSerializer javaBeanSerializer = (JavaBeanSerializer) valueSerializer;</span><br><span class=\"line\">            javaBeanSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (valueSerializer <span class=\"keyword\">instanceof</span> MapSerializer) &#123;</span><br><span class=\"line\">            MapSerializer mapSerializer = (MapSerializer) valueSerializer;</span><br><span class=\"line\">            mapSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 针对字段类型和属性值类型不一致退化成使用JavaBeanSerializer */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((features &amp; SerializerFeature.WriteClassName.mask) != <span class=\"number\">0</span></span><br><span class=\"line\">            &amp;&amp; valueClass != fieldInfo.fieldClass</span><br><span class=\"line\">            &amp;&amp; JavaBeanSerializer.class.isInstance(valueSerializer)) &#123;</span><br><span class=\"line\">        ((JavaBeanSerializer) valueSerializer).write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 使用值序列化类型处理 */</span></span><br><span class=\"line\">    valueSerializer.write(serializer, propertyValue, fieldInfo.name, fieldInfo.fieldType, fieldFeatures);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到此序列化成json字符串已经全部讲完了，接下来讲解反序列化内容，包含词法分析的代码。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjnbz4et00009xat8334nfbs3","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4et8000ixat8581umkrc"},{"post_id":"cjnbz4esp0001xat8snammwyg","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4ete000nxat8e0xgprop"},{"post_id":"cjnbz4et2000bxat8hnfn04yi","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4etf000qxat8ponqqyjt"},{"post_id":"cjnbz4et6000fxat85etdt877","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4etg000txat8c3d3ndhk"},{"post_id":"cjnbz4est0003xat8lbiv4hj0","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4eth000yxat8hl67v132"},{"post_id":"cjnbz4et8000hxat842hh6rce","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4etj0011xat89wk0y5bd"},{"post_id":"cjnbz4etd000mxat8llrcqqur","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4etk0016xat8ssbwobdo"},{"post_id":"cjnbz4esy0007xat84mcqikl2","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4etm0019xat8ykusk63x"},{"post_id":"cjnbz4eti0010xat8lbvo06xa","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4etm001bxat8rv2ckiuq"},{"post_id":"cjnbz4ete000pxat82wzgsv5z","category_id":"cjnbz4eth000uxat8v6e9euf3","_id":"cjnbz4eto001fxat8t9nneo50"},{"post_id":"cjnbz4etj0013xat8z3bq0rry","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4eto001hxat82f63wfac"},{"post_id":"cjnbz4etl0018xat8p7ebd53m","category_id":"cjnbz4esw0005xat8kd08eee1","_id":"cjnbz4eto001kxat874vq7zlo"},{"post_id":"cjnbz4etg000sxat8tdeyra3z","category_id":"cjnbz4etk0014xat8g1hiiqqg","_id":"cjnbz4etp001mxat8t5q23m4m"},{"post_id":"cjnbz4eth000xxat8g7i62ryg","category_id":"cjnbz4etn001cxat80jzdind5","_id":"cjnbz4etp001nxat8c5utpclf"}],"PostTag":[{"post_id":"cjnbz4et00009xat8334nfbs3","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4et5000exat88jadehi8"},{"post_id":"cjnbz4esp0001xat8snammwyg","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4et7000gxat8y63q152w"},{"post_id":"cjnbz4et2000bxat8hnfn04yi","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4etd000lxat8crwhtae7"},{"post_id":"cjnbz4et6000fxat85etdt877","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4ete000oxat8jzfe5tpd"},{"post_id":"cjnbz4est0003xat8lbiv4hj0","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4etf000rxat8ynjl6u76"},{"post_id":"cjnbz4et8000hxat842hh6rce","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4eth000wxat81xv08b2s"},{"post_id":"cjnbz4etd000mxat8llrcqqur","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4eti000zxat8my0cf2gi"},{"post_id":"cjnbz4esy0007xat84mcqikl2","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4etj0012xat8ktc9of30"},{"post_id":"cjnbz4eti0010xat8lbvo06xa","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4etl0017xat8vmtrsyiu"},{"post_id":"cjnbz4etj0013xat8z3bq0rry","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4etm001axat89ptqfpjr"},{"post_id":"cjnbz4etl0018xat8p7ebd53m","tag_id":"cjnbz4esx0006xat8pinxjymu","_id":"cjnbz4etn001exat8ffm4ygk2"},{"post_id":"cjnbz4ete000pxat82wzgsv5z","tag_id":"cjnbz4eth000vxat8s07d07ta","_id":"cjnbz4eto001gxat83jvv71mg"},{"post_id":"cjnbz4ete000pxat82wzgsv5z","tag_id":"cjnbz4etk0015xat86u5dqe37","_id":"cjnbz4eto001jxat8jcw91fj9"},{"post_id":"cjnbz4etg000sxat8tdeyra3z","tag_id":"cjnbz4etn001dxat88n4ataqn","_id":"cjnbz4etp001lxat8a6uxs1qg"},{"post_id":"cjnbz4eth000xxat8g7i62ryg","tag_id":"cjnbz4eto001ixat8vrxz1b6g","_id":"cjnbz4etp001oxat8hjdt9gmk"}],"Tag":[{"name":"Fastjson源码解析","_id":"cjnbz4esx0006xat8pinxjymu"},{"name":"Spring杂谈","_id":"cjnbz4eth000vxat8s07d07ta"},{"name":"Dubbo框架问题","_id":"cjnbz4etk0015xat86u5dqe37"},{"name":"OpenJDK","_id":"cjnbz4etn001dxat88n4ataqn"},{"name":"工作经历","_id":"cjnbz4eto001ixat8vrxz1b6g"}]}}